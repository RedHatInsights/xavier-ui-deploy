{"version":3,"sources":["webpack:///./src/PresentationalComponents/LoadingState/LoadingState.tsx","webpack:///./src/PresentationalComponents/LoadingState/index.tsx","webpack:///./src/PresentationalComponents/ReportViewPage/ReportViewPage.tsx","webpack:///./src/PresentationalComponents/ReportViewPage/index.tsx","webpack:///./src/pages/ReportView/ReportView.tsx","webpack:///./src/pages/ReportView/index.tsx"],"names":["LoadingState","_ref","loading","placeholder","children","ReportViewPage","props","_this","classCallCheck_default","this","possibleConstructorReturn_default","getPrototypeOf_default","call","state","activeTabKey","react_default","a","createElement","react","frontend_components","title","style","mainStyle","Component","withRouter","ReportView","reportId","match","params","id","fetchReport","_this$props","report","error","Redirect","to","action","PresentationalComponents_ReportViewPage","concat","showBreadcrumb","centered","Card","CardBody","className","customerId","fileName","numberOfHosts","toLocaleString","totalDiskSpace","totalPrice","Date","creationDate","toUTCString","Button","variant","component","Link","React","mapDispatchToProps","connect","_state$reportState","reportState"],"mappings":"0FAMO,IAGQA,EAHa,SAAAC,GAAA,IAAGC,EAAHD,EAAGC,QAASC,EAAZF,EAAYE,YAAaC,EAAzBH,EAAyBG,SAAzB,OACxBF,EAAUC,EAAcC,GCLbJ,yLCuCAK,cAvBX,SAAAA,EAAYC,GAAc,IAAAC,EAAA,OAAAC,IAAAC,KAAAJ,IACtBE,EAAAG,IAAAD,KAAAE,IAAAN,GAAAO,KAAAH,KAAMH,KACDO,MAAQ,CACTC,aAAc,GAHIP,wDAOjB,IACGH,EAAaK,KAAKH,MAAlBF,SAER,OACIW,EAAAC,EAAAC,cAACC,EAAA,SAAD,KACIH,EAAAC,EAAAC,cAACE,EAAA,WAAD,KACIJ,EAAAC,EAAAC,cAACE,EAAA,gBAAD,CAAiBC,MAAQ,aAE7BL,EAAAC,EAAAC,cAACE,EAAA,KAAD,CAAME,MAAQZ,KAAKH,MAAMgB,WACnBlB,WAlBOmB,aCbdC,cAAWnB,uCC0FXoB,cA/DX,SAAAA,EAAYnB,GAAc,IAAAC,EAAA,OAAAC,IAAAC,KAAAgB,IACtBlB,EAAAG,IAAAD,KAAAE,IAAAc,GAAAb,KAAAH,KAAMH,KACDO,MAAQ,CACTa,SAAUpB,EAAMqB,MAAMC,OAAOF,UAHXnB,mEAQtB,IAAMsB,EAAapB,KAAKI,MAAMa,SAC1BG,GACApB,KAAKH,MAAMwB,YAAYD,oCAItB,IAAAE,EACqBtB,KAAKH,MAAvB0B,EADHD,EACGC,OAAQC,EADXF,EACWE,MAGhB,IAFqBxB,KAAKI,MAAlBa,UAESO,EACb,OAAOlB,EAAAC,EAAAC,cAACiB,EAAA,EAAD,CAAUC,GAAE,aAGvB,IAAMC,GAAU3B,KAAKH,MAAMJ,SAAW8B,EAASA,EAAOH,GAAK,GAE3D,OACId,EAAAC,EAAAC,cAACoB,EAAD,CACIjB,MAAK,UAAAkB,OAAaF,GAClBG,gBAAiB,GACjBxB,EAAAC,EAAAC,cAACjB,EAAA,EAAD,CACIE,QAAUO,KAAKH,MAAMJ,QACrBC,YAAcY,EAAAC,EAAAC,cAACE,EAAA,QAAD,CAASqB,UAAQ,KAC/BzB,EAAAC,EAAAC,cAACwB,EAAA,EAAD,KACI1B,EAAAC,EAAAC,cAACyB,EAAA,EAAD,KAEQV,EAAUjB,EAAAC,EAAAC,cAAA,OAAK0B,UAAU,gBACrB5B,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,0BACAF,EAAAC,EAAAC,cAAA,UAAMe,EAAOY,YACb7B,EAAAC,EAAAC,cAAA,wBACAF,EAAAC,EAAAC,cAAA,UAAMe,EAAOa,UACb9B,EAAAC,EAAAC,cAAA,8BACAF,EAAAC,EAAAC,cAAA,UAAMe,EAAOc,cAAcC,kBAC3BhC,EAAAC,EAAAC,cAAA,+BACAF,EAAAC,EAAAC,cAAA,UAAMe,EAAOgB,eAAeD,iBAA5B,MACAhC,EAAAC,EAAAC,cAAA,0BACAF,EAAAC,EAAAC,cAAA,UAAMe,EAAOiB,YACblC,EAAAC,EAAAC,cAAA,4BACAF,EAAAC,EAAAC,cAAA,UAAM,IAAIiC,KAAKlB,EAAOmB,cAAcC,gBAExCrC,EAAAC,EAAAC,cAACoC,EAAA,EAAD,CAAQC,QAAQ,YAAYC,UAAaC,IAAOrB,GAAG,YAAnD,SAGA,cAtDXsB,IAAMlC,0BCbzBmC,EAAqB,CACvB5B,iBAGWN,sBACXmC,kBAdoB,SAAC9C,GAAwB,IAAA+C,EACV/C,EAAMgD,YACzC,MAAO,CACH7B,OAHyC4B,EACrC5B,OAGJ9B,QAJyC0D,EAC7B1D,QAIZ+B,MALyC2B,EACpB3B,QAerByB,EAFJC,CAGElC","file":"js/ReportView-811529323c4727da3508.js","sourcesContent":["interface Props {\n    placeholder: any,\n    children: any,\n    loading?: boolean // Is assumed to be false if undefined\n}\n\nexport const LoadingState = ({ loading, placeholder, children }: Props) =>\n    loading ? placeholder : children;\n\nexport default LoadingState;\n","import LoadingState from './LoadingState';\n\nexport default LoadingState;\n","import React, { Fragment, Component } from 'react';\n\nimport {\n    Main,\n    PageHeader,\n    PageHeaderTitle\n} from '@redhat-cloud-services/frontend-components';\n\ninterface Props {\n    mainStyle?: any;\n};\n\ninterface State {\n    activeTabKey: number\n}\n\nclass ReportViewPage extends Component<Props, State> {\n\n    constructor(props: Props) {\n        super(props);\n        this.state = {\n            activeTabKey: 0\n        };\n    }\n\n    render() {\n        const { children } = this.props;\n\n        return (\n            <Fragment>\n                <PageHeader>\n                    <PageHeaderTitle title={ 'Reports' } />\n                </PageHeader>\n                <Main style={ this.props.mainStyle }>\n                    { children }\n                </Main>\n            </Fragment>\n        );\n    }\n};\n\nexport default ReportViewPage;\n","import ReportViewPage from './ReportViewPage';\nimport { withRouter } from 'react-router';\n\nexport default withRouter(ReportViewPage);\n","import React from 'react';\nimport { Redirect, Link } from 'react-router-dom';\nimport {\n    Spinner\n} from '@redhat-cloud-services/frontend-components';\nimport { RouterGlobalProps } from '../../models/router';\nimport { Report } from '../../models';\nimport ReportViewPage from '../../PresentationalComponents/ReportViewPage';\nimport LoadingState from '../../PresentationalComponents/LoadingState';\nimport { Card, CardBody, Button } from '@patternfly/react-core';\n\ninterface StateToProps {\n    error: string | null;\n    report: Report | null;\n    loading: boolean;\n}\n\ninterface DispatchToProps {\n    fetchReport: (reportId: number) => void;\n}\n\ninterface Props extends StateToProps, DispatchToProps, RouterGlobalProps {\n};\n\ninterface State {\n    reportId: number;\n};\n\nclass ReportView extends React.Component<Props, State> {\n\n    constructor(props: Props) {\n        super(props);\n        this.state = {\n            reportId: props.match.params.reportId\n        };\n    }\n\n    componentDidMount(): void {\n        const id: number = this.state.reportId;\n        if (id) {\n            this.props.fetchReport(id);\n        }\n    }\n\n    render() {\n        const { report, error } = this.props;\n        const { reportId } = this.state;\n\n        if (!reportId || error) {\n            return <Redirect to={ `/reports` } />;\n        }\n\n        const action = !this.props.loading && report ? report.id : '';\n\n        return (\n            <ReportViewPage\n                title={ `Report ${action}` }\n                showBreadcrumb={ false }>\n                <LoadingState\n                    loading={ this.props.loading }\n                    placeholder={ <Spinner centered/> }>\n                    <Card>\n                        <CardBody>\n                            {\n                                report ? (<div className=\"pf-c-content\">\n                                    <dl>\n                                        <dt>Customer id:</dt>\n                                        <dd>{ report.customerId }</dd>\n                                        <dt>File name:</dt>\n                                        <dd>{ report.fileName }</dd>\n                                        <dt>Number of hosts:</dt>\n                                        <dd>{ report.numberOfHosts.toLocaleString() }</dd>\n                                        <dt>Total disk space:</dt>\n                                        <dd>{ report.totalDiskSpace.toLocaleString() } B</dd>\n                                        <dt>Total price:</dt>\n                                        <dd>{ report.totalPrice }</dd>\n                                        <dt>Creation date:</dt>\n                                        <dd>{ new Date(report.creationDate).toUTCString() }</dd>\n                                    </dl>\n                                    <Button variant=\"secondary\" component= { Link } to=\"/reports\">Back</Button>\n                                </div>\n                                ) : (\n                                    ''\n                                )\n                            }\n                        </CardBody>\n                    </Card>\n                </LoadingState>\n            </ReportViewPage>\n        );\n    }\n}\n\nexport default ReportView;\n","import { GlobalState } from '../../models/state';\nimport { withRouter } from 'react-router';\nimport ReportView from './ReportView';\nimport { fetchReport } from '../../actions/ReportActions';\nimport { connect } from 'react-redux';\n\nconst mapStateToProps = (state: GlobalState)  => {\n    const { report, loading, error } = state.reportState;\n    return {\n        report,\n        loading,\n        error\n    };\n};\n\nconst mapDispatchToProps = {\n    fetchReport\n};\n\nexport default withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(ReportView)\n);\n"],"sourceRoot":""}