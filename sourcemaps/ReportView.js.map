{"version":3,"sources":["webpack:///./src/PresentationalComponents/LoadingState/LoadingState.tsx","webpack:///./src/PresentationalComponents/ReportListPage/ReportListPage.tsx","webpack:///./src/SmartComponents/ReportView/ReportView.tsx","webpack:///./src/Utilities/formatValue.js"],"names":["LoadingState","loading","placeholder","children","ReportListPage","event","preventDefault","props","history","push","location","pathname","toIndex","showBreadcrumb","marginLeft","showRootLink","marginTop","title","mainStyle","Component","withRouter","ReportView","state","reportId","match","params","fetchData","id","fetchReport","report","error","action","customerId","fileName","numberOfHosts","toLocaleString","totalDiskSpace","formatValue","totalPrice","Date","creationDate","toUTCString","Link","React","mapStateToProps","reports","mapDispatchToProps","dispatch","bindActionCreators","connect","unitLookupKey","unit","lookup","toLowerCase","formatCurrency","value","fractionDigits","fValue","style","currency","minimumFractionDigits","maximumFractionDigits","unknownTypeFormatter","_unit","toFixed","formatUsageGb","formatUsageHrs","options"],"mappings":"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","file":"js/ReportView-bff2af952e9ac853a8c9.js","sourcesContent":["interface Props {\n    placeholder: any,\n    children: any,\n    loading?: boolean // Is assumed to be false if undefined\n}\n\nexport const LoadingState = ({ loading, placeholder, children }: Props) =>\n    loading ? placeholder : children;\n\nexport default LoadingState;\n","import React, { Fragment, Component } from 'react';\nimport { withRouter } from 'react-router-dom';\n\nimport {\n    Main,\n    PageHeader,\n    PageHeaderTitle\n} from '@redhat-cloud-services/frontend-components';\nimport {\n    Breadcrumb,\n    BreadcrumbItem\n} from '@patternfly/react-core';\nimport { RouterGlobalProps } from '../../models/router';\n\ninterface Props extends RouterGlobalProps {\n    title: string;\n    mainStyle?: any;\n    showBreadcrumb?: boolean;\n};\n\ninterface State {\n}\n\nexport class ReportListPage extends Component<Props, State> {\n\n    toIndex(event: any): void {\n        event.preventDefault();\n        this.props.history.push('/reports');\n    }\n\n    showRootLink() {\n        return (\n            this.props.history && this.props.history.location.pathname !== '/reports' ?\n                <BreadcrumbItem to='#' onClick={ this.toIndex }>Reports</BreadcrumbItem>\n                : ''\n        );\n    }\n\n    showBreadcrumb() {\n        return (\n            this.props.showBreadcrumb && <Breadcrumb style={ { marginLeft: 'calc(var(--pf-c-content--ol--MarginLeft) * -1 * 2)' } }>\n                { this.showRootLink() }\n                <BreadcrumbItem isActive style={ { marginTop: 0 } }>{ this.props.title }</BreadcrumbItem>\n            </Breadcrumb>\n        );\n    }\n\n    render() {\n        const { title, children } = this.props;\n\n        return (\n            <Fragment>\n                { <PageHeader>\n                    { this.showBreadcrumb() }\n                    <PageHeaderTitle title={ title } />\n                </PageHeader> }\n                <Main style={ this.props.mainStyle }>\n                    { children }\n                </Main>\n            </Fragment>\n        );\n    }\n};\n\nexport default withRouter(ReportListPage);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport { Link, Redirect, withRouter } from 'react-router-dom';\nimport {\n    Card,\n    CardBody,\n    Button\n} from '@patternfly/react-core';\nimport {\n    Spinner\n} from '@redhat-cloud-services/frontend-components';\nimport { ReportListPage } from '../../PresentationalComponents/ReportListPage/ReportListPage';\nimport LoadingState from '../../PresentationalComponents/LoadingState/LoadingState';\nimport { fetchReport } from '../../actions/ReportActions';\nimport { formatValue } from '../../Utilities/formatValue';\nimport { RouterGlobalProps } from '../../models/router';\nimport { Report } from '../../models';\nimport { GlobalState } from '../../models/state';\n\ninterface StateToProps extends RouterGlobalProps {\n    error: string | null;\n    report: Report | null;\n    loading: boolean;\n}\n\ninterface DispatchToProps {\n    fetchReport: (reportId: number) => void;\n}\n\ninterface Props extends StateToProps, DispatchToProps {\n};\n\ninterface State {\n    reportId: number;\n};\n\nexport class ReportView extends React.Component<Props, State> {\n\n    constructor(props: Props) {\n        super(props);\n        this.state = {\n            reportId: props.match.params.reportId\n        };\n    }\n\n    componentDidMount(): void {\n        this.fetchData();\n    }\n\n    fetchData(): void {\n        const id: number = this.state.reportId;\n        if (id) {\n            this.props.fetchReport(id);\n        }\n    }\n\n    render() {\n        const { report, error } = this.props;\n        const { reportId } = this.state;\n\n        if (!reportId || error) {\n            return <Redirect to={ `/reports` } />;\n        }\n\n        let action = !this.props.loading && report ? report.id : '';\n\n        return (\n            <ReportListPage\n                title={ `Report ${action}` }\n                showBreadcrumb={ false }>\n                <LoadingState\n                    loading={ this.props.loading }\n                    placeholder={ <Spinner centered/> }>\n                    <Card>\n                        <CardBody>\n                            {\n                                report ? (<div className=\"pf-c-content\">\n                                    <dl>\n                                        <dt>Customer id:</dt>\n                                        <dd>{ report.customerId }</dd>\n                                        <dt>File name:</dt>\n                                        <dd>{ report.fileName }</dd>\n                                        <dt>Number of hosts:</dt>\n                                        <dd>{ report.numberOfHosts.toLocaleString() }</dd>\n                                        <dt>Total disk space:</dt>\n                                        <dd>{ report.totalDiskSpace.toLocaleString() } B</dd>\n                                        <dt>Total price:</dt>\n                                        <dd>{ formatValue(report.totalPrice, 'usd') }</dd>\n                                        <dt>Creation date:</dt>\n                                        <dd>{ new Date(report.creationDate).toUTCString() }</dd>\n                                    </dl>\n                                    <Button variant=\"secondary\" component= { Link } to=\"/reports\">Back</Button>\n                                </div>\n                                ) : (\n                                    ''\n                                )\n                            }\n                        </CardBody>\n                    </Card>\n                </LoadingState>\n            </ReportListPage>\n        );\n    }\n}\n\nconst mapStateToProps = (state: GlobalState)  => {\n    let { report, loading, error } = state.reports;\n    return {\n        report,\n        loading,\n        error\n    };\n};\n\nconst mapDispatchToProps = (dispatch: any) => {\n    return bindActionCreators({\n        fetchReport\n    }, dispatch);\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withRouter(ReportView));\n","export const unitLookupKey = unit => {\n    const lookup = unit ? unit.toLowerCase() : '';\n    return lookup;\n};\n\nexport const formatCurrency = (\n    value,\n    unit,\n    { fractionDigits = 2 } = {}\n) => {\n    let fValue = value;\n    if (!value) {\n        fValue = 0;\n    }\n\n    return fValue.toLocaleString('en', {\n        style: 'currency',\n        currency: unit || 'USD',\n        minimumFractionDigits: fractionDigits,\n        maximumFractionDigits: fractionDigits\n    });\n};\n\nconst unknownTypeFormatter = (\n    value,\n    _unit,\n    { fractionDigits } = {}\n) => {\n    return value.toFixed(fractionDigits);\n};\n\nexport const formatUsageGb = (\n    value,\n    _unit,\n    { fractionDigits = 2 } = {}\n) => {\n    return value.toFixed(fractionDigits);\n};\n\nexport const formatUsageHrs = (\n    value,\n    _unit,\n    { fractionDigits } = {}\n) => {\n    return value.toFixed(fractionDigits);\n};\n\nexport const formatValue = (\n    value,\n    unit,\n    options = {}\n) => {\n    const lookup = unitLookupKey(unit);\n    const fValue = value || 0;\n\n    switch (lookup) {\n        case 'usd':\n            return formatCurrency(fValue, lookup, options);\n        case 'gb':\n        case 'gb-hours':\n        case 'gb-mo':\n            return formatUsageGb(fValue, lookup, options);\n        case 'core-hours':\n        case 'hrs':\n            return formatUsageHrs(fValue, lookup, options);\n        default:\n            return unknownTypeFormatter(fValue, lookup, options);\n    }\n};\n"],"sourceRoot":""}