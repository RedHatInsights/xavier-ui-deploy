{"version":3,"sources":["webpack:///./src/PresentationalComponents/ReportListPage/ReportListPage.tsx","webpack:///./src/PresentationalComponents/LoadingState/LoadingState.tsx","webpack:///./src/SmartComponents/ReportView/ReportView.tsx","webpack:///./src/Utilities/formatValue.js"],"names":["ReportListPage","_Component","_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default","this","_babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_2___default","_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_3___default","apply","arguments","_babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_4___default","_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default","key","value","event","preventDefault","props","history","push","location","pathname","react__WEBPACK_IMPORTED_MODULE_5___default","a","createElement","_patternfly_react_core__WEBPACK_IMPORTED_MODULE_8__","to","onClick","toIndex","showBreadcrumb","_patternfly_react_core__WEBPACK_IMPORTED_MODULE_9__","style","marginLeft","showRootLink","isActive","marginTop","title","_this$props","children","react__WEBPACK_IMPORTED_MODULE_5__","_redhat_cloud_services_frontend_components__WEBPACK_IMPORTED_MODULE_7__","mainStyle","Component","withRouter","LoadingState","_ref","loading","placeholder","ReportView","_React$Component","_this","classCallCheck_default","possibleConstructorReturn_default","getPrototypeOf_default","call","state","reportId","match","params","inherits_default","createClass_default","fetchData","id","fetchReport","report","error","react_default","Redirect","action","concat","frontend_components","centered","Card","CardBody","className","customerId","fileName","numberOfHosts","toLocaleString","totalDiskSpace","unit","options","length","undefined","lookup","toLowerCase","unitLookupKey","fValue","_ref$fractionDigits","fractionDigits","currency","minimumFractionDigits","maximumFractionDigits","formatCurrency","_unit","_ref3$fractionDigits","toFixed","formatUsageGb","unknownTypeFormatter","formatValue","totalPrice","Date","creationDate","toUTCString","Button","variant","component","Link","React","connect","_state$reports","reports","dispatch","bindActionCreators"],"mappings":"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","file":"js/ReportView-40b43ab0336e18bfde2a.js","sourcesContent":["import React, { Fragment, Component } from 'react';\nimport { withRouter } from 'react-router-dom';\n\nimport {\n    Main,\n    PageHeader,\n    PageHeaderTitle\n} from '@redhat-cloud-services/frontend-components';\nimport {\n    Breadcrumb,\n    BreadcrumbItem\n} from '@patternfly/react-core';\nimport { RouterGlobalProps } from '../../models/router';\n\ninterface Props extends RouterGlobalProps {\n    title: string;\n    mainStyle?: any;\n    showBreadcrumb?: boolean;\n};\n\ninterface State {\n}\n\nexport class ReportListPage extends Component<Props, State> {\n\n    toIndex(event: any): void {\n        event.preventDefault();\n        this.props.history.push('/reports');\n    }\n\n    showRootLink() {\n        return (\n            this.props.history && this.props.history.location.pathname !== '/reports' ?\n                <BreadcrumbItem to='#' onClick={ this.toIndex }>Reports</BreadcrumbItem>\n                : ''\n        );\n    }\n\n    showBreadcrumb() {\n        return (\n            this.props.showBreadcrumb && <Breadcrumb style={ { marginLeft: 'calc(var(--pf-c-content--ol--MarginLeft) * -1 * 2)' } }>\n                { this.showRootLink() }\n                <BreadcrumbItem isActive style={ { marginTop: 0 } }>{ this.props.title }</BreadcrumbItem>\n            </Breadcrumb>\n        );\n    }\n\n    render() {\n        const { title, children } = this.props;\n\n        return (\n            <Fragment>\n                { <PageHeader>\n                    { this.showBreadcrumb() }\n                    <PageHeaderTitle title={ title } />\n                </PageHeader> }\n                <Main style={ this.props.mainStyle }>\n                    { children }\n                </Main>\n            </Fragment>\n        );\n    }\n};\n\nexport default withRouter(ReportListPage);\n","interface Props {\n    placeholder: any,\n    children: any,\n    loading?: boolean // Is assumed to be false if undefined\n}\n\nexport const LoadingState = ({ loading, placeholder, children }: Props) =>\n    loading ? placeholder : children;\n\nexport default LoadingState;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport { Link, Redirect, withRouter } from 'react-router-dom';\nimport {\n    Card,\n    CardBody,\n    Button\n} from '@patternfly/react-core';\nimport {\n    Spinner\n} from '@redhat-cloud-services/frontend-components';\nimport { ReportListPage } from '../../PresentationalComponents/ReportListPage/ReportListPage';\nimport LoadingState from '../../PresentationalComponents/LoadingState/LoadingState';\nimport { fetchReport } from '../../actions/ReportActions';\nimport { formatValue } from '../../Utilities/formatValue';\nimport { RouterGlobalProps } from '../../models/router';\nimport { Report } from '../../models';\nimport { GlobalState } from '../../models/state';\n\ninterface StateToProps extends RouterGlobalProps {\n    error: string | null;\n    report: Report | null;\n    loading: boolean;\n}\n\ninterface DispatchToProps {\n    fetchReport: (reportId: number) => void;\n}\n\ninterface Props extends StateToProps, DispatchToProps {\n};\n\ninterface State {\n    reportId: number;\n};\n\nexport class ReportView extends React.Component<Props, State> {\n\n    constructor(props: Props) {\n        super(props);\n        this.state = {\n            reportId: props.match.params.reportId\n        };\n    }\n\n    componentDidMount(): void {\n        this.fetchData();\n    }\n\n    fetchData(): void {\n        const id: number = this.state.reportId;\n        if (id) {\n            this.props.fetchReport(id);\n        }\n    }\n\n    render() {\n        const { report, error } = this.props;\n        const { reportId } = this.state;\n\n        if (!reportId || error) {\n            return <Redirect to={ `/reports` } />;\n        }\n\n        let action = !this.props.loading && report ? report.id : '';\n\n        return (\n            <ReportListPage\n                title={ `Report ${action}` }\n                showBreadcrumb={ false }>\n                <LoadingState\n                    loading={ this.props.loading }\n                    placeholder={ <Spinner centered/> }>\n                    <Card>\n                        <CardBody>\n                            {\n                                report ? (<div className=\"pf-c-content\">\n                                    <dl>\n                                        <dt>Customer id:</dt>\n                                        <dd>{ report.customerId }</dd>\n                                        <dt>File name:</dt>\n                                        <dd>{ report.fileName }</dd>\n                                        <dt>Number of hosts:</dt>\n                                        <dd>{ report.numberOfHosts.toLocaleString() }</dd>\n                                        <dt>Total disk space:</dt>\n                                        <dd>{ report.totalDiskSpace.toLocaleString() } B</dd>\n                                        <dt>Total price:</dt>\n                                        <dd>{ formatValue(report.totalPrice, 'usd') }</dd>\n                                        <dt>Creation date:</dt>\n                                        <dd>{ new Date(report.creationDate).toUTCString() }</dd>\n                                    </dl>\n                                    <Button variant=\"secondary\" component= { Link } to=\"/reports\">Back</Button>\n                                </div>\n                                ) : (\n                                    ''\n                                )\n                            }\n                        </CardBody>\n                    </Card>\n                </LoadingState>\n            </ReportListPage>\n        );\n    }\n}\n\nconst mapStateToProps = (state: GlobalState)  => {\n    let { report, loading, error } = state.reports;\n    return {\n        report,\n        loading,\n        error\n    };\n};\n\nconst mapDispatchToProps = (dispatch: any) => {\n    return bindActionCreators({\n        fetchReport\n    }, dispatch);\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withRouter(ReportView));\n","export const unitLookupKey = unit => {\n    const lookup = unit ? unit.toLowerCase() : '';\n    return lookup;\n};\n\nexport const formatCurrency = (\n    value,\n    unit,\n    { fractionDigits = 2 } = {}\n) => {\n    let fValue = value;\n    if (!value) {\n        fValue = 0;\n    }\n\n    return fValue.toLocaleString('en', {\n        style: 'currency',\n        currency: unit || 'USD',\n        minimumFractionDigits: fractionDigits,\n        maximumFractionDigits: fractionDigits\n    });\n};\n\nconst unknownTypeFormatter = (\n    value,\n    _unit,\n    { fractionDigits } = {}\n) => {\n    return value.toFixed(fractionDigits);\n};\n\nexport const formatUsageGb = (\n    value,\n    _unit,\n    { fractionDigits = 2 } = {}\n) => {\n    return value.toFixed(fractionDigits);\n};\n\nexport const formatUsageHrs = (\n    value,\n    _unit,\n    { fractionDigits } = {}\n) => {\n    return value.toFixed(fractionDigits);\n};\n\nexport const formatValue = (\n    value,\n    unit,\n    options = {}\n) => {\n    const lookup = unitLookupKey(unit);\n    const fValue = value || 0;\n\n    switch (lookup) {\n        case 'usd':\n            return formatCurrency(fValue, lookup, options);\n        case 'gb':\n        case 'gb-hours':\n        case 'gb-mo':\n            return formatUsageGb(fValue, lookup, options);\n        case 'core-hours':\n        case 'hrs':\n            return formatUsageHrs(fValue, lookup, options);\n        default:\n            return unknownTypeFormatter(fValue, lookup, options);\n    }\n};\n"],"sourceRoot":""}