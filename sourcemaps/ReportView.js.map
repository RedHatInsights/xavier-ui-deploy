{"version":3,"sources":["webpack:///./src/pages/ReportView/ReportViewConstants.tsx","webpack:///./src/PresentationalComponents/ReportViewPage/ReportViewPage.tsx","webpack:///./src/PresentationalComponents/ReportViewPage/index.tsx","webpack:///./src/pages/ReportView/ReportView.tsx","webpack:///./src/pages/ReportView/index.tsx"],"names":["ReportViewPaths","workloadMigrationSummary","initialSavingsEstimation","workloadInventory","ReportViewPage","props","_this","classCallCheck_default","this","possibleConstructorReturn_default","getPrototypeOf_default","call","handleTabClick","_event","tabIndex","setState","activeTabKey","_this$props","history","match","push","concat","url","renderTabs","report","currentBreadcrumb","fileName","react_default","a","createElement","Fragment","Breadcrumb","style","marginBottom","BreadcrumbItem","Link","to","isActive","Tabs","isFilled","onSelect","activeKey","state","Tab","eventKey","title","renderTabsSkeleton","className","frontend_components","size","location","pathname","endsWith","_this$props2","reportFetchStatus","children","error","Redirect","isFetchComplete","status","react","mainStyle","Component","withRouter","WorkloadMigrationSummary","asyncComponent","__webpack_require__","e","then","bind","InitialSavingsEstimation","Promise","all","WorkloadInventory","ReportView","reportId","params","fetchReport","PresentationalComponents_ReportViewPage","Switch","Route","path","component","from","React","mapDispatchToProps","connect","_state$reportState","reportState"],"mappings":"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","file":"js/ReportView-ca1a1afa9f3a9b434370.js","sourcesContent":["export const ReportViewPaths = {\n    workloadMigrationSummary: 'workloadMigrationSummary',\n    initialSavingsEstimation: 'initialSavingsEstimation',\n    workloadInventory: 'workloadInventory'\n};\n","import React, { Fragment, Component } from 'react';\nimport { Redirect } from 'react-router-dom';\nimport {\n    Main,\n    PageHeader,\n    PageHeaderTitle,\n    Skeleton\n} from '@redhat-cloud-services/frontend-components';\nimport {\n    Tabs,\n    Tab,\n    Breadcrumb,\n    BreadcrumbItem\n} from '@patternfly/react-core';\nimport { Report } from '../../models';\nimport { Link } from 'react-router-dom';\nimport { RouterGlobalProps } from '../../models/router';\nimport { ReportViewPaths } from '../../pages/ReportView/ReportViewConstants';\nimport { ObjectFetchStatus } from '../../models/state';\n\nexport interface Props extends RouterGlobalProps {\n    mainStyle?: any;\n    report: Report | null;\n    reportFetchStatus: ObjectFetchStatus;\n};\n\ninterface State {\n    activeTabKey: number\n}\n\nclass ReportViewPage extends Component<Props, State> {\n\n    constructor(props: Props) {\n        super(props);\n\n        let activeTabKey = 1;\n\n        if (props.location.pathname.endsWith(ReportViewPaths.workloadMigrationSummary)) {\n            activeTabKey = 0;\n        } else if (props.location.pathname.endsWith(ReportViewPaths.workloadMigrationSummary)) {\n            activeTabKey = 1;\n        } else if (props.location.pathname.endsWith(ReportViewPaths.workloadInventory)) {\n            activeTabKey = 2;\n        }\n\n        this.state = {\n            activeTabKey\n        };\n    }\n\n    handleTabClick = (_event: any, tabIndex: number) => {\n        this.setState({\n            activeTabKey: tabIndex\n        });\n\n        const { history, match } = this.props;\n\n        switch (tabIndex) {\n            case 0:\n                history.push(`${match.url}/${ReportViewPaths.workloadMigrationSummary}`);\n                break;\n            case 1:\n                history.push(`${match.url}/${ReportViewPaths.initialSavingsEstimation}`);\n                break;\n            case 2:\n                history.push(`${match.url}/${ReportViewPaths.workloadInventory}`);\n                break;\n        }\n    };\n\n    renderTabs = () => {\n        const { report } = this.props;\n        const currentBreadcrumb = report ? report.fileName : '';\n\n        return (\n            <React.Fragment>\n                <Breadcrumb style={ { marginBottom: '25px' } }>\n                    <BreadcrumbItem>\n                        <Link to=\"/reports\">Reports</Link>\n                    </BreadcrumbItem>\n                    <BreadcrumbItem isActive>{ currentBreadcrumb }</BreadcrumbItem>\n                </Breadcrumb>\n                <Tabs\n                    isFilled\n                    onSelect={ this.handleTabClick }\n                    activeKey={ this.state.activeTabKey }\n                >\n                    <Tab eventKey={ 0 } title=\"Workload Migration Summary\"></Tab>\n                    <Tab eventKey={ 1 } title=\"Initials Savings Estimation\"></Tab>\n                    <Tab eventKey={ 2 } title=\"Workload Inventory\"></Tab>\n                </Tabs>\n            </React.Fragment>\n        );\n    }\n\n    renderTabsSkeleton = () => {\n        return (\n            <React.Fragment>\n                <div className=\"pf-l-stack pf-m-gutter\">\n                    <div className=\"pf-l-stack__item\">\n                        <Skeleton size=\"sm\" />\n                    </div>\n                    <div className=\"pf-l-stack__item\">\n                        <div className=\"pf-l-grid\">\n                            <div className=\"pf-l-grid__item pf-m-4-col\">\n                                <Skeleton size=\"md\" />\n                            </div>\n                            <div className=\"pf-l-grid__item pf-m-4-col\">\n                                <Skeleton size=\"md\" />\n                            </div>\n                            <div className=\"pf-l-grid__item pf-m-4-col\">\n                                <Skeleton size=\"md\" />\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </React.Fragment>\n        );\n    };\n\n    render() {\n        const { reportFetchStatus, children } = this.props;\n\n        if (reportFetchStatus.error) {\n            return <Redirect to={ `/reports` } />;\n        }\n\n        const isFetchComplete: boolean = reportFetchStatus.status === 'complete';\n\n        return (\n            <Fragment>\n                <PageHeader>\n                    <PageHeaderTitle title={ isFetchComplete ? this.renderTabs() : this.renderTabsSkeleton() } />\n                </PageHeader>\n                <Main style={ this.props.mainStyle }>\n                    { isFetchComplete ? children : '' }\n                </Main>\n            </Fragment>\n        );\n    }\n}\n\nexport default ReportViewPage;\n","import ReportViewPage from './ReportViewPage';\nimport { withRouter } from 'react-router';\n\nexport default withRouter(ReportViewPage);\n","import React from 'react';\nimport { Redirect, Switch, Route } from 'react-router-dom';\nimport { RouterGlobalProps } from '../../models/router';\nimport { Report } from '../../models';\nimport ReportViewPage from '../../PresentationalComponents/ReportViewPage';\nimport asyncComponent from '../../Utilities/asyncComponent';\nimport { ReportViewPaths } from './ReportViewConstants';\nimport { ObjectFetchStatus } from '../../models/state';\n\ninterface StateToProps {\n    report: Report | null;\n    reportFetchStatus: ObjectFetchStatus;\n}\n\ninterface DispatchToProps {\n    fetchReport: (reportId: number) => void;\n}\n\ninterface Props extends StateToProps, DispatchToProps, RouterGlobalProps {\n};\n\ninterface State {\n    reportId: number;\n};\n\nconst WorkloadMigrationSummary = asyncComponent(() =>\n    import(/* webpackChunkName: \"WorkloadMigrationSummary\" */ './WorkloadMigrationSummary'));\nconst InitialSavingsEstimation = asyncComponent(() =>\n    import(/* webpackChunkName: \"InitialSavingsEstimation\" */ './InitialSavingsEstimation'));\nconst WorkloadInventory = asyncComponent(() =>\n    import(/* webpackChunkName: \"WorkloadInventory\" */ './WorkloadInventory'));\n\nclass ReportView extends React.Component<Props, State> {\n\n    constructor(props: Props) {\n        super(props);\n        this.state = {\n            reportId: props.match.params.reportId\n        };\n    }\n\n    componentDidMount() {\n        const { reportId } = this.state;\n        this.props.fetchReport(reportId);\n    }\n\n    render() {\n        const { report, reportFetchStatus } = this.props;\n        return (\n            <ReportViewPage\n                report={ report }\n                reportFetchStatus={ reportFetchStatus }\n            >\n                <Switch>\n                    <Route\n                        path={ `${this.props.match.url}/${ReportViewPaths.workloadMigrationSummary}` }\n                        component={ WorkloadMigrationSummary }\n                    />\n                    <Route\n                        path={ `${this.props.match.url}/${ReportViewPaths.initialSavingsEstimation}` }\n                        component={ InitialSavingsEstimation }\n                    />\n                    <Route\n                        path={ `${this.props.match.url}/${ReportViewPaths.workloadInventory}` }\n                        component={ WorkloadInventory }\n                    />\n\n                    <Redirect\n                        from={ `${this.props.match.url}` }\n                        to={ `${this.props.match.url}/${ReportViewPaths.initialSavingsEstimation}` }\n                    />\n                </Switch>\n            </ReportViewPage>\n        );\n    }\n}\n\nexport default ReportView;\n","import { GlobalState } from '../../models/state';\nimport { withRouter } from 'react-router';\nimport ReportView from './ReportView';\nimport { fetchReport } from '../../actions/ReportActions';\nimport { connect } from 'react-redux';\n\nconst mapStateToProps = (state: GlobalState)  => {\n    const {\n        report,\n        reportFetchStatus\n    } = state.reportState;\n    return {\n        report,\n        reportFetchStatus\n    };\n};\n\nconst mapDispatchToProps = {\n    fetchReport\n};\n\nexport default withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(ReportView)\n);\n"],"sourceRoot":""}