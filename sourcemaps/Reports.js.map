{"version":3,"sources":["webpack:///./src/PresentationalComponents/ReportsPage/ReportsPage.tsx","webpack:///./src/pages/Reports/Reports.scss","webpack:///./src/PresentationalComponents/ReportsPage/index.tsx","webpack:///./src/pages/Reports/Reports.scss?c0b9","webpack:///./src/pages/Reports/Reports.tsx","webpack:///./src/pages/Reports/index.tsx"],"names":["ReportsPage","props","_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default","this","_babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_2___default","_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_3___default","call","children","react__WEBPACK_IMPORTED_MODULE_5___default","a","createElement","react__WEBPACK_IMPORTED_MODULE_5__","_redhat_cloud_services_frontend_components__WEBPACK_IMPORTED_MODULE_6__","title","style","mainStyle","Component","module","exports","__webpack_require__","push","i","_ReportsPage__WEBPACK_IMPORTED_MODULE_0__","react_router__WEBPACK_IMPORTED_MODULE_1__","withRouter","content","options","hmr","transform","insertInto","undefined","update","locals","hot","accept","newContent","b","key","idx","Error","dispose","PULL_INTERVAL_TIME","Reports","_this","classCallCheck_default","possibleConstructorReturn_default","getPrototypeOf_default","pullTimer","startTimer","callback","clearInterval","setInterval","stopTimer","handleDeleteReport","report","_this$props","deleteReport","showDeleteDialog","closeDeleteDialog","name","fileName","type","onDelete","id","then","refreshData","onCancel","renderReportStatus","status","react_default","ok_icon","className","Date","creationDate","toUTCString","error_circle_o_icon","in_progress_icon","renderReportActions","Button","variant","ButtonVariant","secondary","onClick","page","arguments","length","state","perPage","filterText","fetchReports","filtersInRowsAndCells","isFirstFetchReportsCall","setState","changePage","debounce","onPageChange","_event","shouldDebounce","onSetPage","event","target","onPageInput","onPerPageSelect","total","reports","Math","floor","handleSearchSubmit","values","trim","renderSearchBox","formik_esm","initialValues","validate","onSubmit","_ref","handleChange","handleBlur","handleSubmit","Form","InputGroup","TextInput","aria-label","onChange","_value","onBlur","value","placeholder","tertiary","search_icon","columns","rows","_this$props2","reportsFetchStatus","history","_this2","items","Object","map","Link","to","concat","Fragment","Card","CardBody","EmptyState","EmptyStateVariant","full","EmptyStateIcon","icon","SearchIcon","Title","headingLevel","size","EmptyStateBody","_this$state","Table","cells","gridBreakPoint","TableGridBreakpoint","gridMd","Header","Body","_this$state2","frontend_components","colSize","rowSize","ToolbarGroup","ToolbarItem","Pagination","itemCount","renderResultsTable","renderNoResults","React","mapDispatchToProps","reportActions","dialogDeleteActions","connect","_state$reportState","reportState"],"mappings":"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","file":"js/Reports-ca1a1afa9f3a9b434370.js","sourcesContent":["import React, { Fragment, Component } from 'react';\n\nimport {\n    Main,\n    PageHeader,\n    PageHeaderTitle\n} from '@redhat-cloud-services/frontend-components';\n\ninterface Props {\n    mainStyle?: any;\n};\n\ninterface State {\n}\n\nclass ReportsPage extends Component<Props, State> {\n\n    constructor(props: Props) {\n        super(props);\n    }\n\n    render() {\n        const { children } = this.props;\n\n        return (\n            <Fragment>\n                <PageHeader>\n                    <PageHeaderTitle title={ 'Reports' } />\n                </PageHeader>\n                <Main style={ this.props.mainStyle }>\n                    { children }\n                </Main>\n            </Fragment>\n        );\n    }\n};\n\nexport default ReportsPage;\n","exports = module.exports = require(\"../../../node_modules/css-loader/dist/runtime/api.js\")(false);\n// Module\nexports.push([module.id, \".pf-c-empty-state > .dropzone {\\n  margin-top: var(--pf-c-empty-state--c-button--MarginTop); }\\n\\n.error {\\n  color: var(--pf-global--danger-color--100) !important; }\\n\\n.success {\\n  color: var(--pf-global--success-color--100) !important; }\\n\", \"\"]);\n\n","import ReportsPage from './ReportsPage';\nimport { withRouter } from 'react-router';\n\nexport default withRouter(ReportsPage);\n","\nvar content = require(\"!!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/sass-loader/lib/loader.js??ref--5-2!./Reports.scss\");\n\nif(typeof content === 'string') content = [[module.id, content, '']];\n\nvar transform;\nvar insertInto;\n\n\n\nvar options = {\"hmr\":true}\n\noptions.transform = transform\noptions.insertInto = undefined;\n\nvar update = require(\"!../../../node_modules/style-loader/lib/addStyles.js\")(content, options);\n\nif(content.locals) module.exports = content.locals;\n\nif(module.hot) {\n\tmodule.hot.accept(\"!!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/sass-loader/lib/loader.js??ref--5-2!./Reports.scss\", function() {\n\t\tvar newContent = require(\"!!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/sass-loader/lib/loader.js??ref--5-2!./Reports.scss\");\n\n\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\n\t\tvar locals = (function(a, b) {\n\t\t\tvar key, idx = 0;\n\n\t\t\tfor(key in a) {\n\t\t\t\tif(!b || a[key] !== b[key]) return false;\n\t\t\t\tidx++;\n\t\t\t}\n\n\t\t\tfor(key in b) idx--;\n\n\t\t\treturn idx === 0;\n\t\t}(content.locals, newContent.locals));\n\n\t\tif(!locals) throw new Error('Aborting CSS HMR due to changed css-modules locals.');\n\n\t\tupdate(newContent);\n\t});\n\n\tmodule.hot.dispose(function() { update(); });\n}","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport {\n    TableToolbar,\n    SkeletonTable\n} from '@redhat-cloud-services/frontend-components';\nimport {\n    Button,\n    ToolbarGroup,\n    ToolbarItem,\n    ButtonVariant,\n    Pagination,\n    InputGroup,\n    TextInput,\n    Form,\n    EmptyState,\n    EmptyStateVariant,\n    EmptyStateIcon,\n    Title,\n    EmptyStateBody,\n    Card,\n    CardBody\n} from '@patternfly/react-core';\nimport {\n    Table,\n    TableHeader,\n    TableBody,\n    TableGridBreakpoint,\n    IRow,\n    ICell\n} from '@patternfly/react-table';\n\nimport './Reports.scss';\nimport { Report } from '../../models';\nimport { RouterGlobalProps } from '../../models/router';\nimport ReportsPage from '../../PresentationalComponents/ReportsPage';\nimport * as deleteActions from '../../actions/DialogDeleteActions';\nimport {\n    SearchIcon,\n    OkIcon,\n    ErrorCircleOIcon,\n    InProgressIcon\n} from '@patternfly/react-icons';\nimport debounce from 'lodash/debounce';\nimport { Formik } from 'formik';\nimport { ObjectFetchStatus } from '../../models/state';\n\ninterface StateToProps {\n    reports: {\n        total: number;\n        items: Report[];\n    };\n    reportsFetchStatus: ObjectFetchStatus;\n}\n\ninterface DispatchToProps {\n    fetchReports: (page: number, perPage: number, filterText: string) => any;\n    deleteReport: (id: number, name: string) => any;\n    showDeleteDialog: typeof deleteActions.openModal;\n    closeDeleteDialog: typeof deleteActions.closeModal;\n}\n\nexport interface Props extends StateToProps, DispatchToProps, RouterGlobalProps {\n};\n\nexport interface State {\n    filterText: string;\n    page: number;\n    perPage: number;\n    columns: Array<ICell | String>;\n    rows: Array<IRow | Array<String>>;\n    isFirstFetchReportsCall: boolean;\n};\n\nconst PULL_INTERVAL_TIME = 5000;\n\nclass Reports extends React.Component<Props, State> {\n\n    pullTimer: any;\n\n    constructor(props: Props) {\n        super(props);\n        this.state = {\n            filterText: '',\n            page: 1,\n            perPage: 10,\n            columns: [\n                'Name',\n                'Status',\n                {\n                    title: '',\n                    props: {\n                        className: 'pf-u-text-align-center'\n                    }\n                }\n            ],\n            rows: [],\n            isFirstFetchReportsCall: true\n        };\n    }\n\n    // React lyfe cycle methods\n\n    componentDidMount() {\n        this.refreshData();\n        this.startTimer(this.refreshData);\n    }\n\n    componentDidUpdate() {\n        // If it is the first time fetching reports and there are no reports\n        // then redirect to /no-reports page.\n        const { reportsFetchStatus, reports } = this.props;\n        const { isFirstFetchReportsCall } = this.state;\n        if (reports.total === 0 && isFirstFetchReportsCall && reportsFetchStatus.status === 'complete') {\n            this.props.history.push('/no-reports');\n        }\n    }\n\n    componentWillUnmount() {\n        this.stopTimer();\n    }\n\n    // Pull timer config\n\n    startTimer = (callback: (...args: any[]) => void) => {\n        if (this.pullTimer) {\n            clearInterval(this.pullTimer);\n        }\n\n        this.pullTimer = setInterval(callback, PULL_INTERVAL_TIME);\n    };\n\n    stopTimer = () => {\n        clearInterval(this.pullTimer);\n    };\n\n    //\n\n    handleDeleteReport = (report: Report) => {\n        const { deleteReport, showDeleteDialog, closeDeleteDialog } = this.props;\n\n        showDeleteDialog({\n            name: report.fileName,\n            type: 'report',\n            onDelete: () => {\n                deleteReport(report.id, report.fileName).then(() => {\n                    closeDeleteDialog();\n                    this.refreshData();\n                });\n            },\n            onCancel: () => {\n                closeDeleteDialog();\n            }\n        });\n    };\n\n    renderReportStatus = (report: Report) => {\n        switch (report.status) {\n            case 'CREATED':\n                return <p><OkIcon className=\"success\" /> Report created - { new Date(report.creationDate).toUTCString() }</p>;\n            case 'FAILED':\n                return <p><ErrorCircleOIcon className=\"error\" /> Report failed - { new Date(report.creationDate).toUTCString() }</p>;\n            case 'IN_PROGRESS':\n                return <p><InProgressIcon className=\"progress\" /> Analyzing the upload file</p>;\n            default:\n                return null;\n        }\n    };\n\n    renderReportActions = (report: Report) => {\n        switch (report.status) {\n            case 'CREATED':\n                return <Button variant={ ButtonVariant.secondary } onClick={ () => this.handleDeleteReport(report) }>Delete</Button>;\n            case 'FAILED':\n                return <Button variant={ ButtonVariant.secondary } onClick={ () => this.handleDeleteReport(report) }>Delete</Button>;;\n            case 'IN_PROGRESS':\n                return '';\n            default:\n                return null;\n        }\n    };\n\n    filtersInRowsAndCells(): void {\n        const reports: Report[] = this.props.reports.items ? Object.values(this.props.reports.items) : [];\n\n        let rows: any[][] = [];\n        if (reports.length > 0) {\n            rows = reports.map((report) => (\n                [\n                    {\n                        title: <Link to={ `/reports/${report.id}` }>{ report.fileName }</Link>\n                    },\n                    {\n                        title: this.renderReportStatus(report)\n                    },\n                    {\n                        title: this.renderReportActions(report)\n                    }\n                ]\n            ));\n        }\n\n        this.setState({ rows });\n    }\n\n    refreshData = (page: number = this.state.page, perPage: number = this.state.perPage, filterText: string = this.state.filterText) => {\n        this.props.fetchReports(page, perPage, filterText).then(() => {\n            this.filtersInRowsAndCells();\n\n            // Change to false to indicate that\n            const { isFirstFetchReportsCall } = this.state;\n            if (isFirstFetchReportsCall) {\n                this.setState({ isFirstFetchReportsCall: false });\n            }\n        });\n    }\n\n    changePage = debounce(() => {\n        this.refreshData();\n    }, 800);\n\n    onPageChange = (_event: any, page: number, shouldDebounce: boolean) => {\n        this.setState({ page });\n        if (shouldDebounce) {\n            this.changePage();\n        } else {\n            this.refreshData(page);\n        }\n    };\n\n    onSetPage = (event: any, page: number) => {\n        return event.target.className === 'pf-c-form-control' || this.onPageChange(event, page, false);\n    };\n\n    onPageInput = (event: any, page: number) => {\n        return this.onPageChange(event, page, true);\n    };\n\n    onPerPageSelect = (_event: any, perPage: number) => {\n        let page = this.state.page;\n        const total = this.props.reports.total;\n\n        // If current page and perPage would request data beyond total, show last available page\n        if (page * perPage > total) {\n            page = Math.floor(total / perPage) + 1;\n        }\n\n        this.setState({ page, perPage });\n        this.refreshData(page, perPage);\n    };\n\n    renderNoResults() {\n        return (\n            <React.Fragment>\n                <Card>\n                    <CardBody>\n                        <EmptyState variant={ EmptyStateVariant.full }>\n                            <EmptyStateIcon icon={ SearchIcon } />\n                            <Title headingLevel=\"h5\" size=\"lg\">No results found</Title>\n                            <EmptyStateBody>\n                                No results match the search criteria\n                            </EmptyStateBody>\n                        </EmptyState>\n                    </CardBody>\n                </Card>\n            </React.Fragment>\n        );\n    }\n\n    renderResultsTable() {\n        const { rows, columns } = this.state;\n\n        return (\n            <Table aria-label='Reports list'\n                rows={ rows }\n                cells={ columns }\n                gridBreakPoint={ TableGridBreakpoint.gridMd } >\n                <TableHeader />\n                <TableBody />\n            </Table>\n        );\n    }\n\n    handleSearchSubmit = (values: any) => {\n        const filterText: string = values.filterText;\n        this.setState({\n            filterText: filterText.trim()\n        });\n        this.refreshData();\n    };\n\n    renderSearchBox = () => {\n        return (\n            <Formik\n                initialValues={ { filterText: '' } }\n                validate={ () => {\n                    let errors = {};\n                    return errors;\n                } }\n                onSubmit={ this.handleSearchSubmit }\n            >\n                {\n                    ({\n                        values,\n                        handleChange,\n                        handleBlur,\n                        handleSubmit\n                    }) =>\n                        <Form onSubmit={ handleSubmit }>\n                            <InputGroup>\n                                <TextInput\n                                    type=\"search\"\n                                    id=\"filterText\"\n                                    name=\"filterText\"\n                                    aria-label=\"search text input\"\n                                    onChange={ (_value, event) => handleChange(event) }\n                                    onBlur={ handleBlur }\n                                    value={ values.filterText }\n                                    placeholder=\"Filter by name...\"/>\n                                <Button type=\"submit\" variant={ ButtonVariant.tertiary } aria-label=\"search button for search input\">\n                                    <SearchIcon />\n                                </Button>\n                            </InputGroup>\n                        </Form>\n                }\n            </Formik>\n        );\n    };\n\n    render() {\n        const { isFirstFetchReportsCall, page, perPage } = this.state;\n        const { total } = this.props.reports;\n\n        if (isFirstFetchReportsCall) {\n            return (\n                <ReportsPage>\n                    <SkeletonTable colSize={ 3 } rowSize={ 10 }/>\n                </ReportsPage>\n            );\n        }\n\n        return (\n            <ReportsPage>\n                <TableToolbar className=\"pf-u-justify-content-space-between\">\n                    <ToolbarGroup>\n                        <ToolbarItem className=\"pf-u-mr-xl\">{ this.renderSearchBox() }</ToolbarItem>\n                        <ToolbarItem className=\"pf-u-mr-md\">\n                            <Link to={ '/reports/upload' } className=\"pf-c-button pf-m-primary\">Create</Link>\n                        </ToolbarItem>\n                    </ToolbarGroup>\n                    <ToolbarGroup>\n                        <ToolbarItem>\n                            <Pagination\n                                itemCount={ total }\n                                perPage={ perPage }\n                                page={ page }\n                                onSetPage={ this.onSetPage }\n                                onPageInput={ this.onPageInput }\n                                onPerPageSelect={ this.onPerPageSelect }\n                            />\n                        </ToolbarItem>\n                    </ToolbarGroup>\n                </TableToolbar>\n                { (total > 0 ? this.renderResultsTable() : this.renderNoResults()) }\n            </ReportsPage>\n        );\n    }\n}\n\nexport default Reports;\n","import { connect } from 'react-redux';\nimport Reports from './Reports';\nimport { withRouter } from 'react-router';\nimport { GlobalState } from '../../models/state';\nimport  * as reportActions from '../../actions/ReportActions';\nimport  * as dialogDeleteActions from '../../actions/DialogDeleteActions';\n\nconst mapStateToProps = (state: GlobalState)  => {\n    const {\n        reportState: {\n            reports,\n            reportsFetchStatus\n        }\n    } = state;\n    return {\n        reports,\n        reportsFetchStatus\n    };\n};\n\nconst mapDispatchToProps = {\n    fetchReports: reportActions.fetchReports,\n    deleteReport: reportActions.deleteReport,\n    showDeleteDialog: dialogDeleteActions.openModal,\n    closeDeleteDialog: dialogDeleteActions.closeModal\n};\n\nexport default withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(Reports)\n);\n"],"sourceRoot":""}