{"version":3,"sources":["webpack:///./src/pages/Reports/Reports.tsx","webpack:///./src/pages/Reports/index.tsx","webpack:///./src/Utilities/formatValue.js","webpack:///./node_modules/lodash/debounce.js","webpack:///./node_modules/lodash/toNumber.js","webpack:///./src/PresentationalComponents/ReportsPage/ReportsPage.tsx","webpack:///./node_modules/lodash/now.js","webpack:///./src/pages/Reports/Reports.scss","webpack:///./src/PresentationalComponents/ReportsPage/index.tsx","webpack:///./src/pages/Reports/Reports.scss?3074"],"names":["PULL_INTERVAL_TIME","props","refreshDataWithDedounce","refreshData","setStateAndResetTimerAndSetRenderStatus","state","resetRefreshDataTimer","setState","renderInProgresFetchStatus","stopTimer","startTimer","callback","pullTimer","clearInterval","setInterval","page","perPage","filterText","fetchReports","then","filtersInRowsAndCells","isFirstFetchReportsCall","reports","items","Object","values","rows","length","map","report","cells","title","renderReportName","renderReportStatus","renderReportActions","handleReportKebabToggle","isOpen","toggleReportsIDS","newValue","Set","add","id","delete","handleDownloadReportPayload","fetchReportPayloadDownloadLink","addNotification","response","value","data","Error","downloadLink","link","document","createElement","href","setAttribute","filename","body","appendChild","click","remove","variant","description","dismissable","handleDeleteReport","deleteReport","showDeleteDialog","closeDeleteDialog","name","reportName","type","onDelete","onCancel","onPageChange","event","shouldDebounce","onSetPage","target","className","onPageInput","onPerPageSelect","_event","total","Math","floor","handleSearchSubmit","trim","status","Link","to","Date","lastUpdate","has","dropdownItems","DropdownItem","key","component","onClick","style","color","dropdown","Dropdown","position","toggle","KebabToggle","onToggle","newIsOpen","isPlain","renderNoResults","Fragment","Card","CardBody","EmptyState","full","EmptyStateIcon","icon","Title","headingLevel","size","EmptyStateBody","renderResultsTable","columns","Table","gridBreakPoint","gridMd","colSpan","renderPagination","Pagination","itemCount","renderResultsTableSkeleton","colSize","rowSize","renderSearchBox","initialValues","validate","onSubmit","handleChange","handleBlur","handleSubmit","Form","InputGroup","TextInput","onChange","_value","onBlur","placeholder","Button","tertiary","componentDidMount","this","componentDidUpdate","reportsFetchStatus","history","push","componentWillUnmount","render","toolbar","table","ToolbarGroup","ToolbarItem","ReportsPage","Component","mapDispatchToProps","withRouter","reportState","unitLookupKey","unit","toLowerCase","formatCurrency","fractionDigits","fValue","toLocaleString","currency","minimumFractionDigits","maximumFractionDigits","unknownTypeFormatter","_unit","toFixed","formatUsageGb","formatUsageHrs","formatValue","options","lookup","formatDate","includeTime","timeZone","Intl","DateTimeFormat","resolvedOptions","dateOptions","timeZoneName","year","month","day","timeOptions","hour","minute","assign","toLocaleDateString","formatNumber","formatPercentage","formatBytes","bytes","decimals","k","dm","sizes","i","log","s","parseFloat","pow","isObject","now","toNumber","FUNC_ERROR_TEXT","nativeMax","max","nativeMin","min","module","exports","func","wait","lastArgs","lastThis","maxWait","result","timerId","lastCallTime","lastInvokeTime","leading","maxing","trailing","TypeError","invokeFunc","time","args","thisArg","undefined","apply","shouldInvoke","timeSinceLastCall","timerExpired","trailingEdge","setTimeout","timeWaiting","remainingWait","debounced","isInvoking","arguments","leadingEdge","clearTimeout","cancel","flush","children","mainStyle","root","content","transform","update","locals","hot","accept","newContent","a","b","idx","dispose"],"mappings":"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","file":"js/Reports.js","sourcesContent":["import React from 'react';\nimport { Link } from 'react-router-dom';\nimport {\n    TableToolbar,\n    SkeletonTable,\n    Skeleton\n} from '@redhat-cloud-services/frontend-components';\nimport {\n    Button,\n    ToolbarGroup,\n    ToolbarItem,\n    ButtonVariant,\n    Pagination,\n    InputGroup,\n    TextInput,\n    Form,\n    EmptyState,\n    EmptyStateVariant,\n    EmptyStateIcon,\n    Title,\n    EmptyStateBody,\n    Card,\n    CardBody,\n    Dropdown,\n    KebabToggle,\n    DropdownItem\n} from '@patternfly/react-core';\nimport {\n    Table,\n    TableHeader,\n    TableBody,\n    TableGridBreakpoint,\n    IRow,\n    ICell\n} from '@patternfly/react-table';\n\nimport './Reports.scss';\nimport { Report } from '../../models';\nimport { RouterGlobalProps } from '../../models/router';\nimport ReportsPage from '../../PresentationalComponents/ReportsPage';\nimport * as deleteActions from '../../actions/DialogDeleteActions';\nimport {\n    SearchIcon,\n    OkIcon,\n    ErrorCircleOIcon,\n    InProgressIcon\n} from '@patternfly/react-icons';\nimport debounce from 'lodash/debounce';\nimport { Formik } from 'formik';\nimport { ObjectFetchStatus } from '../../models/state';\nimport { formatDate } from '../../Utilities/formatValue';\n\ninterface StateToProps {\n    reports: {\n        total: number;\n        items: Report[];\n    };\n    reportsFetchStatus: ObjectFetchStatus;\n}\n\ninterface DispatchToProps {\n    fetchReports: (page: number, perPage: number, filterText: string) => any;\n    deleteReport: (id: number, name: string) => any;\n    showDeleteDialog: typeof deleteActions.openModal;\n    closeDeleteDialog: typeof deleteActions.closeModal;\n    fetchReportPayloadDownloadLink: (reportId: number) => any;\n    addNotification(notification: any);\n}\n\nexport interface Props extends StateToProps, DispatchToProps, RouterGlobalProps {\n};\n\nexport interface State {\n    filterText: string;\n    page: number;\n    perPage: number;\n    columns: Array<ICell | string>;\n    rows: Array<IRow | string[]>;\n    isFirstFetchReportsCall: boolean;\n    renderInProgresFetchStatus: boolean;\n    toggleReportsIDS: Set<number>;\n};\n\nconst PULL_INTERVAL_TIME = 5000;\n\nclass Reports extends React.Component<Props, State> {\n\n    public pullTimer: any;\n\n    public refreshDataWithDedounce = debounce(() => {\n        this.refreshData();\n    }, 800);\n\n    constructor(props: Props) {\n        super(props);\n        this.state = {\n            filterText: '',\n            page: 1,\n            perPage: 10,\n            columns: [\n                'Name',\n                'Status',\n                {\n                    title: '',\n                    props: {\n                        className: 'pf-u-text-align-center'\n                    }\n                }\n            ],\n            rows: [],\n            isFirstFetchReportsCall: true,\n            renderInProgresFetchStatus: false,\n            toggleReportsIDS: new Set()\n        };\n    }\n\n    // React lyfe cycle methods\n\n    public componentDidMount() {\n        this.refreshData();\n        this.resetRefreshDataTimer();\n    }\n\n    public componentDidUpdate() {\n        // If it is the first time fetching reports and there are no reports\n        // then redirect to /no-reports page.\n        const { reportsFetchStatus, reports } = this.props;\n        const { isFirstFetchReportsCall } = this.state;\n        if (reports.total === 0 && isFirstFetchReportsCall && reportsFetchStatus.status === 'complete') {\n            this.props.history.push('/no-reports');\n        }\n    }\n\n    public componentWillUnmount() {\n        this.stopTimer();\n    }\n\n    //\n\n    public setStateAndResetTimerAndSetRenderStatus = (state: any = {}) => {\n        this.resetRefreshDataTimer();\n        this.setState({\n            ...state,\n            renderInProgresFetchStatus: true\n        });\n    };\n\n    // Pull timer config\n\n    public resetRefreshDataTimer = () => {\n        this.stopTimer();\n        this.startTimer(this.refreshData);\n    };\n\n    public startTimer = (callback: (...args: any[]) => void) => {\n        if (this.pullTimer) {\n            clearInterval(this.pullTimer);\n        }\n\n        this.pullTimer = setInterval(callback, PULL_INTERVAL_TIME);\n    };\n\n    public stopTimer = () => {\n        clearInterval(this.pullTimer);\n    };\n\n    // Table data management section\n\n    public refreshData = (page: number = this.state.page, perPage: number = this.state.perPage, filterText: string = this.state.filterText) => {\n        \n        this.props.fetchReports(page, perPage, filterText).then(() => {\n            this.filtersInRowsAndCells();\n\n            // Change renderInProgresFetchStatus to false\n            const { renderInProgresFetchStatus } = this.state;\n            if (renderInProgresFetchStatus) {\n                this.setState({\n                    renderInProgresFetchStatus: false\n                });\n            }\n\n            // Change isFirstFetchReportsCall to false\n            const { isFirstFetchReportsCall } = this.state;\n            if (isFirstFetchReportsCall) {\n                this.setState({ isFirstFetchReportsCall: false });\n            }\n        });\n    };\n\n    public filtersInRowsAndCells = () => {\n        const reports: Report[] = this.props.reports.items ? Object.values(this.props.reports.items) : [];\n\n        let rows: Array<IRow | string[]> = [];\n        if (reports.length > 0) {\n            rows = reports.map((report) => ({\n                cells: [\n                    {\n                        title: this.renderReportName(report)\n                    },\n                    {\n                        title: this.renderReportStatus(report)\n                    },\n                    {\n                        title: this.renderReportActions(report)\n                    }\n                ]\n            }));\n        }\n\n        this.setState({ rows });\n    };\n\n    // Actions\n\n    public handleReportKebabToggle = (report: Report, isOpen: boolean) => {\n        const { toggleReportsIDS } = this.state;\n\n        const newValue = new Set(toggleReportsIDS);\n        if (isOpen) {\n            newValue.add(report.id);\n        }  else {\n            newValue.delete(report.id);\n        }\n        this.setState({\n            toggleReportsIDS: newValue\n        }, () => {\n            this.filtersInRowsAndCells();\n        });\n    };\n\n    public handleDownloadReportPayload = (report: Report) => {\n        const {fetchReportPayloadDownloadLink, addNotification} = this.props;\n\n        // close kebab\n        this.handleReportKebabToggle(report, false);\n        \n\n        fetchReportPayloadDownloadLink(report.id).then((response: any) => {\n            if (response && response.value && response.value.data) {\n                const data = response.value.data;\n                if (data.downloadLink) {\n                    const link = document.createElement('a');\n                    link.href = data.downloadLink;\n                    link.setAttribute('download', data.filename);\n                    document.body.appendChild(link);\n                    link.click();\n                    link.remove();\n                } else {\n                    addNotification({\n                        variant: 'danger',\n                        title: 'Could not download payload file',\n                        description: 'The retention period for the payload file has expired',\n                        dismissable: true\n                    });\n                }\n            } else {\n                throw new Error(\"No valid response found\");\n            }\n        });\n    };\n\n    public handleDeleteReport = (report: Report) => {\n        const { deleteReport, showDeleteDialog, closeDeleteDialog } = this.props;\n\n        showDeleteDialog({\n            name: report.reportName,\n            type: 'report',\n            onDelete: () => {\n                deleteReport(report.id, report.reportName).then(() => {\n                    closeDeleteDialog();\n\n                    this.setStateAndResetTimerAndSetRenderStatus();\n                    this.refreshData();\n                });\n            },\n            onCancel: () => {\n                closeDeleteDialog();\n            }\n        });\n    };\n\n    public onPageChange = (event: any, page: number, shouldDebounce: boolean) => {\n        this.setState({ page });\n\n        this.setStateAndResetTimerAndSetRenderStatus();\n        if (shouldDebounce) {\n            this.refreshDataWithDedounce();\n        } else {\n            this.refreshData(page);\n        }\n    };\n\n    public onSetPage = (event: any, page: number) => {\n        return event.target.className === 'pf-c-form-control' || this.onPageChange(event, page, false);\n    };\n\n    public onPageInput = (event: any, page: number) => {\n        return this.onPageChange(event, page, true);\n    };\n\n    public onPerPageSelect = (_event: any, perPage: number) => {\n        let page = this.state.page;\n        const total = this.props.reports.total;\n\n        // If current page and perPage would request data beyond total, show last available page\n        if (page * perPage > total) {\n            page = Math.floor(total / perPage) + 1;\n        }\n\n        this.setStateAndResetTimerAndSetRenderStatus({page, perPage});\n        this.refreshData(page, perPage);\n    };\n\n    public handleSearchSubmit = (values: any) => {\n        const page = 1;\n        const filterText: string = values.filterText.trim();\n        const {perPage} = this.state;\n\n        this.setStateAndResetTimerAndSetRenderStatus({\n            filterText,\n            page\n        });\n        this.refreshData(page, perPage, filterText);\n    };\n\n    // Render section\n\n    public renderReportName = (report: Report) => {\n        switch (report.status) {\n            case 'CREATED':\n                return <Link to={ `/reports/${report.id}` }>{ report.reportName }</Link>;\n            default:\n                return <span>{ report.reportName }</span>;\n        }\n    };\n\n    public renderReportStatus = (report: Report) => {\n        switch (report.status) {\n            case 'CREATED':\n                return <p><OkIcon className=\"success\" /> Report created - { formatDate(new Date(report.lastUpdate)) }</p>;\n            case 'FAILED':\n                return <p><ErrorCircleOIcon className=\"error\" /> Report failed - { formatDate(new Date(report.lastUpdate)) }</p>;\n            case 'IN_PROGRESS':\n                return <p><InProgressIcon className=\"progress\" /> Analyzing the upload file</p>;\n            default:\n                return null;\n        }\n    };\n\n    public renderReportActions = (report: Report) => {\n        const { toggleReportsIDS } = this.state;\n        const isOpen = toggleReportsIDS.has(report.id);\n\n        const onDelete = (_event: any): void => {\n            this.handleDeleteReport(report);\n        };\n\n        const onDownload = (_event: any): void => {\n            this.handleDownloadReportPayload(report);\n        };\n\n        const onKebabToggle = (newIsOpen: boolean) => {\n            this.handleReportKebabToggle(report, newIsOpen);\n        };\n\n        const dropdownItems = [\n            <DropdownItem key=\"download\" component=\"button\" onClick={onDownload}>Download</DropdownItem>,\n            <DropdownItem key=\"delete\" component=\"button\" onClick={onDelete} style={{color: 'var(--pf-global--danger-color--100)'}}>Delete</DropdownItem>,\n        ];\n\n        const dropdown = (\n            <Dropdown\n                position={'right'}\n                toggle={<KebabToggle onToggle={onKebabToggle} />}\n                isOpen={isOpen}\n                isPlain={true}\n                dropdownItems={dropdownItems}\n            />\n        );\n\n        switch (report.status) {\n            case 'CREATED':\n                return dropdown;\n            case 'FAILED':\n                return dropdown;\n            case 'IN_PROGRESS':\n                return '';\n            default:\n                return null;\n        }\n    };\n\n    public renderNoResults = () => {\n        return (\n            <React.Fragment>\n                <Card>\n                    <CardBody>\n                        <EmptyState variant={ EmptyStateVariant.full }>\n                            <EmptyStateIcon icon={ SearchIcon } />\n                            <Title headingLevel=\"h5\" size=\"lg\">No results found</Title>\n                            <EmptyStateBody>\n                                No results match the search criteria\n                            </EmptyStateBody>\n                        </EmptyState>\n                    </CardBody>\n                </Card>\n            </React.Fragment>\n        );\n    };\n\n    public renderResultsTable = () => {\n        const { rows, columns } = this.state;\n\n        return (\n            <Table aria-label='Reports list'\n                rows={ rows }\n                cells={ columns }\n                gridBreakPoint={ TableGridBreakpoint.gridMd } >\n                <TableHeader />\n                <TableBody />\n                <tfoot>\n                    <tr>\n                        <td colSpan={ 10 }>\n                            { this.renderPagination() }\n                        </td>\n                    </tr>\n                </tfoot>\n            </Table>\n        );\n    };\n\n    public renderPagination = () => {\n        const { reports } = this.props;\n        const { page, perPage } = this.state;\n\n        return (\n            <Pagination\n                itemCount={ reports.total }\n                perPage={ perPage }\n                page={ page }\n                onSetPage={ this.onSetPage }\n                onPageInput={ this.onPageInput }\n                onPerPageSelect={ this.onPerPageSelect }\n            />\n        );\n    };\n\n    public renderResultsTableSkeleton = () => {\n        return (\n            <SkeletonTable colSize={ 3 } rowSize={ 10 }/>\n        );\n    };\n\n    public renderSearchBox = () => {\n        // Always return empty because every value is valid\n        const searchBoxValidation = () => {\n            return {};\n        };\n\n        return (\n            <Formik\n                initialValues={ { filterText: '' } }\n                validate={ searchBoxValidation }\n                onSubmit={ this.handleSearchSubmit }\n            >\n                {\n                    ({\n                        values,\n                        handleChange,\n                        handleBlur,\n                        handleSubmit\n                    }) =>\n                        {\n                            const customHandleChange = (_value: any, event: any) => {\n                                handleChange(event);\n                            };\n\n                            return (\n                                <Form onSubmit={ handleSubmit }>\n                                    <InputGroup>\n                                        <TextInput\n                                            type=\"search\"\n                                            id=\"filterText\"\n                                            name=\"filterText\"\n                                            aria-label=\"search text input\"\n                                            onChange={ customHandleChange }\n                                            onBlur={ handleBlur }\n                                            value={ values.filterText }\n                                            placeholder=\"Filter by name...\"/>\n                                        <Button type=\"submit\" variant={ ButtonVariant.tertiary } aria-label=\"search button for search input\">\n                                            <SearchIcon />\n                                        </Button>\n                                    </InputGroup>\n                                </Form>\n                            );\n                        }\n                }\n            </Formik>\n        );\n    };\n\n    public render() {\n        const { isFirstFetchReportsCall, renderInProgresFetchStatus } = this.state;\n        const { reports, reportsFetchStatus } = this.props;\n\n        let toolbar: React.ReactNode;\n        if (isFirstFetchReportsCall) {\n            toolbar = '';\n        } else {\n            toolbar = (\n                <TableToolbar className=\"pf-u-justify-content-space-between\">\n                    <ToolbarGroup>\n                        <ToolbarItem className=\"pf-u-mr-xl\">{ this.renderSearchBox() }</ToolbarItem>\n                        <ToolbarItem className=\"pf-u-mr-md\">\n                            <Link to={ '/reports/upload' } className=\"pf-c-button pf-m-primary\">Create</Link>\n                        </ToolbarItem>\n                    </ToolbarGroup>\n                    <ToolbarGroup>\n                        <ToolbarItem>\n                            { this.renderPagination() }\n                        </ToolbarItem>\n                    </ToolbarGroup>\n                </TableToolbar>\n            );\n        }\n\n        let table: React.ReactNode;\n        if (isFirstFetchReportsCall || (reportsFetchStatus.status === 'inProgress' && renderInProgresFetchStatus)) {\n            table = this.renderResultsTableSkeleton();\n        } else {\n            table = reports.total > 0 ? this.renderResultsTable() : this.renderNoResults();\n        }\n\n        return (\n            <ReportsPage>\n                { toolbar }\n                { table }\n            </ReportsPage>\n        );\n    }\n}\n\nexport default Reports;\n","import { connect } from 'react-redux';\nimport Reports from './Reports';\nimport { withRouter } from 'react-router';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications';\nimport { GlobalState } from '../../models/state';\nimport  * as reportActions from '../../actions/ReportActions';\nimport  * as dialogDeleteActions from '../../actions/DialogDeleteActions';\n\nconst mapStateToProps = (state: GlobalState)  => {\n    const {\n        reportState: {\n            reports,\n            reportsFetchStatus\n        }\n    } = state;\n    return {\n        reports,\n        reportsFetchStatus\n    };\n};\n\nconst mapDispatchToProps = {\n    addNotification,\n    fetchReports: reportActions.fetchReports,\n    deleteReport: reportActions.deleteReport,\n    showDeleteDialog: dialogDeleteActions.openModal,\n    closeDeleteDialog: dialogDeleteActions.closeModal,\n    fetchReportPayloadDownloadLink: reportActions.fetchReportPayloadDownloadLink\n};\n\nexport default withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(Reports)\n);\n","export const unitLookupKey = unit => {\n    const lookup = unit ? unit.toLowerCase() : '';\n    return lookup;\n};\n\nexport const formatCurrency = (value, unit, { fractionDigits = 2 } = {}) => {\n    let fValue = value;\n    if (!value) {\n        fValue = 0;\n    }\n\n    return fValue.toLocaleString('en', {\n        style: 'currency',\n        currency: unit || 'USD',\n        minimumFractionDigits: fractionDigits,\n        maximumFractionDigits: fractionDigits\n    });\n};\n\nconst unknownTypeFormatter = (value, _unit, { fractionDigits } = {}) => {\n    return value.toFixed(fractionDigits);\n};\n\nexport const formatUsageGb = (value, _unit, { fractionDigits = 2 } = {}) => {\n    return value.toFixed(fractionDigits);\n};\n\nexport const formatUsageHrs = (value, _unit, { fractionDigits } = {}) => {\n    return value.toFixed(fractionDigits);\n};\n\nexport const formatValue = (value, unit, options = {}) => {\n    const lookup = unitLookupKey(unit);\n    const fValue = value || 0;\n\n    switch (lookup) {\n        case 'usd':\n            return formatCurrency(fValue, lookup, options);\n        case 'gb':\n        case 'gb-hours':\n        case 'gb-mo':\n            return formatUsageGb(fValue, lookup, options);\n        case 'core-hours':\n        case 'hrs':\n            return formatUsageHrs(fValue, lookup, options);\n        default:\n            return unknownTypeFormatter(fValue, lookup, options);\n    }\n};\n\nexport const formatDate = (value, includeTime = true) => {\n    /*eslint new-cap: 0*/\n    const timeZone = Intl.DateTimeFormat().resolvedOptions().timeZone;\n    const dateOptions = { timeZone, timeZoneName: 'short', year: 'numeric', month: 'long', day: 'numeric' };\n    const timeOptions = { timeZone, timeZoneName: 'short', hour: '2-digit', minute: '2-digit' };\n\n    let options = dateOptions;\n    if (includeTime) {\n        options = Object.assign({}, dateOptions, timeOptions);\n    }\n\n    return value.toLocaleDateString('en', options);\n};\n\nexport const formatNumber = (value, fractionDigits = 2) => {\n    return value.toLocaleString('en', {\n        style: 'decimal',\n        minimumFractionDigits: fractionDigits,\n        maximumFractionDigits: fractionDigits\n    });\n};\n\nexport const formatPercentage = (value, fractionDigits = 2) => {\n    return value.toLocaleString('en', {\n        style: 'percent',\n        minimumFractionDigits: fractionDigits,\n        maximumFractionDigits: fractionDigits\n    });\n};\n\nexport const formatBytes = (bytes, decimals = 2) => {\n    if (bytes === 0) {\n        return '0 Bytes';\n    }\n\n    const k = 1024;\n    const dm = decimals < 0 ? 0 : decimals;\n    const sizes = [ 'Bytes', 'KB', 'MB', 'GiB', 'TB', 'PB', 'EB', 'ZB', 'YB' ];\n\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n\n    const s = parseFloat((bytes / Math.pow(k, i)).toFixed(dm));\n    return formatNumber(s, decimals) + ' ' + sizes[i];\n};\n","var isObject = require('./isObject'),\n    now = require('./now'),\n    toNumber = require('./toNumber');\n\n/** Error message constants. */\nvar FUNC_ERROR_TEXT = 'Expected a function';\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMax = Math.max,\n    nativeMin = Math.min;\n\n/**\n * Creates a debounced function that delays invoking `func` until after `wait`\n * milliseconds have elapsed since the last time the debounced function was\n * invoked. The debounced function comes with a `cancel` method to cancel\n * delayed `func` invocations and a `flush` method to immediately invoke them.\n * Provide `options` to indicate whether `func` should be invoked on the\n * leading and/or trailing edge of the `wait` timeout. The `func` is invoked\n * with the last arguments provided to the debounced function. Subsequent\n * calls to the debounced function return the result of the last `func`\n * invocation.\n *\n * **Note:** If `leading` and `trailing` options are `true`, `func` is\n * invoked on the trailing edge of the timeout only if the debounced function\n * is invoked more than once during the `wait` timeout.\n *\n * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\n * until to the next tick, similar to `setTimeout` with a timeout of `0`.\n *\n * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\n * for details over the differences between `_.debounce` and `_.throttle`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Function\n * @param {Function} func The function to debounce.\n * @param {number} [wait=0] The number of milliseconds to delay.\n * @param {Object} [options={}] The options object.\n * @param {boolean} [options.leading=false]\n *  Specify invoking on the leading edge of the timeout.\n * @param {number} [options.maxWait]\n *  The maximum time `func` is allowed to be delayed before it's invoked.\n * @param {boolean} [options.trailing=true]\n *  Specify invoking on the trailing edge of the timeout.\n * @returns {Function} Returns the new debounced function.\n * @example\n *\n * // Avoid costly calculations while the window size is in flux.\n * jQuery(window).on('resize', _.debounce(calculateLayout, 150));\n *\n * // Invoke `sendMail` when clicked, debouncing subsequent calls.\n * jQuery(element).on('click', _.debounce(sendMail, 300, {\n *   'leading': true,\n *   'trailing': false\n * }));\n *\n * // Ensure `batchLog` is invoked once after 1 second of debounced calls.\n * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });\n * var source = new EventSource('/stream');\n * jQuery(source).on('message', debounced);\n *\n * // Cancel the trailing debounced invocation.\n * jQuery(window).on('popstate', debounced.cancel);\n */\nfunction debounce(func, wait, options) {\n  var lastArgs,\n      lastThis,\n      maxWait,\n      result,\n      timerId,\n      lastCallTime,\n      lastInvokeTime = 0,\n      leading = false,\n      maxing = false,\n      trailing = true;\n\n  if (typeof func != 'function') {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n  wait = toNumber(wait) || 0;\n  if (isObject(options)) {\n    leading = !!options.leading;\n    maxing = 'maxWait' in options;\n    maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;\n    trailing = 'trailing' in options ? !!options.trailing : trailing;\n  }\n\n  function invokeFunc(time) {\n    var args = lastArgs,\n        thisArg = lastThis;\n\n    lastArgs = lastThis = undefined;\n    lastInvokeTime = time;\n    result = func.apply(thisArg, args);\n    return result;\n  }\n\n  function leadingEdge(time) {\n    // Reset any `maxWait` timer.\n    lastInvokeTime = time;\n    // Start the timer for the trailing edge.\n    timerId = setTimeout(timerExpired, wait);\n    // Invoke the leading edge.\n    return leading ? invokeFunc(time) : result;\n  }\n\n  function remainingWait(time) {\n    var timeSinceLastCall = time - lastCallTime,\n        timeSinceLastInvoke = time - lastInvokeTime,\n        timeWaiting = wait - timeSinceLastCall;\n\n    return maxing\n      ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke)\n      : timeWaiting;\n  }\n\n  function shouldInvoke(time) {\n    var timeSinceLastCall = time - lastCallTime,\n        timeSinceLastInvoke = time - lastInvokeTime;\n\n    // Either this is the first call, activity has stopped and we're at the\n    // trailing edge, the system time has gone backwards and we're treating\n    // it as the trailing edge, or we've hit the `maxWait` limit.\n    return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||\n      (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));\n  }\n\n  function timerExpired() {\n    var time = now();\n    if (shouldInvoke(time)) {\n      return trailingEdge(time);\n    }\n    // Restart the timer.\n    timerId = setTimeout(timerExpired, remainingWait(time));\n  }\n\n  function trailingEdge(time) {\n    timerId = undefined;\n\n    // Only invoke if we have `lastArgs` which means `func` has been\n    // debounced at least once.\n    if (trailing && lastArgs) {\n      return invokeFunc(time);\n    }\n    lastArgs = lastThis = undefined;\n    return result;\n  }\n\n  function cancel() {\n    if (timerId !== undefined) {\n      clearTimeout(timerId);\n    }\n    lastInvokeTime = 0;\n    lastArgs = lastCallTime = lastThis = timerId = undefined;\n  }\n\n  function flush() {\n    return timerId === undefined ? result : trailingEdge(now());\n  }\n\n  function debounced() {\n    var time = now(),\n        isInvoking = shouldInvoke(time);\n\n    lastArgs = arguments;\n    lastThis = this;\n    lastCallTime = time;\n\n    if (isInvoking) {\n      if (timerId === undefined) {\n        return leadingEdge(lastCallTime);\n      }\n      if (maxing) {\n        // Handle invocations in a tight loop.\n        clearTimeout(timerId);\n        timerId = setTimeout(timerExpired, wait);\n        return invokeFunc(lastCallTime);\n      }\n    }\n    if (timerId === undefined) {\n      timerId = setTimeout(timerExpired, wait);\n    }\n    return result;\n  }\n  debounced.cancel = cancel;\n  debounced.flush = flush;\n  return debounced;\n}\n\nmodule.exports = debounce;\n","/**\n * This method returns the first argument it receives.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Util\n * @param {*} value Any value.\n * @returns {*} Returns `value`.\n * @example\n *\n * var object = { 'a': 1 };\n *\n * console.log(_.identity(object) === object);\n * // => true\n */\nfunction identity(value) {\n  return value;\n}\n\nmodule.exports = identity;\n","import React, { Fragment, Component } from 'react';\n\nimport {\n    Main,\n    PageHeader,\n    PageHeaderTitle\n} from '@redhat-cloud-services/frontend-components';\n\ninterface Props {\n    mainStyle?: any;\n};\n\ninterface State {\n}\n\nclass ReportsPage extends Component<Props, State> {\n\n    constructor(props: Props) {\n        super(props);\n    }\n\n    public render() {\n        const { children } = this.props;\n\n        return (\n            <Fragment>\n                <PageHeader>\n                    <PageHeaderTitle title={ 'Reports' } />\n                </PageHeader>\n                <Main style={ this.props.mainStyle }>\n                    { children }\n                </Main>\n            </Fragment>\n        );\n    }\n};\n\nexport default ReportsPage;\n","var root = require('./_root');\n\n/**\n * Gets the timestamp of the number of milliseconds that have elapsed since\n * the Unix epoch (1 January 1970 00:00:00 UTC).\n *\n * @static\n * @memberOf _\n * @since 2.4.0\n * @category Date\n * @returns {number} Returns the timestamp.\n * @example\n *\n * _.defer(function(stamp) {\n *   console.log(_.now() - stamp);\n * }, _.now());\n * // => Logs the number of milliseconds it took for the deferred invocation.\n */\nvar now = function() {\n  return root.Date.now();\n};\n\nmodule.exports = now;\n","exports = module.exports = require(\"../../../node_modules/css-loader/dist/runtime/api.js\")(false);\n// Module\nexports.push([module.id, \".pf-c-empty-state > .dropzone {\\n  margin-top: var(--pf-c-empty-state--c-button--MarginTop); }\\n\\n.error {\\n  color: var(--pf-global--danger-color--100) !important; }\\n\\n.success {\\n  color: var(--pf-global--success-color--100) !important; }\\n\", \"\"]);\n\n","import ReportsPage from './ReportsPage';\n\nexport default ReportsPage;\n","\nvar content = require(\"!!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/sass-loader/lib/loader.js!./Reports.scss\");\n\nif(typeof content === 'string') content = [[module.id, content, '']];\n\nvar transform;\nvar insertInto;\n\n\n\nvar options = {\"hmr\":true}\n\noptions.transform = transform\noptions.insertInto = undefined;\n\nvar update = require(\"!../../../node_modules/style-loader/lib/addStyles.js\")(content, options);\n\nif(content.locals) module.exports = content.locals;\n\nif(module.hot) {\n\tmodule.hot.accept(\"!!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/sass-loader/lib/loader.js!./Reports.scss\", function() {\n\t\tvar newContent = require(\"!!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/sass-loader/lib/loader.js!./Reports.scss\");\n\n\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\n\t\tvar locals = (function(a, b) {\n\t\t\tvar key, idx = 0;\n\n\t\t\tfor(key in a) {\n\t\t\t\tif(!b || a[key] !== b[key]) return false;\n\t\t\t\tidx++;\n\t\t\t}\n\n\t\t\tfor(key in b) idx--;\n\n\t\t\treturn idx === 0;\n\t\t}(content.locals, newContent.locals));\n\n\t\tif(!locals) throw new Error('Aborting CSS HMR due to changed css-modules locals.');\n\n\t\tupdate(newContent);\n\t});\n\n\tmodule.hot.dispose(function() { update(); });\n}"],"sourceRoot":""}