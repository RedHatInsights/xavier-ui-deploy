{"version":3,"sources":["webpack:///./src/pages/ReportView/WorkloadInventory/WorkloadInventory.scss?c828","webpack:///./src/pages/ReportView/WorkloadInventory/WorkloadInventory.tsx","webpack:///./src/pages/ReportView/WorkloadInventory/WorkloadInventoryDetails/WorkloadInventoryDetails.tsx","webpack:///./src/pages/ReportView/WorkloadInventory/index.tsx","webpack:///./node_modules/lodash/debounce.js","webpack:///./node_modules/lodash/toNumber.js","webpack:///./node_modules/lodash/now.js","webpack:///./src/Utilities/extractUtils.tsx","webpack:///./src/pages/ReportView/WorkloadInventory/WorkloadInventory.scss"],"names":["content","module","i","options","transform","undefined","update","locals","exports","hot","accept","newContent","a","b","key","idx","Error","dispose","FilterTypeKeyEnum","props","render","reportWorkloadInventory","className","recommendedTargetsIMS","map","e","index","Tooltip","position","Fragment","Label","flagsIMS","length","join","diskSpace","memory","cpuCores","osDescription","insightsEnabled","Component","filtersConfig","provider","label","datacenter","cluster","vmName","workload","osName","effort","recommendedTargetIMS","abbreviation","flagIMS","primaryFilters","name","value","PROVIDER","DATACENTER","CLUSTER","VM_NAME","WORKLOAD","OS_NAME","EFFORT","RECOMMENDED_TARGETS_IMS","FLAGS_IMS","chipLabelsMap","Map","changePage","refreshData","handleDownloadFilteredCSV","sortBy","filterValue","reportId","fetchReportWorkloadInventoryFilteredCSV","state","columns","direction","prepareFiltersToBeSended","then","response","contentDispositionHeader","headers","fileName","downloadUrl","window","URL","createObjectURL","Blob","data","link","document","createElement","href","setAttribute","body","appendChild","click","remove","refreshFilters","fetchReportWorkloadInventoryAvailableFilters","page","perPage","fetchReportWorkloadInventory","filtersInRowsAndCells","items","Object","values","rows","reduce","workloads","push","isOpen","cells","title","complexity","parent","fullWidth","setState","onSort","event","column","orderDirection","mappedFilterValue","onPageChange","_event","shouldDebounce","onSetPage","target","onPageInput","onPerPageSelect","onRowCollapse","rowKey","renderPagination","total","Pagination","itemCount","renderResultsTable","Table","onCollapse","colSpan","renderNoResults","Card","CardBody","EmptyState","variant","full","EmptyStateIcon","icon","Title","headingLevel","size","EmptyStateBody","renderFilterTypeDropdown","filterDropDownOpen","filterType","Dropdown","left","toggle","DropdownToggle","onToggle","onFilterDropDownToggle","dropdownItems","element","DropdownItem","onClick","onFilterTypeSelect","filterName","preventDefault","renderFilterInput","reportWorkloadInventoryAvailableFilters","renderSecondaryFilterDropdown","providers","datacenters","clusters","complexities","renderSecondaryFilterInputText","osNames","TextInput","type","readOnly","placeholder","onSecondaryFilterDropdownToggle","isExpanded","secondaryFilterDropDownOpen","getMapValue","has","set","get","forEach","keyFilter","applyFilterAndSearch","onSecondaryFilterDropdownSelect","selection","currentFilterSelections","newFilterValue","find","elem","filter","selections","Select","single","onSelect","placeholderText","ariaLabelledBy","SelectOption","checkbox","val","initialValues","filterText","onSubmit","resetForm","handleChange","handleBlur","handleSubmit","Form","onChange","_value","onBlur","Button","deleteChipItem","filterTypeKey","currentFilterValue","currentChipValues","newChipValues","clearChips","NONE","reportFilterChips","filterValueArray","ChipGroup","withToolbar","group","ChipGroupToolbarItem","categoryName","chip","Chip","renderWorkloadInventory","renderWorkloadInventorySkeleton","Stack","gutter","StackItem","isFilled","colSize","rowSize","renderFetchError","Bullseye","large","h5","cellFormatters","transforms","cellWidth","sortable","columnTransforms","classNames","hiddenOnMd","visibleOnLg","componentDidMount","this","reportWorkloadInventoryFetchStatus","reportWorkloadInventoryFilteredCSVFetchStatus","error","isFetchComplete","status","ToolbarGroup","ToolbarItem","isDisabled","mapDispatchToProps","reportWorkloadInventoryAvailableFiltersFetchStatus","isObject","now","toNumber","FUNC_ERROR_TEXT","nativeMax","Math","max","nativeMin","min","func","wait","lastArgs","lastThis","maxWait","result","timerId","lastCallTime","lastInvokeTime","leading","maxing","trailing","TypeError","invokeFunc","time","args","thisArg","apply","shouldInvoke","timeSinceLastCall","timerExpired","trailingEdge","setTimeout","timeWaiting","remainingWait","debounced","isInvoking","arguments","leadingEdge","clearTimeout","cancel","flush","root","Date","extractFilenameFromContentDispositionHeaderValue","disposition","filename","indexOf","matches","exec","replace","getFilenameWithoutExtensions"],"mappings":"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","file":"js/WorkloadInventory.js","sourcesContent":["\nvar content = require(\"!!../../../../node_modules/css-loader/dist/cjs.js!../../../../node_modules/sass-loader/lib/loader.js!./WorkloadInventory.scss\");\n\nif(typeof content === 'string') content = [[module.id, content, '']];\n\nvar transform;\nvar insertInto;\n\n\n\nvar options = {\"hmr\":true}\n\noptions.transform = transform\noptions.insertInto = undefined;\n\nvar update = require(\"!../../../../node_modules/style-loader/lib/addStyles.js\")(content, options);\n\nif(content.locals) module.exports = content.locals;\n\nif(module.hot) {\n\tmodule.hot.accept(\"!!../../../../node_modules/css-loader/dist/cjs.js!../../../../node_modules/sass-loader/lib/loader.js!./WorkloadInventory.scss\", function() {\n\t\tvar newContent = require(\"!!../../../../node_modules/css-loader/dist/cjs.js!../../../../node_modules/sass-loader/lib/loader.js!./WorkloadInventory.scss\");\n\n\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\n\t\tvar locals = (function(a, b) {\n\t\t\tvar key, idx = 0;\n\n\t\t\tfor(key in a) {\n\t\t\t\tif(!b || a[key] !== b[key]) return false;\n\t\t\t\tidx++;\n\t\t\t}\n\n\t\t\tfor(key in b) idx--;\n\n\t\t\treturn idx === 0;\n\t\t}(content.locals, newContent.locals));\n\n\t\tif(!locals) throw new Error('Aborting CSS HMR due to changed css-modules locals.');\n\n\t\tupdate(newContent);\n\t});\n\n\tmodule.hot.dispose(function() { update(); });\n}","import React from 'react';\nimport { RouterGlobalProps } from '../../../models/router';\nimport {\n    TableToolbar,\n    SkeletonTable\n} from '@redhat-cloud-services/frontend-components';\nimport {\n    expandable,\n    Table,\n    TableHeader,\n    TableBody,\n    ICell,\n    IRow,\n    sortable,\n    ISortBy,\n    cellWidth,\n    classNames,\n    Visibility\n} from '@patternfly/react-table';\nimport {\n    ToolbarGroup,\n    ToolbarItem,\n    Pagination,\n    Button,\n    Bullseye,\n    EmptyState,\n    EmptyStateIcon,\n    EmptyStateVariant,\n    Title,\n    TitleLevel,\n    EmptyStateBody,\n    Stack,\n    StackItem,\n    Card,\n    CardBody,\n    Dropdown,\n    DropdownToggle,\n    DropdownItem,\n    TextInput,\n    DropdownPosition,\n    Select,\n    SelectVariant,\n    SelectOption,\n    ChipGroup,\n    ChipGroupToolbarItem,\n    Chip,\n    ButtonVariant,\n    Form,\n    Tooltip\n} from '@patternfly/react-core';\nimport {\n    ErrorCircleOIcon,\n    SearchIcon,\n    FilterIcon,\n    FlagIcon\n} from '@patternfly/react-icons';\nimport './WorkloadInventory.scss';\nimport { ReportWorkloadInventory, WorkloadInventoryReportFiltersModel } from '../../../models';\nimport { ObjectFetchStatus } from '../../../models/state';\nimport debounce from 'lodash/debounce';\nimport { extractFilenameFromContentDispositionHeaderValue } from '../../../Utilities/extractUtils';\nimport { Formik } from 'formik';\nimport { WorkloadInventoryDetails } from './WorkloadInventoryDetails';\n\ninterface StateToProps extends RouterGlobalProps {\n    reportWorkloadInventory: {\n        total: number;\n        items: ReportWorkloadInventory[]\n    };\n    reportWorkloadInventoryFetchStatus: ObjectFetchStatus;\n    reportWorkloadInventoryFilteredCSVFetchStatus: ObjectFetchStatus;\n    reportWorkloadInventoryAvailableFilters: WorkloadInventoryReportFiltersModel | null;\n    reportWorkloadInventoryAvailableFiltersFetchStatus: ObjectFetchStatus;\n}\n\ninterface DispatchToProps {\n    fetchReportWorkloadInventory: (\n        reportId: number,\n        page: number,\n        perPage: number,\n        orderBy: string | undefined,\n        orderDirection: 'asc' | 'desc' | undefined,\n        filterValue: Map<string, string[]>\n    ) => any;\n    fetchReportWorkloadInventoryFilteredCSV:(\n        id: number,\n        orderBy: string | undefined,\n        orderDirection: 'asc' | 'desc' | undefined,\n        filters: Map<string, string[]>\n    ) => any;\n    fetchReportWorkloadInventoryAvailableFilters: (reportId: number) => any;\n}\n\ninterface Props extends StateToProps, DispatchToProps {\n    reportId: number;\n};\n\ninterface Row extends IRow {\n    isOpen?: boolean;\n}\n\ninterface Column extends ICell {\n    key: string;\n    cellFormatters?: any;\n    transforms?: any;\n}\n\ninterface State {\n    page: number;\n    perPage: number;\n    columns: Column[];\n    rows: Row[];\n    sortBy: ISortBy;\n    filterDropDownOpen: boolean;\n    filterType: {\n        name: string,\n        value: FilterTypeKeyEnum\n    };\n    filterValue: Map<FilterTypeKeyEnum, string[]>;\n    secondaryFilterDropDownOpen: boolean;\n};\n\ninterface FilterConfig {\n    key: string;\n    label: string;\n    abbreviation?: string;\n};\n\nconst filtersConfig = {\n    provider: { key: 'provider', label: 'Provider' } as FilterConfig,\n    datacenter: { key: 'datacenter', label: 'Datacenter' } as FilterConfig,\n    cluster: { key: 'cluster', label: 'Cluster' } as FilterConfig,\n    vmName: { key: 'vmName', label: 'VM name' } as FilterConfig,\n    workload: { key: 'workload', label: 'Workload' } as FilterConfig,\n    osName: { key: 'osName', label: 'OS type' } as FilterConfig,\n    effort: { key: 'complexity', label: 'Effort' } as FilterConfig,\n    recommendedTargetIMS: { key: 'recommendedTargetIMS', label: 'Recommended targets', abbreviation: 'Rec. Targets' } as FilterConfig,\n    flagIMS: { key: 'flagIMS', label: 'Flags' } as FilterConfig,\n};\n\nenum FilterTypeKeyEnum {\n    NONE = \"NONE\",\n    PROVIDER = \"PROVIDER\",\n    DATACENTER = \"DATACENTER\",\n    CLUSTER = \"CLUSTER\",\n    VM_NAME = \"VM_NAME\",\n    WORKLOAD = \"WORKLOAD\",\n    OS_NAME = \"OS_NAME\",\n    EFFORT = \"EFFORT\",\n    RECOMMENDED_TARGETS_IMS = \"RECOMMENDED_TARGETS_IMS\",\n    FLAGS_IMS = \"FLAGS_IMS\"\n}\n\nconst primaryFilters = [\n    { name: filtersConfig.provider.label, value: FilterTypeKeyEnum.PROVIDER },\n    { name: filtersConfig.datacenter.label, value: FilterTypeKeyEnum.DATACENTER },\n    { name: filtersConfig.cluster.label, value: FilterTypeKeyEnum.CLUSTER },\n    { name: filtersConfig.vmName.label, value: FilterTypeKeyEnum.VM_NAME },\n    { name: filtersConfig.workload.label, value: FilterTypeKeyEnum.WORKLOAD },\n    { name: filtersConfig.osName.label, value: FilterTypeKeyEnum.OS_NAME },\n    { name: filtersConfig.effort.label, value: FilterTypeKeyEnum.EFFORT },\n    { name: filtersConfig.recommendedTargetIMS.label, value: FilterTypeKeyEnum.RECOMMENDED_TARGETS_IMS },\n    { name: filtersConfig.flagIMS.label, value: FilterTypeKeyEnum.FLAGS_IMS }\n];\n\nconst chipLabelsMap: Map<FilterTypeKeyEnum, string> = new Map([\n    [FilterTypeKeyEnum.PROVIDER, filtersConfig.provider.label],\n    [FilterTypeKeyEnum.DATACENTER, filtersConfig.datacenter.label],\n    [FilterTypeKeyEnum.CLUSTER, filtersConfig.cluster.label],\n    [FilterTypeKeyEnum.VM_NAME, filtersConfig.vmName.label],\n    [FilterTypeKeyEnum.WORKLOAD, filtersConfig.workload.label],\n    [FilterTypeKeyEnum.OS_NAME, filtersConfig.osName.label],\n    [FilterTypeKeyEnum.EFFORT, filtersConfig.effort.label],\n    [FilterTypeKeyEnum.RECOMMENDED_TARGETS_IMS, filtersConfig.recommendedTargetIMS.abbreviation || filtersConfig.recommendedTargetIMS.label],\n    [FilterTypeKeyEnum.FLAGS_IMS, filtersConfig.flagIMS.label],\n]);\n\nclass WorkloadInventory extends React.Component<Props, State> {\n\n    public changePage = debounce(() => {\n        this.refreshData();\n    }, 800);\n\n    constructor(props: Props) {\n        super(props);\n        this.state = {\n            page: 1,\n            perPage: 10,\n            columns: [\n                {\n                    title: filtersConfig.provider.label,\n                    key: filtersConfig.provider.key,\n                    props: {\n                        className: 'vertical-align-middle WorkloadInventory_truncate_table_column'\n                    },\n                    cellFormatters: [ expandable ],\n                    transforms: [ cellWidth('10') ]\n                },\n                {\n                    title: filtersConfig.datacenter.label,\n                    key: filtersConfig.datacenter.key,\n                    props: {\n                        className: 'vertical-align-middle WorkloadInventory_truncate_table_column'\n                    },\n                    transforms: [ cellWidth('15') ]\n                },\n                {\n                    title: filtersConfig.cluster.label,\n                    key: filtersConfig.cluster.key,\n                    props: {\n                        className: 'vertical-align-middle WorkloadInventory_truncate_table_column'\n                    },\n                    transforms: [ cellWidth('15') ]\n                },\n                {\n                    title: filtersConfig.vmName.label,\n                    key: filtersConfig.vmName.key,\n                    props: {\n                        className: 'vertical-align-middle WorkloadInventory_truncate_table_column'\n                    },\n                    transforms: [ sortable, cellWidth('15') ]\n                },\n                {\n                    title: filtersConfig.workload.label,\n                    key: filtersConfig.workload.key,\n                    props: {\n                        className: 'vertical-align-middle WorkloadInventory_truncate_table_column'\n                    },\n                    transforms: [ cellWidth('10') ],\n                    columnTransforms: [classNames(Visibility.hiddenOnMd, Visibility.visibleOnLg)]\n                },\n                {\n                    title: filtersConfig.osName.label,\n                    key: filtersConfig.osName.key,\n                    props: {\n                        className: 'vertical-align-middle WorkloadInventory_truncate_table_column'\n                    },\n                    transforms: [ sortable, cellWidth('15') ],\n                    columnTransforms: [classNames(Visibility.hiddenOnMd, Visibility.visibleOnLg)]\n                },\n                {\n                    title: filtersConfig.effort.label,\n                    key: filtersConfig.effort.key,\n                    props: {\n                        className: 'vertical-align-middle WorkloadInventory_truncate_table_column'\n                    },\n                    transforms: [ sortable, cellWidth('10') ],\n                    columnTransforms: [classNames(Visibility.hiddenOnMd, Visibility.visibleOnLg)]\n                },\n                {\n                    title: filtersConfig.flagIMS.label,\n                    key: filtersConfig.flagIMS.key,\n                    props: {\n                        className: 'vertical-align-middle WorkloadInventory_truncate_table_column'\n                    },\n                    transforms: [ cellWidth('10') ],\n                    columnTransforms: [classNames(Visibility.hiddenOnMd, Visibility.visibleOnLg)]\n                }\n            ],\n            rows: [],\n            sortBy: { },\n            filterDropDownOpen: false,\n            secondaryFilterDropDownOpen: false,\n            filterType: {\n                name: 'Filter',\n                value: FilterTypeKeyEnum.NONE,\n            },\n            filterValue: new Map()\n        };\n    }\n\n    public componentDidMount() {\n        this.refreshData();\n        this.refreshFilters();\n    }\n\n    public handleDownloadFilteredCSV = () => {\n        const { sortBy, filterValue, } = this.state;\n        const {reportId, fetchReportWorkloadInventoryFilteredCSV} = this.props;\n\n        const orderByColumn = sortBy.index ? this.state.columns[sortBy.index-1].key : undefined;\n        const orderDirection = sortBy.direction ? sortBy.direction : undefined;\n\n        const mappedFilterValue = this.prepareFiltersToBeSended(filterValue);\n        fetchReportWorkloadInventoryFilteredCSV(reportId, orderByColumn, orderDirection, mappedFilterValue).then((response: any) => {\n            const contentDispositionHeader = response.value.headers['content-disposition'];\n            const fileName = extractFilenameFromContentDispositionHeaderValue(contentDispositionHeader);\n\n            const downloadUrl = window.URL.createObjectURL(new Blob([response.value.data]));\n            const link = document.createElement('a');\n            link.href = downloadUrl;\n            link.setAttribute('download', fileName || 'workloadInventoryReport.csv');\n            document.body.appendChild(link);\n            link.click();\n            link.remove();\n        });\n    };\n\n    public refreshFilters = () => {\n        const { reportId, fetchReportWorkloadInventoryAvailableFilters } = this.props;\n        fetchReportWorkloadInventoryAvailableFilters(reportId);\n    };\n\n    public refreshData = (\n        page: number = this.state.page,\n        perPage: number = this.state.perPage,\n        { direction, index } = this.state.sortBy,\n        filterValue: Map<FilterTypeKeyEnum, string[]> = this.state.filterValue\n    ) => {\n        const { reportId, fetchReportWorkloadInventory } = this.props;\n\n        const orderByColumn = index ? this.state.columns[index-1].key : undefined;\n        const orderDirection = direction ? direction : undefined;\n\n        const mappedFilterValue = this.prepareFiltersToBeSended(filterValue);\n        fetchReportWorkloadInventory(reportId, page, perPage, orderByColumn, orderDirection, mappedFilterValue).then(() => {\n            this.filtersInRowsAndCells();\n        });\n    };\n\n    public filtersInRowsAndCells = () => {\n        const items: ReportWorkloadInventory[] = this.props.reportWorkloadInventory.items\n            ? Object.values(this.props.reportWorkloadInventory.items) : [];\n\n        let rows: any[][] = [];\n        if (items.length > 0) {\n            rows = items.reduce((a: any[], b: ReportWorkloadInventory, index: number) => {\n                const workloads = b.workloads && b.workloads.length > 0 ? b.workloads.join(\", \") : 'Not identified';\n\n                a.push(\n                    {\n                        isOpen: false,\n                        cells: [\n                            {\n                                title: <Tooltip position=\"top\" content={<div>{b.provider}</div>}><span>{b.provider}</span></Tooltip>\n                            },\n                            {\n                                title: <Tooltip position=\"top\" content={<div>{b.datacenter}</div>}><span>{b.datacenter}</span></Tooltip>\n                            },\n                            {\n                                title: <Tooltip position=\"top\" content={<div>{b.cluster}</div>}><span>{b.cluster}</span></Tooltip>\n                            },\n                            {\n                                title: <Tooltip position=\"top\" content={<div>{b.vmName}</div>}><span>{b.vmName}</span></Tooltip>\n                            },\n                            {\n                                title: <Tooltip position=\"top\" content={<div>{workloads}</div>}><span>{workloads}</span></Tooltip>\n                            },\n                            {\n                                title: <Tooltip position=\"top\" content={<div>{b.osName}</div>}><span>{b.osName}</span></Tooltip>\n                            },\n                            {\n                                title: <Tooltip position=\"top\" content={<div>{b.complexity}</div>}><span>{b.complexity}</span></Tooltip>\n                            },\n                            {\n                                title: <span><i><FlagIcon /></i>&nbsp;{b.flagsIMS.length}</span>\n                            }\n                        ]\n                    },\n                    {\n                        parent: index * 2,\n                        fullWidth: false,\n                        cells: [{\n                            title: <WorkloadInventoryDetails reportWorkloadInventory={b} />\n                        }]\n                    }\n                );\n                return a;\n            }, []);\n        }\n\n        this.setState({ rows });\n    };\n\n    /**\n     * Allways will reset the page to 1\n     */\n    public onSort = (event: any, index: number, direction: any) => {\n        const page = 1;\n\n        const { reportId } = this.props;\n        const { perPage, filterValue } = this.state;\n\n        const column = index ? this.state.columns[index-1].key : undefined;\n        const orderDirection = direction ? direction : undefined;\n\n        const mappedFilterValue = this.prepareFiltersToBeSended(filterValue);\n        this.props.fetchReportWorkloadInventory(reportId, page, perPage, column, orderDirection, mappedFilterValue).then(() => {\n            this.setState({\n                page,\n                sortBy: { index, direction }\n            });\n            this.filtersInRowsAndCells();\n        });\n    };\n\n    public onPageChange = (_event: any, page: number, shouldDebounce: boolean) => {\n        this.setState({ page });\n        if (shouldDebounce) {\n            this.changePage();\n        } else {\n            this.refreshData(page);\n        }\n    };\n\n    public onSetPage = (event: any, page: number) => {\n        return event.target.className === 'pf-c-form-control' || this.onPageChange(event, page, false);\n    };\n\n    public onPageInput = (event: any, page: number) => {\n        return this.onPageChange(event, page, true);\n    };\n\n    public onPerPageSelect = (_event: any, perPage: number) => {\n        const page = 1;\n\n        this.setState({ page, perPage });\n        this.refreshData(page, perPage);\n    };\n\n    public onRowCollapse = (_event: any, rowKey: number, isOpen: boolean) => {\n        const { rows } = this.state;\n\n        rows[rowKey].isOpen = isOpen;\n        this.setState({\n            rows\n        });\n    };\n\n    public renderPagination = () => {\n        const { page, perPage } = this.state;\n        const { total } = this.props.reportWorkloadInventory;\n\n        return (\n            <Pagination\n                itemCount={ total }\n                perPage={ perPage }\n                page={ page }\n                onSetPage={ this.onSetPage }\n                onPageInput={ this.onPageInput }\n                onPerPageSelect={ this.onPerPageSelect }\n            />\n        );\n    };\n\n    public renderResultsTable = () => {\n        const { rows, columns, sortBy } = this.state;\n\n        return (\n            <Table\n                aria-label='Workload inventory'\n                onCollapse={ this.onRowCollapse }\n                rows={ rows }\n                cells={ columns }\n                sortBy={ sortBy }\n                onSort={ this.onSort }\n                className=\"table-vertical-align-middle\"\n            >\n                <TableHeader />\n                <TableBody />\n                <tfoot>\n                    <tr>\n                        <td colSpan={ 10 }>\n                            { this.renderPagination() }\n                        </td>\n                    </tr>\n                </tfoot>\n            </Table>\n        );\n    };\n\n    public renderNoResults = () => {\n        return (\n            <React.Fragment>\n                <Card>\n                    <CardBody>\n                        <EmptyState variant={ EmptyStateVariant.full }>\n                            <EmptyStateIcon icon={ SearchIcon } />\n                            <Title headingLevel=\"h5\" size=\"lg\">No results found</Title>\n                            <EmptyStateBody>\n                                No results match the search criteria\n                            </EmptyStateBody>\n                        </EmptyState>\n                    </CardBody>\n                </Card>\n            </React.Fragment>\n        );\n    };\n\n    public renderFilterTypeDropdown = () => {\n        const { filterDropDownOpen, filterType } = this.state;\n        return (\n            <Dropdown\n                position={DropdownPosition.left}\n                className=\"topology-view-filter-dropdown\"\n                toggle={\n                <DropdownToggle onToggle={this.onFilterDropDownToggle}>\n                    <FilterIcon className=\"pf-u-mr-sm\" />\n                    {filterType.name}\n                </DropdownToggle>\n                }\n                isOpen={filterDropDownOpen}\n                dropdownItems={primaryFilters.map((element, index) => {\n                    const onDropdownItemClick = (event) => {\n                        this.onFilterTypeSelect(event, element.name, element.value)\n                    };\n\n                    return (\n                        <DropdownItem key={index} onClick={onDropdownItemClick}>\n                            {element.name}\n                        </DropdownItem>\n                    );\n                })}\n            />\n        );\n    };\n\n    public onFilterDropDownToggle = (isOpen: boolean) => {\n        this.setState({ filterDropDownOpen: isOpen });\n    };\n\n    public onFilterTypeSelect = (e: any, filterName: string, filterValue: FilterTypeKeyEnum) => {\n        e.preventDefault();\n        this.setState({\n            filterType: {\n                name: filterName,\n                value: filterValue\n            },\n            filterDropDownOpen: false,\n            // filterValue: filterType === this.state.filterType ? this.state.filterValue : ''\n        });\n    };\n\n    public renderFilterInput = () => {\n        const { filterType } = this.state;\n        const { reportWorkloadInventoryAvailableFilters } = this.props;\n        if (!reportWorkloadInventoryAvailableFilters) {\n            return;\n        }\n\n        switch(filterType.value) {\n            case FilterTypeKeyEnum.PROVIDER:\n                return this.renderSecondaryFilterDropdown(filterType, reportWorkloadInventoryAvailableFilters.providers);\n            case FilterTypeKeyEnum.DATACENTER:\n                return this.renderSecondaryFilterDropdown(filterType, reportWorkloadInventoryAvailableFilters.datacenters);\n            case FilterTypeKeyEnum.CLUSTER:\n                return this.renderSecondaryFilterDropdown(filterType, reportWorkloadInventoryAvailableFilters.clusters);\n            case FilterTypeKeyEnum.WORKLOAD:\n                return this.renderSecondaryFilterDropdown(filterType, reportWorkloadInventoryAvailableFilters.workloads);\n            case FilterTypeKeyEnum.EFFORT:\n                return this.renderSecondaryFilterDropdown(filterType, reportWorkloadInventoryAvailableFilters.complexities);\n            case FilterTypeKeyEnum.RECOMMENDED_TARGETS_IMS:\n                return this.renderSecondaryFilterDropdown(filterType, reportWorkloadInventoryAvailableFilters.recommendedTargetsIMS);\n            case FilterTypeKeyEnum.FLAGS_IMS:\n                return this.renderSecondaryFilterDropdown(filterType, reportWorkloadInventoryAvailableFilters.flagsIMS);\n            case FilterTypeKeyEnum.VM_NAME:\n                return this.renderSecondaryFilterInputText(filterType);\n            case FilterTypeKeyEnum.OS_NAME:\n                return this.renderSecondaryFilterDropdown(filterType, reportWorkloadInventoryAvailableFilters.osNames);\n            default:\n                return (\n                    <TextInput\n                        type=\"text\"\n                        aria-label=\"filter text input\"\n                        readOnly={true}\n                        placeholder=\"Filter by...\"\n                        value=\"\"\n                    />\n                );\n        }\n    };\n\n    public onSecondaryFilterDropdownToggle = (isExpanded: boolean) => {\n        this.setState({\n            secondaryFilterDropDownOpen: isExpanded\n        });\n    };\n\n    public getMapValue = (key: FilterTypeKeyEnum, map: Map<FilterTypeKeyEnum, string[]>): string[] => {\n        if (!map.has(key)) {\n            map.set(key, []);\n        }\n        return map.get(key) || [];\n    };\n\n    public prepareFiltersToBeSended = (filterValue: Map<FilterTypeKeyEnum, string[]>) => {\n        const mappedFilterValue: Map<string, string[]> = new Map();\n        filterValue.forEach((value: string[], key: FilterTypeKeyEnum) => {\n            let keyFilter: string;\n            switch(key) {\n                case FilterTypeKeyEnum.PROVIDER:\n                    keyFilter = filtersConfig.provider.key;\n                    break;\n                case FilterTypeKeyEnum.DATACENTER:\n                    keyFilter = filtersConfig.datacenter.key;\n                    break;\n                case FilterTypeKeyEnum.CLUSTER:\n                    keyFilter = filtersConfig.cluster.key;\n                    break;\n                case FilterTypeKeyEnum.WORKLOAD:\n                    keyFilter = filtersConfig.workload.key;\n                    break;\n                case FilterTypeKeyEnum.EFFORT:\n                    keyFilter = filtersConfig.effort.key;\n                    break;\n                case FilterTypeKeyEnum.RECOMMENDED_TARGETS_IMS:\n                    keyFilter = filtersConfig.recommendedTargetIMS.key;\n                    break;\n                case FilterTypeKeyEnum.FLAGS_IMS:\n                    keyFilter = filtersConfig.flagIMS.key;\n                    break;\n                case FilterTypeKeyEnum.VM_NAME:\n                    keyFilter = filtersConfig.vmName.key;\n                    break;\n                case FilterTypeKeyEnum.OS_NAME:\n                    keyFilter = filtersConfig.osName.key;\n                    break;\n                default:\n                    keyFilter = key;\n            }\n            mappedFilterValue.set(keyFilter, value);\n        });\n        return mappedFilterValue;\n    }\n\n    public applyFilterAndSearch = (filterValue: Map<FilterTypeKeyEnum, string[]>) => {\n        this.setState({\n            filterValue\n        });\n\n        //\n        const page = 1;\n        const { reportId } = this.props;\n        const { perPage } = this.state;\n        const { direction, index } = this.state.sortBy;\n\n        const column = index ? this.state.columns[index-1].key : undefined;\n        const orderDirection = direction ? direction : undefined;\n\n        const mappedFilterValue = this.prepareFiltersToBeSended(filterValue);\n        this.props.fetchReportWorkloadInventory(reportId, page, perPage, column, orderDirection, mappedFilterValue).then(() => {\n            this.setState({\n                page\n            });\n            this.filtersInRowsAndCells();\n        });\n    };\n\n    public onSecondaryFilterDropdownSelect = (selection: string, filterType: { name: string, value: FilterTypeKeyEnum }) => {\n        const { filterValue } = this.state;\n\n        const currentFilterSelections: string[] = this.getMapValue(filterType.value, filterValue);\n\n        // determine newFilterValue\n        const newFilterValue: Map<FilterTypeKeyEnum, string[]> = new Map(filterValue);\n\n        const previousElement: string | undefined = currentFilterSelections.find((elem: string) => elem === selection);\n        if (previousElement) {\n            newFilterValue.set(filterType.value, currentFilterSelections.filter((elem: string) => elem !== selection));\n        } else {\n            newFilterValue.set(filterType.value, [\n                ...currentFilterSelections,\n                selection\n            ]);\n        }\n\n        this.applyFilterAndSearch(newFilterValue);\n    };\n\n    public renderSecondaryFilterDropdown = (filterType: { name: string, value: FilterTypeKeyEnum }, options: string[]) => {\n        const { secondaryFilterDropDownOpen, filterValue } = this.state;\n        const selections: string[] = this.getMapValue(filterType.value, filterValue);\n\n        if (options.length === 0) {\n            const onEmptySelect = () => {return;};\n            return (\n                <Select\n                    variant={SelectVariant.single}\n                    aria-label={`Select ${filterType.name} Input`}\n                    onToggle={this.onSecondaryFilterDropdownToggle}\n                    onSelect={onEmptySelect}\n                    isExpanded={secondaryFilterDropDownOpen}\n                    placeholderText={`Filter by ${filterType.name}`}\n                    ariaLabelledBy={filterType.name}\n                >\n                    {[\n                        <SelectOption key=\"EmptyKey\" value=\"No values available\" />\n                    ]}\n                </Select>\n            );\n        }\n\n        const onSelect = (event: React.MouseEvent | React.ChangeEvent, value: any) => {\n            this.onSecondaryFilterDropdownSelect(value, filterType);\n        };\n        return (\n            <Select\n                variant={SelectVariant.checkbox}\n                aria-label={`Select ${filterType.name} Input`}\n                onToggle={this.onSecondaryFilterDropdownToggle}\n                onSelect={onSelect}\n                isExpanded={secondaryFilterDropDownOpen}\n                selections={selections}\n                placeholderText={`Filter by ${filterType.name}`}\n                ariaLabelledBy={filterType.name}\n            >\n                {options.map((val, index) => {\n                    return <SelectOption key={index} value={val} />;\n                })}\n            </Select>\n        );\n    };\n\n    public renderSecondaryFilterInputText = (filterType: { name: string, value: FilterTypeKeyEnum }) => {\n        const { filterValue } = this.state;\n\n        const onSubmit = (values: { filterText: string }, { resetForm }) => {\n            const selection = values.filterText;\n            const currentFilterSelections: string[] = this.getMapValue(filterType.value, filterValue);\n\n            // determine newFilterValue\n            const newFilterValue: Map<FilterTypeKeyEnum, string[]> = new Map(filterValue);\n\n            const previousElement: string | undefined = currentFilterSelections.find((elem: string) => elem === selection);\n            if (!previousElement) {\n                newFilterValue.set(filterType.value, [\n                    ...currentFilterSelections,\n                    selection\n                ]);\n\n                this.applyFilterAndSearch(newFilterValue);\n            }\n\n            resetForm();\n        };\n\n        return (\n            <Formik\n                initialValues={ { filterText: '' } }\n                onSubmit={ onSubmit }\n            >\n                {\n                    ({\n                        values,\n                        handleChange,\n                        handleBlur,\n                        handleSubmit\n                    }) =>\n                        {\n                            const customHandleChange = (_value: any, event: any) => {\n                                handleChange(event);\n                            };\n\n                            return (\n                                <Form onSubmit={ handleSubmit }>\n                                    <TextInput\n                                        type=\"search\"\n                                        name=\"filterText\"\n                                        aria-label=\"search text input\"\n                                        onChange={ customHandleChange }\n                                        onBlur={ handleBlur }\n                                        value={ values.filterText }\n                                        placeholder={`Filter by ${filterType.name}...`}\n                                    />\n                                    <Button type=\"submit\" className=\"pf-u-hidden\">Submit</Button>\n                                </Form>\n                            );\n                        }\n                }\n            </Formik>\n        );\n    };\n\n    public deleteChipItem = (filterTypeKey: FilterTypeKeyEnum, element: string) => {\n        const currentFilterValue = this.state.filterValue;\n        const currentChipValues = this.getMapValue(filterTypeKey, this.state.filterValue);\n\n        const newFilterValue = new Map(currentFilterValue);\n        const newChipValues = currentChipValues.filter((e) => e !== element);\n        newFilterValue.set(filterTypeKey, newChipValues);\n\n        this.applyFilterAndSearch(newFilterValue);\n    };\n\n    public clearChips = () => {\n        this.setState({\n            filterType: {\n                name: 'Filter',\n                value: FilterTypeKeyEnum.NONE,\n            }\n        });\n        this.applyFilterAndSearch(new Map());\n    };\n\n    public reportFilterChips = () => {\n        const { filterValue } = this.state;\n\n        const filterValueArray: Array<{key: FilterTypeKeyEnum, value: string[]}> = [];\n        filterValue.forEach((value: string[], key: FilterTypeKeyEnum) => {\n            if (value.length > 0) {\n                filterValueArray.push({\n                    key,\n                    value\n                });\n            }\n        });\n\n        return (\n            <React.Fragment>\n                <ChipGroup withToolbar={true}>\n                    { filterValueArray.map((group) => {\n                        return (\n                            <ChipGroupToolbarItem key={group.key} categoryName={chipLabelsMap.get(group.key)}>\n                                { group.value.map((chip: string) => {\n                                    const onDeleteChipItem = () => {\n                                        this.deleteChipItem(group.key, chip);\n                                    };\n\n                                    return (\n                                        <Chip key={chip} onClick={onDeleteChipItem}>\n                                            {chip}\n                                        </Chip>\n                                    );\n                                })}\n                            </ChipGroupToolbarItem>\n                        );\n                    })}\n                </ChipGroup>\n                {\n                    filterValueArray.length > 0 && <React.Fragment>\n                        &nbsp;<Button variant={ButtonVariant.link} onClick={ this.clearChips }>Clear filters</Button>\n                    </React.Fragment>\n                }\n            </React.Fragment>\n        );\n    };\n\n    public renderWorkloadInventory = () => {\n        const { reportWorkloadInventory } = this.props;\n\n        return (\n            <React.Fragment>\n                { (reportWorkloadInventory. total > 0 ? this.renderResultsTable() : this.renderNoResults()) }\n            </React.Fragment>\n        );\n    };\n\n    public renderWorkloadInventorySkeleton = () => {\n        return (\n            <React.Fragment>\n                <Stack gutter='md'>\n                    <StackItem isFilled={ false }>\n                        <SkeletonTable colSize={ 9 } rowSize={ 10 }/>\n                    </StackItem>\n                </Stack>\n            </React.Fragment>\n        );\n    };\n\n    public renderFetchError = () => {\n        const onRetryClick = () => {\n            this.refreshData();\n        };\n\n        return (\n            <Bullseye>\n                <EmptyState variant={ EmptyStateVariant.large }>\n                    <EmptyStateIcon icon={ ErrorCircleOIcon } />\n                    <Title headingLevel={ TitleLevel.h5 } size=\"lg\">\n                        Error\n                    </Title>\n                    <EmptyStateBody>\n                        Something unexpected happend, please try again!\n                    </EmptyStateBody>\n                    <Button variant=\"primary\" onClick={ onRetryClick }>Retry</Button>\n                </EmptyState>\n            </Bullseye>\n        );\n    };\n\n    public render() {\n        const { } = this.state;\n        const {\n            reportWorkloadInventoryFetchStatus,\n            reportWorkloadInventoryFilteredCSVFetchStatus\n        } = this.props;\n\n        if (reportWorkloadInventoryFetchStatus.error) {\n            return this.renderFetchError();\n        }\n\n        const isFetchComplete: boolean = reportWorkloadInventoryFetchStatus.status === 'complete';\n\n        return (\n            <React.Fragment>\n                <TableToolbar className=\"pf-u-justify-content-space-between\">\n                    <ToolbarGroup>\n                        <ToolbarItem>{this.renderFilterTypeDropdown()}</ToolbarItem>\n                        <ToolbarItem className=\"pf-u-mr-md\">{this.renderFilterInput()}</ToolbarItem>\n                        <ToolbarItem className=\"pf-u-mr-md\">\n                            <Button\n                                variant={\"primary\"}\n                                onClick={this.handleDownloadFilteredCSV}\n                                isDisabled={reportWorkloadInventoryFilteredCSVFetchStatus.status==='inProgress'}\n                            >\n                                {\n                                    reportWorkloadInventoryFilteredCSVFetchStatus.status==='inProgress' ?\n                                        'Exporting CSV' : 'Export as CSV'\n                                }\n                            </Button>\n                        </ToolbarItem>\n                    </ToolbarGroup>\n                    <ToolbarGroup>\n                        <ToolbarItem>\n                            { this.renderPagination() }\n                        </ToolbarItem>\n                    </ToolbarGroup>\n                </TableToolbar>\n                <TableToolbar className=\"pf-u-justify-content-space-between\">\n                    <ToolbarGroup>\n                        <ToolbarItem>\n                            { this.reportFilterChips() }\n                        </ToolbarItem>\n                    </ToolbarGroup>\n                </TableToolbar>\n                { isFetchComplete ? this.renderWorkloadInventory() : this.renderWorkloadInventorySkeleton() }\n            </React.Fragment>\n        );\n    }\n\n}\n\nexport default WorkloadInventory;\n","import React from 'react';\nimport { Label, Tooltip } from '@patternfly/react-core';\nimport { ReportWorkloadInventory } from '../../../../models';\nimport { formatNumber, formatBytes } from '../../../../Utilities/formatValue';\n\nexport interface WorkloadInventoryDetailsProps {\n    reportWorkloadInventory: ReportWorkloadInventory;\n}\n\ninterface State {}\n\nexport class WorkloadInventoryDetails extends React.Component<WorkloadInventoryDetailsProps, State> {\n    constructor(props: WorkloadInventoryDetailsProps) {\n        super(props);\n    }\n\n    public render() {\n        const { reportWorkloadInventory } = this.props;\n\n        return (\n            <div className=\"pf-c-content\">\n                <dl>\n                    <dt>Recommended targets</dt>\n                    <dd>{reportWorkloadInventory.recommendedTargetsIMS.map((e, index) => {\n                        return (\n                            <Tooltip key={index}\n                                position=\"top\"\n                                content={\n                                    <div>VM suitable to be migrated to {e}</div>\n                                }\n                            >\n                                <React.Fragment>\n                                    <Label>{e}</Label>&nbsp;\n                                </React.Fragment>\n                            </Tooltip>\n                        );\n                    })}\n                    </dd>\n                    <dt>Flags</dt>\n                    <dd>{\n                        reportWorkloadInventory.flagsIMS && reportWorkloadInventory.flagsIMS.length > 0\n                         ? reportWorkloadInventory.flagsIMS.join(\", \")\n                         : 'None identified'\n                    }\n                    </dd>\n                    <dt>Disk space</dt>\n                    <dd>{formatBytes(reportWorkloadInventory.diskSpace, 1)}</dd>\n                    <dt>Memory</dt>\n                    <dd>{formatBytes(reportWorkloadInventory.memory, 1)}</dd>\n                    <dt>CPU cores</dt>\n                    <dd>{formatNumber(reportWorkloadInventory.cpuCores, 0)}</dd>\n                    <dt>Operating system description</dt>\n                    <dd>{reportWorkloadInventory.osDescription}</dd>\n                    <dt>Red Hat Insights</dt>\n                    <dd>{reportWorkloadInventory.insightsEnabled ? 'Enabled' : 'Disabled'}</dd>\n                </dl>\n            </div>\n        );\n    }\n}\n","import { connect } from 'react-redux';\nimport WorkloadInventory from './WorkloadInventory';\nimport { GlobalState } from '../../../models/state';\nimport * as reportActions from '../../../actions/ReportActions';\n\nconst mapStateToProps = (state: GlobalState) => {\n    const {\n        reportWorkloadInventory,\n        reportWorkloadInventoryFetchStatus,\n        reportWorkloadInventoryFilteredCSVFetchStatus,\n        reportWorkloadInventoryAvailableFilters,\n        reportWorkloadInventoryAvailableFiltersFetchStatus\n    } = state.reportState;\n    return {\n        reportWorkloadInventory,\n        reportWorkloadInventoryFetchStatus,\n        reportWorkloadInventoryFilteredCSVFetchStatus,\n        reportWorkloadInventoryAvailableFilters,\n        reportWorkloadInventoryAvailableFiltersFetchStatus\n    };\n};\n\nconst mapDispatchToProps = {\n    fetchReportWorkloadInventory: reportActions.fetchReportWorkloadInventory,\n    fetchReportWorkloadInventoryFilteredCSV: reportActions.fetchReportWorkloadInventoryFilteredCSV,\n    fetchReportWorkloadInventoryAvailableFilters: reportActions.fetchReportWorkloadInventoryAvailableFilters\n};\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(WorkloadInventory);\n","var isObject = require('./isObject'),\n    now = require('./now'),\n    toNumber = require('./toNumber');\n\n/** Error message constants. */\nvar FUNC_ERROR_TEXT = 'Expected a function';\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMax = Math.max,\n    nativeMin = Math.min;\n\n/**\n * Creates a debounced function that delays invoking `func` until after `wait`\n * milliseconds have elapsed since the last time the debounced function was\n * invoked. The debounced function comes with a `cancel` method to cancel\n * delayed `func` invocations and a `flush` method to immediately invoke them.\n * Provide `options` to indicate whether `func` should be invoked on the\n * leading and/or trailing edge of the `wait` timeout. The `func` is invoked\n * with the last arguments provided to the debounced function. Subsequent\n * calls to the debounced function return the result of the last `func`\n * invocation.\n *\n * **Note:** If `leading` and `trailing` options are `true`, `func` is\n * invoked on the trailing edge of the timeout only if the debounced function\n * is invoked more than once during the `wait` timeout.\n *\n * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\n * until to the next tick, similar to `setTimeout` with a timeout of `0`.\n *\n * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\n * for details over the differences between `_.debounce` and `_.throttle`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Function\n * @param {Function} func The function to debounce.\n * @param {number} [wait=0] The number of milliseconds to delay.\n * @param {Object} [options={}] The options object.\n * @param {boolean} [options.leading=false]\n *  Specify invoking on the leading edge of the timeout.\n * @param {number} [options.maxWait]\n *  The maximum time `func` is allowed to be delayed before it's invoked.\n * @param {boolean} [options.trailing=true]\n *  Specify invoking on the trailing edge of the timeout.\n * @returns {Function} Returns the new debounced function.\n * @example\n *\n * // Avoid costly calculations while the window size is in flux.\n * jQuery(window).on('resize', _.debounce(calculateLayout, 150));\n *\n * // Invoke `sendMail` when clicked, debouncing subsequent calls.\n * jQuery(element).on('click', _.debounce(sendMail, 300, {\n *   'leading': true,\n *   'trailing': false\n * }));\n *\n * // Ensure `batchLog` is invoked once after 1 second of debounced calls.\n * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });\n * var source = new EventSource('/stream');\n * jQuery(source).on('message', debounced);\n *\n * // Cancel the trailing debounced invocation.\n * jQuery(window).on('popstate', debounced.cancel);\n */\nfunction debounce(func, wait, options) {\n  var lastArgs,\n      lastThis,\n      maxWait,\n      result,\n      timerId,\n      lastCallTime,\n      lastInvokeTime = 0,\n      leading = false,\n      maxing = false,\n      trailing = true;\n\n  if (typeof func != 'function') {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n  wait = toNumber(wait) || 0;\n  if (isObject(options)) {\n    leading = !!options.leading;\n    maxing = 'maxWait' in options;\n    maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;\n    trailing = 'trailing' in options ? !!options.trailing : trailing;\n  }\n\n  function invokeFunc(time) {\n    var args = lastArgs,\n        thisArg = lastThis;\n\n    lastArgs = lastThis = undefined;\n    lastInvokeTime = time;\n    result = func.apply(thisArg, args);\n    return result;\n  }\n\n  function leadingEdge(time) {\n    // Reset any `maxWait` timer.\n    lastInvokeTime = time;\n    // Start the timer for the trailing edge.\n    timerId = setTimeout(timerExpired, wait);\n    // Invoke the leading edge.\n    return leading ? invokeFunc(time) : result;\n  }\n\n  function remainingWait(time) {\n    var timeSinceLastCall = time - lastCallTime,\n        timeSinceLastInvoke = time - lastInvokeTime,\n        timeWaiting = wait - timeSinceLastCall;\n\n    return maxing\n      ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke)\n      : timeWaiting;\n  }\n\n  function shouldInvoke(time) {\n    var timeSinceLastCall = time - lastCallTime,\n        timeSinceLastInvoke = time - lastInvokeTime;\n\n    // Either this is the first call, activity has stopped and we're at the\n    // trailing edge, the system time has gone backwards and we're treating\n    // it as the trailing edge, or we've hit the `maxWait` limit.\n    return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||\n      (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));\n  }\n\n  function timerExpired() {\n    var time = now();\n    if (shouldInvoke(time)) {\n      return trailingEdge(time);\n    }\n    // Restart the timer.\n    timerId = setTimeout(timerExpired, remainingWait(time));\n  }\n\n  function trailingEdge(time) {\n    timerId = undefined;\n\n    // Only invoke if we have `lastArgs` which means `func` has been\n    // debounced at least once.\n    if (trailing && lastArgs) {\n      return invokeFunc(time);\n    }\n    lastArgs = lastThis = undefined;\n    return result;\n  }\n\n  function cancel() {\n    if (timerId !== undefined) {\n      clearTimeout(timerId);\n    }\n    lastInvokeTime = 0;\n    lastArgs = lastCallTime = lastThis = timerId = undefined;\n  }\n\n  function flush() {\n    return timerId === undefined ? result : trailingEdge(now());\n  }\n\n  function debounced() {\n    var time = now(),\n        isInvoking = shouldInvoke(time);\n\n    lastArgs = arguments;\n    lastThis = this;\n    lastCallTime = time;\n\n    if (isInvoking) {\n      if (timerId === undefined) {\n        return leadingEdge(lastCallTime);\n      }\n      if (maxing) {\n        // Handle invocations in a tight loop.\n        clearTimeout(timerId);\n        timerId = setTimeout(timerExpired, wait);\n        return invokeFunc(lastCallTime);\n      }\n    }\n    if (timerId === undefined) {\n      timerId = setTimeout(timerExpired, wait);\n    }\n    return result;\n  }\n  debounced.cancel = cancel;\n  debounced.flush = flush;\n  return debounced;\n}\n\nmodule.exports = debounce;\n","/**\n * This method returns the first argument it receives.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Util\n * @param {*} value Any value.\n * @returns {*} Returns `value`.\n * @example\n *\n * var object = { 'a': 1 };\n *\n * console.log(_.identity(object) === object);\n * // => true\n */\nfunction identity(value) {\n  return value;\n}\n\nmodule.exports = identity;\n","var root = require('./_root');\n\n/**\n * Gets the timestamp of the number of milliseconds that have elapsed since\n * the Unix epoch (1 January 1970 00:00:00 UTC).\n *\n * @static\n * @memberOf _\n * @since 2.4.0\n * @category Date\n * @returns {number} Returns the timestamp.\n * @example\n *\n * _.defer(function(stamp) {\n *   console.log(_.now() - stamp);\n * }, _.now());\n * // => Logs the number of milliseconds it took for the deferred invocation.\n */\nvar now = function() {\n  return root.Date.now();\n};\n\nmodule.exports = now;\n","export const extractFilenameFromContentDispositionHeaderValue = (disposition: string) => {\n    let filename = '';\n    if (disposition && disposition.indexOf('attachment') !== -1) {\n        const filenameRegex = /filename[^;=\\n]*=((['\"]).*?\\2|[^;\\n]*)/;\n        const matches = filenameRegex.exec(disposition);\n        if (matches != null && matches[1]) {\n            filename = matches[1].replace(/['\"]/g, '');\n        }\n    }\n\n    return filename;\n};\n\nexport const getFilenameWithoutExtensions = (filename: string) => {\n    return filename.replace(/(\\.[^/.]+)+$/, \"\");\n};\n","exports = module.exports = require(\"../../../../node_modules/css-loader/dist/runtime/api.js\")(false);\n// Module\nexports.push([module.id, \".vertical-align-middle {\\n  vertical-align: middle !important; }\\n\\n.table-vertical-align-middle.pf-c-table tr > *:first-child {\\n  vertical-align: middle !important;\\n  padding-bottom: 20px !important; }\\n\\n.WorkloadInventory_truncate_table_column {\\n  white-space: nowrap;\\n  text-overflow: ellipsis;\\n  overflow: hidden;\\n  max-width: 1px; }\\n\", \"\"]);\n\n"],"sourceRoot":""}