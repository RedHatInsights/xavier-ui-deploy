{"version":3,"sources":["webpack:///./src/pages/ReportView/WorkloadInventory/WorkloadInventory.scss?c828","webpack:///./src/pages/ReportView/WorkloadInventory/WorkloadInventory.tsx","webpack:///./src/Utilities/unitConvertors.js","webpack:///./src/pages/ReportView/WorkloadInventory/WorkloadInventoryDetails/WorkloadInventoryDetails.tsx","webpack:///./src/pages/ReportView/WorkloadInventory/index.tsx","webpack:///./node_modules/lodash/debounce.js","webpack:///./node_modules/lodash/toNumber.js","webpack:///./node_modules/lodash/now.js","webpack:///./src/Utilities/extractUtils.tsx","webpack:///./src/pages/ReportView/WorkloadInventory/WorkloadInventory.scss"],"names":["content","module","i","options","transform","undefined","update","locals","exports","hot","accept","newContent","a","b","key","idx","Error","dispose","FilterTypeKeyEnum","bytesToGb","value","props","render","reportWorkloadInventory","className","formatValue","diskSpace","fractionDigits","memory","cpuCores","osDescription","Component","filtersConfig","provider","label","datacenter","cluster","vmName","workload","osName","effort","recommendedTargetIMS","abbreviation","flagIMS","primaryFilters","name","PROVIDER","DATACENTER","CLUSTER","VM_NAME","WORKLOAD","OS_NAME","EFFORT","RECOMMENDED_TARGETS_IMS","FLAGS_IMS","chipLabelsMap","Map","changePage","refreshData","handleToolbarKebabToggle","newIsOpen","setState","isToolbarKebabOpen","handleDownloadFilteredCSV","sortBy","filterValue","reportId","fetchReportWorkloadInventoryFilteredCSV","index","state","columns","direction","prepareFiltersToBeSended","then","response","contentDispositionHeader","headers","fileName","downloadUrl","window","URL","createObjectURL","Blob","data","link","document","createElement","href","setAttribute","body","appendChild","click","remove","handleDownloadAllCSV","fetchReportWorkloadInventoryAllCSV","refreshFilters","fetchReportWorkloadInventoryAvailableFilters","page","perPage","fetchReportWorkloadInventory","filtersInRowsAndCells","items","Object","values","rows","length","reduce","push","isOpen","cells","title","workloads","map","val","workloadIndex","complexity","recommendedTargetsIMS","targetsIndex","flagsIMS","flagIndex","parent","fullWidth","onSort","event","column","orderDirection","mappedFilterValue","onPageChange","_event","shouldDebounce","onSetPage","target","onPageInput","onPerPageSelect","total","Math","floor","onRowCollapse","rowKey","renderPagination","Pagination","itemCount","renderResultsTable","Table","onCollapse","colSpan","renderNoResults","Fragment","Card","CardBody","EmptyState","variant","full","EmptyStateIcon","icon","Title","headingLevel","size","EmptyStateBody","renderFilterTypeDropdown","filterDropDownOpen","filterType","Dropdown","position","left","toggle","DropdownToggle","onToggle","onFilterDropDownToggle","dropdownItems","element","DropdownItem","onClick","onFilterTypeSelect","e","filterName","preventDefault","renderFilterInput","reportWorkloadInventoryAvailableFilters","renderSecondaryFilterDropdown","providers","datacenters","clusters","complexities","renderSecondaryFilterInputText","osNames","TextInput","type","readOnly","placeholder","onSecondaryFilterDropdownToggle","isExpanded","secondaryFilterDropDownOpen","getMapValue","has","set","get","forEach","keyFilter","applyFilterAndSearch","onSecondaryFilterDropdownSelect","selection","currentFilterSelections","newFilterValue","find","elem","filter","selections","Select","single","onSelect","placeholderText","ariaLabelledBy","SelectOption","checkbox","initialValues","filterText","onSubmit","resetForm","handleChange","handleBlur","handleSubmit","Form","onChange","_value","onBlur","Button","deleteChipItem","filterTypeKey","currentFilterValue","currentChipValues","newChipValues","clearChips","NONE","reportFilterChips","filterValueArray","ChipGroup","withToolbar","group","ChipGroupToolbarItem","categoryName","chip","Chip","renderWorkloadInventory","renderWorkloadInventorySkeleton","Stack","gutter","StackItem","isFilled","colSize","rowSize","renderFetchError","Bullseye","large","h5","cellFormatters","transforms","cellWidth","sortable","columnTransforms","classNames","hiddenOnMd","visibleOnLg","componentDidMount","this","reportWorkloadInventoryFetchStatus","reportWorkloadInventoryAllCSVFetchStatus","reportWorkloadInventoryFilteredCSVFetchStatus","error","isFetchComplete","status","ToolbarGroup","ToolbarItem","KebabToggle","isPlain","component","disabled","mapDispatchToProps","reportWorkloadInventoryAvailableFiltersFetchStatus","isObject","now","toNumber","FUNC_ERROR_TEXT","nativeMax","max","nativeMin","min","func","wait","lastArgs","lastThis","maxWait","result","timerId","lastCallTime","lastInvokeTime","leading","maxing","trailing","TypeError","invokeFunc","time","args","thisArg","apply","shouldInvoke","timeSinceLastCall","timerExpired","trailingEdge","setTimeout","timeWaiting","remainingWait","debounced","isInvoking","arguments","leadingEdge","clearTimeout","cancel","flush","root","Date","extractFilenameFromContentDispositionHeaderValue","disposition","filename","indexOf","matches","exec","replace","getFilenameWithoutExtensions"],"mappings":"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","file":"js/WorkloadInventory.js","sourcesContent":["\nvar content = require(\"!!../../../../node_modules/css-loader/dist/cjs.js!../../../../node_modules/sass-loader/lib/loader.js!./WorkloadInventory.scss\");\n\nif(typeof content === 'string') content = [[module.id, content, '']];\n\nvar transform;\nvar insertInto;\n\n\n\nvar options = {\"hmr\":true}\n\noptions.transform = transform\noptions.insertInto = undefined;\n\nvar update = require(\"!../../../../node_modules/style-loader/lib/addStyles.js\")(content, options);\n\nif(content.locals) module.exports = content.locals;\n\nif(module.hot) {\n\tmodule.hot.accept(\"!!../../../../node_modules/css-loader/dist/cjs.js!../../../../node_modules/sass-loader/lib/loader.js!./WorkloadInventory.scss\", function() {\n\t\tvar newContent = require(\"!!../../../../node_modules/css-loader/dist/cjs.js!../../../../node_modules/sass-loader/lib/loader.js!./WorkloadInventory.scss\");\n\n\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\n\t\tvar locals = (function(a, b) {\n\t\t\tvar key, idx = 0;\n\n\t\t\tfor(key in a) {\n\t\t\t\tif(!b || a[key] !== b[key]) return false;\n\t\t\t\tidx++;\n\t\t\t}\n\n\t\t\tfor(key in b) idx--;\n\n\t\t\treturn idx === 0;\n\t\t}(content.locals, newContent.locals));\n\n\t\tif(!locals) throw new Error('Aborting CSS HMR due to changed css-modules locals.');\n\n\t\tupdate(newContent);\n\t});\n\n\tmodule.hot.dispose(function() { update(); });\n}","import React from 'react';\nimport { RouterGlobalProps } from '../../../models/router';\nimport {\n    TableToolbar,\n    SkeletonTable\n} from '@redhat-cloud-services/frontend-components';\nimport {\n    expandable,\n    Table,\n    TableHeader,\n    TableBody,\n    ICell,\n    IRow,\n    sortable,\n    ISortBy,\n    cellWidth,\n    classNames,\n    Visibility\n} from '@patternfly/react-table';\nimport {\n    ToolbarGroup,\n    ToolbarItem,\n    Pagination,\n    Button,\n    Bullseye,\n    EmptyState,\n    EmptyStateIcon,\n    EmptyStateVariant,\n    Title,\n    TitleLevel,\n    EmptyStateBody,\n    Stack,\n    StackItem,\n    Card,\n    CardBody,\n    Dropdown,\n    DropdownToggle,\n    DropdownItem,\n    TextInput,\n    DropdownPosition,\n    Select,\n    SelectVariant,\n    SelectOption,\n    ChipGroup,\n    ChipGroupToolbarItem,\n    Chip,\n    ButtonVariant,\n    Form,\n    KebabToggle\n} from '@patternfly/react-core';\nimport { ErrorCircleOIcon, SearchIcon, FilterIcon } from '@patternfly/react-icons';\nimport './WorkloadInventory.scss';\nimport { ReportWorkloadInventory, WorkloadInventoryReportFiltersModel } from '../../../models';\nimport { ObjectFetchStatus } from '../../../models/state';\nimport debounce from 'lodash/debounce';\nimport { extractFilenameFromContentDispositionHeaderValue } from '../../../Utilities/extractUtils';\nimport { Formik } from 'formik';\nimport { WorkloadInventoryDetails } from './WorkloadInventoryDetails';\n\ninterface StateToProps extends RouterGlobalProps {\n    reportWorkloadInventory: {\n        total: number;\n        items: ReportWorkloadInventory[]\n    };\n    reportWorkloadInventoryFetchStatus: ObjectFetchStatus;\n    reportWorkloadInventoryAllCSVFetchStatus: ObjectFetchStatus;\n    reportWorkloadInventoryFilteredCSVFetchStatus: ObjectFetchStatus;\n    reportWorkloadInventoryAvailableFilters: WorkloadInventoryReportFiltersModel | null;\n    reportWorkloadInventoryAvailableFiltersFetchStatus: ObjectFetchStatus;\n}\n\ninterface DispatchToProps {\n    fetchReportWorkloadInventory: (\n        reportId: number,\n        page: number,\n        perPage: number,\n        orderBy: string | undefined,\n        orderDirection: 'asc' | 'desc' | undefined,\n        filterValue: Map<string, string[]>\n    ) => any;\n    fetchReportWorkloadInventoryAllCSV:(reportId: number) => any;\n    fetchReportWorkloadInventoryFilteredCSV:(\n        id: number,\n        orderBy: string | undefined,\n        orderDirection: 'asc' | 'desc' | undefined,\n        filters: Map<string, string[]>\n    ) => any;\n    fetchReportWorkloadInventoryAvailableFilters: (reportId: number) => any;\n}\n\ninterface Props extends StateToProps, DispatchToProps {\n    reportId: number;\n};\n\ninterface Row extends IRow {\n    isOpen?: boolean;\n}\n\ninterface Column extends ICell {\n    key: string;\n    cellFormatters?: any;\n    transforms?: any;\n}\n\ninterface State {\n    page: number;\n    perPage: number;\n    columns: Column[];\n    rows: Row[];\n    sortBy: ISortBy;\n    filterDropDownOpen: boolean;\n    filterType: {\n        name: string,\n        value: FilterTypeKeyEnum\n    };\n    filterValue: Map<FilterTypeKeyEnum, string[]>;\n    secondaryFilterDropDownOpen: boolean;\n    isToolbarKebabOpen: boolean;\n};\n\ninterface FilterConfig {\n    key: string;\n    label: string;\n    abbreviation?: string;\n};\n\nconst filtersConfig = {\n    provider: { key: 'provider', label: 'Provider' } as FilterConfig,\n    datacenter: { key: 'datacenter', label: 'Datacenter' } as FilterConfig,\n    cluster: { key: 'cluster', label: 'Cluster' } as FilterConfig,\n    vmName: { key: 'vmName', label: 'VM name' } as FilterConfig,\n    workload: { key: 'workload', label: 'Workload' } as FilterConfig,\n    osName: { key: 'osName', label: 'OS type' } as FilterConfig,\n    effort: { key: 'complexity', label: 'Effort' } as FilterConfig,\n    recommendedTargetIMS: { key: 'recommendedTargetIMS', label: 'Recommended targets', abbreviation: 'Rec. Targets' } as FilterConfig,\n    flagIMS: { key: 'flagIMS', label: 'Flags IMS' } as FilterConfig,\n};\n\nenum FilterTypeKeyEnum {\n    NONE = \"NONE\",\n    PROVIDER = \"PROVIDER\",\n    DATACENTER = \"DATACENTER\",\n    CLUSTER = \"CLUSTER\",\n    VM_NAME = \"VM_NAME\",\n    WORKLOAD = \"WORKLOAD\",\n    OS_NAME = \"OS_NAME\",\n    EFFORT = \"EFFORT\",\n    RECOMMENDED_TARGETS_IMS = \"RECOMMENDED_TARGETS_IMS\",\n    FLAGS_IMS = \"FLAGS_IMS\"\n}\n\nconst primaryFilters = [\n    { name: filtersConfig.provider.label, value: FilterTypeKeyEnum.PROVIDER },\n    { name: filtersConfig.datacenter.label, value: FilterTypeKeyEnum.DATACENTER },\n    { name: filtersConfig.cluster.label, value: FilterTypeKeyEnum.CLUSTER },\n    { name: filtersConfig.vmName.label, value: FilterTypeKeyEnum.VM_NAME },\n    { name: filtersConfig.workload.label, value: FilterTypeKeyEnum.WORKLOAD },\n    { name: filtersConfig.osName.label, value: FilterTypeKeyEnum.OS_NAME },\n    { name: filtersConfig.effort.label, value: FilterTypeKeyEnum.EFFORT },\n    { name: filtersConfig.recommendedTargetIMS.label, value: FilterTypeKeyEnum.RECOMMENDED_TARGETS_IMS },\n    { name: filtersConfig.flagIMS.label, value: FilterTypeKeyEnum.FLAGS_IMS }\n];\n\nconst chipLabelsMap: Map<FilterTypeKeyEnum, string> = new Map([\n    [FilterTypeKeyEnum.PROVIDER, filtersConfig.provider.label],\n    [FilterTypeKeyEnum.DATACENTER, filtersConfig.datacenter.label],\n    [FilterTypeKeyEnum.CLUSTER, filtersConfig.cluster.label],\n    [FilterTypeKeyEnum.VM_NAME, filtersConfig.vmName.label],\n    [FilterTypeKeyEnum.WORKLOAD, filtersConfig.workload.label],\n    [FilterTypeKeyEnum.OS_NAME, filtersConfig.osName.label],\n    [FilterTypeKeyEnum.EFFORT, filtersConfig.effort.label],\n    [FilterTypeKeyEnum.RECOMMENDED_TARGETS_IMS, filtersConfig.recommendedTargetIMS.abbreviation || filtersConfig.recommendedTargetIMS.label],\n    [FilterTypeKeyEnum.FLAGS_IMS, filtersConfig.flagIMS.label],\n]);\n\nclass WorkloadInventory extends React.Component<Props, State> {\n\n    public changePage = debounce(() => {\n        this.refreshData();\n    }, 800);\n\n    constructor(props: Props) {\n        super(props);\n        this.state = {\n            page: 1,\n            perPage: 10,\n            columns: [\n                {\n                    title: filtersConfig.provider.label,\n                    key: filtersConfig.provider.key,\n                    props: {\n                        className: 'vertical-align-middle'\n                    },\n                    cellFormatters: [ expandable ],\n                    transforms: [ cellWidth('10') ]\n                },\n                {\n                    title: filtersConfig.datacenter.label,\n                    key: filtersConfig.datacenter.key,\n                    props: {\n                        className: 'vertical-align-middle'\n                    },\n                    transforms: [ cellWidth('10') ]\n                },\n                {\n                    title: filtersConfig.cluster.label,\n                    key: filtersConfig.cluster.key,\n                    props: {\n                        className: 'vertical-align-middle'\n                    },\n                    transforms: [ cellWidth('10') ]\n                },\n                {\n                    title: filtersConfig.vmName.label,\n                    key: filtersConfig.vmName.key,\n                    props: {\n                        className: 'vertical-align-middle'\n                    },\n                    transforms: [ sortable, cellWidth('15') ]\n                },\n                {\n                    title: filtersConfig.workload.label,\n                    key: filtersConfig.workload.key,\n                    props: {\n                        className: 'vertical-align-middle'\n                    },\n                    transforms: [ cellWidth('10') ],\n                    columnTransforms: [classNames(Visibility.hiddenOnMd, Visibility.visibleOnLg)]\n                },\n                {\n                    title: filtersConfig.osName.label,\n                    key: filtersConfig.osName.key,\n                    props: {\n                        className: 'vertical-align-middle'\n                    },\n                    transforms: [ sortable, cellWidth('10') ],\n                    columnTransforms: [classNames(Visibility.hiddenOnMd, Visibility.visibleOnLg)]\n                },\n                {\n                    title: filtersConfig.effort.label,\n                    key: filtersConfig.effort.key,\n                    props: {\n                        className: 'vertical-align-middle'\n                    },\n                    transforms: [ sortable, cellWidth('10') ],\n                    columnTransforms: [classNames(Visibility.hiddenOnMd, Visibility.visibleOnLg)]\n                },\n                {\n                    title: filtersConfig.recommendedTargetIMS.label,\n                    key: filtersConfig.recommendedTargetIMS.key,\n                    props: {\n                        className: 'vertical-align-middle'\n                    },\n                    transforms: [],\n                    columnTransforms: [classNames(Visibility.hiddenOnMd, Visibility.visibleOnLg)]\n                },\n                {\n                    title: filtersConfig.flagIMS.label,\n                    key: filtersConfig.flagIMS.key,\n                    props: {\n                        className: 'vertical-align-middle'\n                    },\n                    transforms: [],\n                    columnTransforms: [classNames(Visibility.hiddenOnMd, Visibility.visibleOnLg)]\n                }\n            ],\n            rows: [],\n            sortBy: { },\n            filterDropDownOpen: false,\n            secondaryFilterDropDownOpen: false,\n            filterType: {\n                name: 'Filter',\n                value: FilterTypeKeyEnum.NONE,\n            },\n            filterValue: new Map(),\n            isToolbarKebabOpen: false\n        };\n    }\n\n    public componentDidMount() {\n        this.refreshData();\n        this.refreshFilters();\n    }\n\n    public handleToolbarKebabToggle = (newIsOpen: boolean) => {\n        this.setState({ isToolbarKebabOpen: newIsOpen });\n    };\n\n    public handleDownloadFilteredCSV = () => {\n        this.handleToolbarKebabToggle(false);\n\n        const { sortBy, filterValue, } = this.state;\n        const {reportId, fetchReportWorkloadInventoryFilteredCSV} = this.props;\n\n        const orderByColumn = sortBy.index ? this.state.columns[sortBy.index-1].key : undefined;\n        const orderDirection = sortBy.direction ? sortBy.direction : undefined;\n\n        const mappedFilterValue = this.prepareFiltersToBeSended(filterValue);\n        fetchReportWorkloadInventoryFilteredCSV(reportId, orderByColumn, orderDirection, mappedFilterValue).then((response: any) => {\n            const contentDispositionHeader = response.value.headers['content-disposition'];\n            const fileName = extractFilenameFromContentDispositionHeaderValue(contentDispositionHeader);\n\n            const downloadUrl = window.URL.createObjectURL(new Blob([response.value.data]));\n            const link = document.createElement('a');\n            link.href = downloadUrl;\n            link.setAttribute('download', fileName || 'workloadInventoryReport.csv');\n            document.body.appendChild(link);\n            link.click();\n            link.remove();\n        });\n    };\n\n    public handleDownloadAllCSV = () => {\n        this.handleToolbarKebabToggle(false);\n\n        const {reportId, fetchReportWorkloadInventoryAllCSV} = this.props;\n        fetchReportWorkloadInventoryAllCSV(reportId).then((response: any) => {\n            const contentDispositionHeader = response.value.headers['content-disposition'];\n            const fileName = extractFilenameFromContentDispositionHeaderValue(contentDispositionHeader);\n\n            const downloadUrl = window.URL.createObjectURL(new Blob([response.value.data]));\n            const link = document.createElement('a');\n            link.href = downloadUrl;\n            link.setAttribute('download', fileName || 'workloadInventoryReport.csv');\n            document.body.appendChild(link);\n            link.click();\n            link.remove();\n        });\n    };\n\n    public refreshFilters = () => {\n        const { reportId, fetchReportWorkloadInventoryAvailableFilters } = this.props;\n        fetchReportWorkloadInventoryAvailableFilters(reportId);\n    };\n\n    public refreshData = (\n        page: number = this.state.page,\n        perPage: number = this.state.perPage,\n        { direction, index } = this.state.sortBy,\n        filterValue: Map<FilterTypeKeyEnum, string[]> = this.state.filterValue\n    ) => {\n        const { reportId, fetchReportWorkloadInventory } = this.props;\n\n        const orderByColumn = index ? this.state.columns[index-1].key : undefined;\n        const orderDirection = direction ? direction : undefined;\n\n        const mappedFilterValue = this.prepareFiltersToBeSended(filterValue);\n        fetchReportWorkloadInventory(reportId, page, perPage, orderByColumn, orderDirection, mappedFilterValue).then(() => {\n            this.filtersInRowsAndCells();\n        });\n    };\n\n    public filtersInRowsAndCells = () => {\n        const items: ReportWorkloadInventory[] = this.props.reportWorkloadInventory.items\n            ? Object.values(this.props.reportWorkloadInventory.items) : [];\n\n        let rows: any[][] = [];\n        if (items.length > 0) {\n            rows = items.reduce((a: any[], b: ReportWorkloadInventory, index: number) => {\n                a.push(\n                    {\n                        isOpen: false,\n                        cells: [\n                            b.provider,\n                            b.datacenter,\n                            b.cluster,\n                            b.vmName,\n                            {\n                                title: <span>\n                                    {\n                                        b.workloads.map((val: string, workloadIndex: number) => {\n                                            return (\n                                                <span key={ workloadIndex }>{ val }<br/></span>\n                                            );\n                                        })\n                                    }</span>\n                            },\n                            b.osName,\n                            b.complexity,\n                            {\n                                title: <span>\n                                    {\n                                        b.recommendedTargetsIMS.map((val: string, targetsIndex: number) => {\n                                            return (\n                                                <span key={ targetsIndex }>{ val }<br/></span>\n                                            );\n                                        })\n                                    }</span>\n                            },\n                            {\n                                title: <span>\n                                    {\n                                        b.flagsIMS.map((val: string, flagIndex: number) => {\n                                            return (\n                                                <span key={ flagIndex }>{ val }<br/></span>\n                                            );\n                                        })\n                                    }</span>\n                            }\n                        ]\n                    },\n                    {\n                        parent: index * 2,\n                        fullWidth: false,\n                        cells: [{\n                            title: <WorkloadInventoryDetails reportWorkloadInventory={b} />\n                        }]\n                    }\n                );\n                return a;\n            }, []);\n        }\n\n        this.setState({ rows });\n    };\n\n    /**\n     * Allways will reset the page to 1\n     */\n    public onSort = (event: any, index: number, direction: any) => {\n        const page = 1;\n\n        const { reportId } = this.props;\n        const { perPage, filterValue } = this.state;\n\n        const column = index ? this.state.columns[index-1].key : undefined;\n        const orderDirection = direction ? direction : undefined;\n\n        const mappedFilterValue = this.prepareFiltersToBeSended(filterValue);\n        this.props.fetchReportWorkloadInventory(reportId, page, perPage, column, orderDirection, mappedFilterValue).then(() => {\n            this.setState({\n                page,\n                sortBy: { index, direction }\n            });\n            this.filtersInRowsAndCells();\n        });\n    };\n\n    public onPageChange = (_event: any, page: number, shouldDebounce: boolean) => {\n        this.setState({ page });\n        if (shouldDebounce) {\n            this.changePage();\n        } else {\n            this.refreshData(page);\n        }\n    };\n\n    public onSetPage = (event: any, page: number) => {\n        return event.target.className === 'pf-c-form-control' || this.onPageChange(event, page, false);\n    };\n\n    public onPageInput = (event: any, page: number) => {\n        return this.onPageChange(event, page, true);\n    };\n\n    public onPerPageSelect = (_event: any, perPage: number) => {\n        let page = this.state.page;\n        const total = this.props.reportWorkloadInventory.total;\n\n        // If current page and perPage would request data beyond total, show last available page\n        if (page * perPage > total) {\n            page = Math.floor(total / perPage) + 1;\n        }\n\n        this.setState({ page, perPage });\n        this.refreshData(page, perPage);\n    };\n\n    public onRowCollapse = (_event: any, rowKey: number, isOpen: boolean) => {\n        const { rows } = this.state;\n\n        rows[rowKey].isOpen = isOpen;\n        this.setState({\n            rows\n        });\n    };\n\n    public renderPagination = () => {\n        const { page, perPage } = this.state;\n        const { total } = this.props.reportWorkloadInventory;\n\n        return (\n            <Pagination\n                itemCount={ total }\n                perPage={ perPage }\n                page={ page }\n                onSetPage={ this.onSetPage }\n                onPageInput={ this.onPageInput }\n                onPerPageSelect={ this.onPerPageSelect }\n            />\n        );\n    };\n\n    public renderResultsTable = () => {\n        const { rows, columns, sortBy } = this.state;\n\n        return (\n            <Table\n                aria-label='Workload inventory'\n                onCollapse={ this.onRowCollapse }\n                rows={ rows }\n                cells={ columns }\n                sortBy={ sortBy }\n                onSort={ this.onSort }\n                className=\"table-vertical-align-middle\"\n            >\n                <TableHeader />\n                <TableBody />\n                <tfoot>\n                    <tr>\n                        <td colSpan={ 10 }>\n                            { this.renderPagination() }\n                        </td>\n                    </tr>\n                </tfoot>\n            </Table>\n        );\n    };\n\n    public renderNoResults = () => {\n        return (\n            <React.Fragment>\n                <Card>\n                    <CardBody>\n                        <EmptyState variant={ EmptyStateVariant.full }>\n                            <EmptyStateIcon icon={ SearchIcon } />\n                            <Title headingLevel=\"h5\" size=\"lg\">No results found</Title>\n                            <EmptyStateBody>\n                                No results match the search criteria\n                            </EmptyStateBody>\n                        </EmptyState>\n                    </CardBody>\n                </Card>\n            </React.Fragment>\n        );\n    };\n\n    public renderFilterTypeDropdown = () => {\n        const { filterDropDownOpen, filterType } = this.state;\n        return (\n            <Dropdown\n                position={DropdownPosition.left}\n                className=\"topology-view-filter-dropdown\"\n                toggle={\n                <DropdownToggle onToggle={this.onFilterDropDownToggle}>\n                    <FilterIcon className=\"pf-u-mr-sm\" />\n                    {filterType.name}\n                </DropdownToggle>\n                }\n                isOpen={filterDropDownOpen}\n                dropdownItems={primaryFilters.map((element, index) => {\n                    const onDropdownItemClick = (event) => {\n                        this.onFilterTypeSelect(event, element.name, element.value)\n                    };\n\n                    return (\n                        <DropdownItem key={index} onClick={onDropdownItemClick}>\n                            {element.name}\n                        </DropdownItem>\n                    );\n                })}\n            />\n        );\n    };\n\n    public onFilterDropDownToggle = (isOpen: boolean) => {\n        this.setState({ filterDropDownOpen: isOpen });\n    };\n\n    public onFilterTypeSelect = (e: any, filterName: string, filterValue: FilterTypeKeyEnum) => {\n        e.preventDefault();\n        this.setState({\n            filterType: {\n                name: filterName,\n                value: filterValue\n            },\n            filterDropDownOpen: false,\n            // filterValue: filterType === this.state.filterType ? this.state.filterValue : ''\n        });\n    };\n\n    public renderFilterInput = () => {\n        const { filterType } = this.state;\n        const { reportWorkloadInventoryAvailableFilters } = this.props;\n        if (!reportWorkloadInventoryAvailableFilters) {\n            return;\n        }\n\n        switch(filterType.value) {\n            case FilterTypeKeyEnum.PROVIDER:\n                return this.renderSecondaryFilterDropdown(filterType, reportWorkloadInventoryAvailableFilters.providers);\n            case FilterTypeKeyEnum.DATACENTER:\n                return this.renderSecondaryFilterDropdown(filterType, reportWorkloadInventoryAvailableFilters.datacenters);\n            case FilterTypeKeyEnum.CLUSTER:\n                return this.renderSecondaryFilterDropdown(filterType, reportWorkloadInventoryAvailableFilters.clusters);\n            case FilterTypeKeyEnum.WORKLOAD:\n                return this.renderSecondaryFilterDropdown(filterType, reportWorkloadInventoryAvailableFilters.workloads);\n            case FilterTypeKeyEnum.EFFORT:\n                return this.renderSecondaryFilterDropdown(filterType, reportWorkloadInventoryAvailableFilters.complexities);\n            case FilterTypeKeyEnum.RECOMMENDED_TARGETS_IMS:\n                return this.renderSecondaryFilterDropdown(filterType, reportWorkloadInventoryAvailableFilters.recommendedTargetsIMS);\n            case FilterTypeKeyEnum.FLAGS_IMS:\n                return this.renderSecondaryFilterDropdown(filterType, reportWorkloadInventoryAvailableFilters.flagsIMS);\n            case FilterTypeKeyEnum.VM_NAME:\n                return this.renderSecondaryFilterInputText(filterType);\n            case FilterTypeKeyEnum.OS_NAME:\n                return this.renderSecondaryFilterDropdown(filterType, reportWorkloadInventoryAvailableFilters.osNames);\n            default:\n                return (\n                    <TextInput\n                        type=\"text\"\n                        aria-label=\"filter text input\"\n                        readOnly={true}\n                        placeholder=\"Filter by...\"\n                        value=\"\"\n                    />\n                );\n        }\n    };\n\n    public onSecondaryFilterDropdownToggle = (isExpanded: boolean) => {\n        this.setState({\n            secondaryFilterDropDownOpen: isExpanded\n        });\n    };\n\n    public getMapValue = (key: FilterTypeKeyEnum, map: Map<FilterTypeKeyEnum, string[]>): string[] => {\n        if (!map.has(key)) {\n            map.set(key, []);\n        }\n        return map.get(key) || [];\n    };\n\n    public prepareFiltersToBeSended = (filterValue: Map<FilterTypeKeyEnum, string[]>) => {\n        const mappedFilterValue: Map<string, string[]> = new Map();\n        filterValue.forEach((value: string[], key: FilterTypeKeyEnum) => {\n            let keyFilter: string;\n            switch(key) {\n                case FilterTypeKeyEnum.PROVIDER:\n                    keyFilter = filtersConfig.provider.key;\n                    break;\n                case FilterTypeKeyEnum.DATACENTER:\n                    keyFilter = filtersConfig.datacenter.key;\n                    break;\n                case FilterTypeKeyEnum.CLUSTER:\n                    keyFilter = filtersConfig.cluster.key;\n                    break;\n                case FilterTypeKeyEnum.WORKLOAD:\n                    keyFilter = filtersConfig.workload.key;\n                    break;\n                case FilterTypeKeyEnum.EFFORT:\n                    keyFilter = filtersConfig.effort.key;\n                    break;\n                case FilterTypeKeyEnum.RECOMMENDED_TARGETS_IMS:\n                    keyFilter = filtersConfig.recommendedTargetIMS.key;\n                    break;\n                case FilterTypeKeyEnum.FLAGS_IMS:\n                    keyFilter = filtersConfig.flagIMS.key;\n                    break;\n                case FilterTypeKeyEnum.VM_NAME:\n                    keyFilter = filtersConfig.vmName.key;\n                    break;\n                case FilterTypeKeyEnum.OS_NAME:\n                    keyFilter = filtersConfig.osName.key;\n                    break;\n                default:\n                    keyFilter = key;\n            }\n            mappedFilterValue.set(keyFilter, value);\n        });\n        return mappedFilterValue;\n    }\n\n    public applyFilterAndSearch = (filterValue: Map<FilterTypeKeyEnum, string[]>) => {\n        this.setState({\n            filterValue\n        });\n\n        //\n        const page = 1;\n        const { reportId } = this.props;\n        const { perPage } = this.state;\n        const { direction, index } = this.state.sortBy;\n\n        const column = index ? this.state.columns[index-1].key : undefined;\n        const orderDirection = direction ? direction : undefined;\n\n        const mappedFilterValue = this.prepareFiltersToBeSended(filterValue);\n        this.props.fetchReportWorkloadInventory(reportId, page, perPage, column, orderDirection, mappedFilterValue).then(() => {\n            this.setState({\n                page\n            });\n            this.filtersInRowsAndCells();\n        });\n    };\n\n    public onSecondaryFilterDropdownSelect = (selection: string, filterType: { name: string, value: FilterTypeKeyEnum }) => {\n        const { filterValue } = this.state;\n\n        const currentFilterSelections: string[] = this.getMapValue(filterType.value, filterValue);\n\n        // determine newFilterValue\n        const newFilterValue: Map<FilterTypeKeyEnum, string[]> = new Map(filterValue);\n\n        const previousElement: string | undefined = currentFilterSelections.find((elem: string) => elem === selection);\n        if (previousElement) {\n            newFilterValue.set(filterType.value, currentFilterSelections.filter((elem: string) => elem !== selection));\n        } else {\n            newFilterValue.set(filterType.value, [\n                ...currentFilterSelections,\n                selection\n            ]);\n        }\n\n        this.applyFilterAndSearch(newFilterValue);\n    };\n\n    public renderSecondaryFilterDropdown = (filterType: { name: string, value: FilterTypeKeyEnum }, options: string[]) => {\n        const { secondaryFilterDropDownOpen, filterValue } = this.state;\n        const selections: string[] = this.getMapValue(filterType.value, filterValue);\n\n        if (options.length === 0) {\n            const onEmptySelect = () => {return;};\n            return (\n                <Select\n                    variant={SelectVariant.single}\n                    aria-label={`Select ${filterType.name} Input`}\n                    onToggle={this.onSecondaryFilterDropdownToggle}\n                    onSelect={onEmptySelect}\n                    isExpanded={secondaryFilterDropDownOpen}\n                    placeholderText={`Filter by ${filterType.name}`}\n                    ariaLabelledBy={filterType.name}\n                >\n                    {[\n                        <SelectOption key=\"EmptyKey\" value=\"No values available\" />\n                    ]}\n                </Select>\n            );\n        }\n\n        const onSelect = (event: React.MouseEvent | React.ChangeEvent, value: any) => {\n            this.onSecondaryFilterDropdownSelect(value, filterType);\n        };\n        return (\n            <Select\n                variant={SelectVariant.checkbox}\n                aria-label={`Select ${filterType.name} Input`}\n                onToggle={this.onSecondaryFilterDropdownToggle}\n                onSelect={onSelect}\n                isExpanded={secondaryFilterDropDownOpen}\n                selections={selections}\n                placeholderText={`Filter by ${filterType.name}`}\n                ariaLabelledBy={filterType.name}\n            >\n                {options.map((val, index) => {\n                    return <SelectOption key={index} value={val} />;\n                })}\n            </Select>\n        );\n    };\n\n    public renderSecondaryFilterInputText = (filterType: { name: string, value: FilterTypeKeyEnum }) => {\n        const { filterValue } = this.state;\n\n        const onSubmit = (values: { filterText: string }, { resetForm }) => {\n            const selection = values.filterText;\n            const currentFilterSelections: string[] = this.getMapValue(filterType.value, filterValue);\n\n            // determine newFilterValue\n            const newFilterValue: Map<FilterTypeKeyEnum, string[]> = new Map(filterValue);\n\n            const previousElement: string | undefined = currentFilterSelections.find((elem: string) => elem === selection);\n            if (!previousElement) {\n                newFilterValue.set(filterType.value, [\n                    ...currentFilterSelections,\n                    selection\n                ]);\n\n                this.applyFilterAndSearch(newFilterValue);\n            }\n\n            resetForm();\n        };\n\n        return (\n            <Formik\n                initialValues={ { filterText: '' } }\n                onSubmit={ onSubmit }\n            >\n                {\n                    ({\n                        values,\n                        handleChange,\n                        handleBlur,\n                        handleSubmit\n                    }) =>\n                        {\n                            const customHandleChange = (_value: any, event: any) => {\n                                handleChange(event);\n                            };\n\n                            return (\n                                <Form onSubmit={ handleSubmit }>\n                                    <TextInput\n                                        type=\"search\"\n                                        name=\"filterText\"\n                                        aria-label=\"search text input\"\n                                        onChange={ customHandleChange }\n                                        onBlur={ handleBlur }\n                                        value={ values.filterText }\n                                        placeholder={`Filter by ${filterType.name}...`}\n                                    />\n                                    <Button type=\"submit\" className=\"pf-u-hidden\">Submit</Button>\n                                </Form>\n                            );\n                        }\n                }\n            </Formik>\n        );\n    };\n\n    public deleteChipItem = (filterTypeKey: FilterTypeKeyEnum, element: string) => {\n        const currentFilterValue = this.state.filterValue;\n        const currentChipValues = this.getMapValue(filterTypeKey, this.state.filterValue);\n\n        const newFilterValue = new Map(currentFilterValue);\n        const newChipValues = currentChipValues.filter((e) => e !== element);\n        newFilterValue.set(filterTypeKey, newChipValues);\n\n        this.applyFilterAndSearch(newFilterValue);\n    };\n\n    public clearChips = () => {\n        this.setState({\n            filterType: {\n                name: 'Filter',\n                value: FilterTypeKeyEnum.NONE,\n            }\n        });\n        this.applyFilterAndSearch(new Map());\n    };\n\n    public reportFilterChips = () => {\n        const { filterValue } = this.state;\n\n        const filterValueArray: Array<{key: FilterTypeKeyEnum, value: string[]}> = [];\n        filterValue.forEach((value: string[], key: FilterTypeKeyEnum) => {\n            if (value.length > 0) {\n                filterValueArray.push({\n                    key,\n                    value\n                });\n            }\n        });\n\n        return (\n            <React.Fragment>\n                <ChipGroup withToolbar={true}>\n                    { filterValueArray.map((group) => {\n                        return (\n                            <ChipGroupToolbarItem key={group.key} categoryName={chipLabelsMap.get(group.key)}>\n                                { group.value.map((chip: string) => {\n                                    const onDeleteChipItem = () => {\n                                        this.deleteChipItem(group.key, chip);\n                                    };\n\n                                    return (\n                                        <Chip key={chip} onClick={onDeleteChipItem}>\n                                            {chip}\n                                        </Chip>\n                                    );\n                                })}\n                            </ChipGroupToolbarItem>\n                        );\n                    })}\n                </ChipGroup>\n                {\n                    filterValueArray.length > 0 && <React.Fragment>\n                        &nbsp;<Button variant={ButtonVariant.link} onClick={ this.clearChips }>Clear filters</Button>\n                    </React.Fragment>\n                }\n            </React.Fragment>\n        );\n    };\n\n    public renderWorkloadInventory = () => {\n        const { reportWorkloadInventory } = this.props;\n\n        return (\n            <React.Fragment>\n                { (reportWorkloadInventory. total > 0 ? this.renderResultsTable() : this.renderNoResults()) }\n            </React.Fragment>\n        );\n    };\n\n    public renderWorkloadInventorySkeleton = () => {\n        return (\n            <React.Fragment>\n                <Stack gutter='md'>\n                    <StackItem isFilled={ false }>\n                        <SkeletonTable colSize={ 9 } rowSize={ 10 }/>\n                    </StackItem>\n                </Stack>\n            </React.Fragment>\n        );\n    };\n\n    public renderFetchError = () => {\n        const onRetryClick = () => {\n            this.refreshData();\n        };\n\n        return (\n            <Bullseye>\n                <EmptyState variant={ EmptyStateVariant.large }>\n                    <EmptyStateIcon icon={ ErrorCircleOIcon } />\n                    <Title headingLevel={ TitleLevel.h5 } size=\"lg\">\n                        Error\n                    </Title>\n                    <EmptyStateBody>\n                        Something unexpected happend, please try again!\n                    </EmptyStateBody>\n                    <Button variant=\"primary\" onClick={ onRetryClick }>Retry</Button>\n                </EmptyState>\n            </Bullseye>\n        );\n    };\n\n    public render() {\n        const { isToolbarKebabOpen } = this.state;\n        const {\n            reportWorkloadInventoryFetchStatus,\n            reportWorkloadInventoryAllCSVFetchStatus,\n            reportWorkloadInventoryFilteredCSVFetchStatus\n        } = this.props;\n\n        if (reportWorkloadInventoryFetchStatus.error) {\n            return this.renderFetchError();\n        }\n\n        const isFetchComplete: boolean = reportWorkloadInventoryFetchStatus.status === 'complete';\n\n        return (\n            <React.Fragment>\n                <TableToolbar className=\"pf-u-justify-content-space-between\">\n                    <ToolbarGroup>\n                        <ToolbarItem>{this.renderFilterTypeDropdown()}</ToolbarItem>\n                        <ToolbarItem className=\"pf-u-mr-md\">{this.renderFilterInput()}</ToolbarItem>\n                        <ToolbarItem className=\"pf-u-mr-md\">\n                        <Dropdown\n                            position={'right'}\n                            toggle={<KebabToggle onToggle={this.handleToolbarKebabToggle} />}\n                            isOpen={isToolbarKebabOpen}\n                            isPlain={true}\n                            dropdownItems={[\n                                <DropdownItem key=\"exportAsCSVAll\" component=\"button\" onClick={this.handleDownloadFilteredCSV}>\n                                    Export as CSV\n                                </DropdownItem>,\n                                <DropdownItem key=\"exportAsCSVFiltered\" component=\"button\" onClick={this.handleDownloadAllCSV}>\n                                    Export all as CSV\n                                </DropdownItem>\n                            ]}\n                            disabled={\n                                reportWorkloadInventoryAllCSVFetchStatus.status==='inProgress' ||\n                                reportWorkloadInventoryFilteredCSVFetchStatus.status==='inProgress'\n                            }\n                        />\n                        </ToolbarItem>\n                    </ToolbarGroup>\n                    <ToolbarGroup>\n                        <ToolbarItem>\n                            { this.renderPagination() }\n                        </ToolbarItem>\n                    </ToolbarGroup>\n                </TableToolbar>\n                <TableToolbar className=\"pf-u-justify-content-space-between\">\n                    <ToolbarGroup>\n                        <ToolbarItem>\n                            { this.reportFilterChips() }\n                        </ToolbarItem>\n                    </ToolbarGroup>\n                </TableToolbar>\n                { isFetchComplete ? this.renderWorkloadInventory() : this.renderWorkloadInventorySkeleton() }\n            </React.Fragment>\n        );\n    }\n\n}\n\nexport default WorkloadInventory;\n","export const bytesToGb = value => {\n    return value / (1024 * 1024 * 1024);\n};\n","import React from 'react';\nimport { ReportWorkloadInventory } from '../../../../models';\nimport { formatValue, formatNumber } from '../../../../Utilities/formatValue';\nimport { bytesToGb } from '../../../../Utilities/unitConvertors';\n\nexport interface WorkloadInventoryDetailsProps {\n    reportWorkloadInventory: ReportWorkloadInventory;\n}\n\ninterface State {}\n\nexport class WorkloadInventoryDetails extends React.Component<WorkloadInventoryDetailsProps, State> {\n    constructor(props: WorkloadInventoryDetailsProps) {\n        super(props);\n    }\n\n    public render() {\n        const { reportWorkloadInventory } = this.props;\n\n        return (\n            <div className=\"pf-c-content\">\n                <dl>\n                    <dt>Disk space (GiB)</dt>\n                    <dd>{formatValue(bytesToGb(reportWorkloadInventory.diskSpace), 'gb', { fractionDigits: 1 })}</dd>\n                    <dt>Memory (GiB)</dt>\n                    <dd>{formatValue(bytesToGb(reportWorkloadInventory.memory), 'gb', { fractionDigits: 1 })}</dd>\n                    <dt>CPU cores</dt>\n                    <dd>{formatNumber(reportWorkloadInventory.cpuCores, 0)}</dd>\n                    <dt>Operating system description</dt>\n                    <dd>{reportWorkloadInventory.osDescription}</dd>\n                </dl>\n            </div>\n        );\n    }\n}\n","import { connect } from 'react-redux';\nimport WorkloadInventory from './WorkloadInventory';\nimport { GlobalState } from '../../../models/state';\nimport * as reportActions from '../../../actions/ReportActions';\n\nconst mapStateToProps = (state: GlobalState) => {\n    const {\n        reportWorkloadInventory,\n        reportWorkloadInventoryFetchStatus,\n        reportWorkloadInventoryAllCSVFetchStatus,\n        reportWorkloadInventoryFilteredCSVFetchStatus,\n        reportWorkloadInventoryAvailableFilters,\n        reportWorkloadInventoryAvailableFiltersFetchStatus\n    } = state.reportState;\n    return {\n        reportWorkloadInventory,\n        reportWorkloadInventoryFetchStatus,\n        reportWorkloadInventoryAllCSVFetchStatus,\n        reportWorkloadInventoryFilteredCSVFetchStatus,\n        reportWorkloadInventoryAvailableFilters,\n        reportWorkloadInventoryAvailableFiltersFetchStatus\n    };\n};\n\nconst mapDispatchToProps = {\n    fetchReportWorkloadInventory: reportActions.fetchReportWorkloadInventory,\n    fetchReportWorkloadInventoryAllCSV: reportActions.fetchReportWorkloadInventoryAllCSV,\n    fetchReportWorkloadInventoryFilteredCSV: reportActions.fetchReportWorkloadInventoryFilteredCSV,\n    fetchReportWorkloadInventoryAvailableFilters: reportActions.fetchReportWorkloadInventoryAvailableFilters\n};\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(WorkloadInventory);\n","var isObject = require('./isObject'),\n    now = require('./now'),\n    toNumber = require('./toNumber');\n\n/** Error message constants. */\nvar FUNC_ERROR_TEXT = 'Expected a function';\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMax = Math.max,\n    nativeMin = Math.min;\n\n/**\n * Creates a debounced function that delays invoking `func` until after `wait`\n * milliseconds have elapsed since the last time the debounced function was\n * invoked. The debounced function comes with a `cancel` method to cancel\n * delayed `func` invocations and a `flush` method to immediately invoke them.\n * Provide `options` to indicate whether `func` should be invoked on the\n * leading and/or trailing edge of the `wait` timeout. The `func` is invoked\n * with the last arguments provided to the debounced function. Subsequent\n * calls to the debounced function return the result of the last `func`\n * invocation.\n *\n * **Note:** If `leading` and `trailing` options are `true`, `func` is\n * invoked on the trailing edge of the timeout only if the debounced function\n * is invoked more than once during the `wait` timeout.\n *\n * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\n * until to the next tick, similar to `setTimeout` with a timeout of `0`.\n *\n * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\n * for details over the differences between `_.debounce` and `_.throttle`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Function\n * @param {Function} func The function to debounce.\n * @param {number} [wait=0] The number of milliseconds to delay.\n * @param {Object} [options={}] The options object.\n * @param {boolean} [options.leading=false]\n *  Specify invoking on the leading edge of the timeout.\n * @param {number} [options.maxWait]\n *  The maximum time `func` is allowed to be delayed before it's invoked.\n * @param {boolean} [options.trailing=true]\n *  Specify invoking on the trailing edge of the timeout.\n * @returns {Function} Returns the new debounced function.\n * @example\n *\n * // Avoid costly calculations while the window size is in flux.\n * jQuery(window).on('resize', _.debounce(calculateLayout, 150));\n *\n * // Invoke `sendMail` when clicked, debouncing subsequent calls.\n * jQuery(element).on('click', _.debounce(sendMail, 300, {\n *   'leading': true,\n *   'trailing': false\n * }));\n *\n * // Ensure `batchLog` is invoked once after 1 second of debounced calls.\n * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });\n * var source = new EventSource('/stream');\n * jQuery(source).on('message', debounced);\n *\n * // Cancel the trailing debounced invocation.\n * jQuery(window).on('popstate', debounced.cancel);\n */\nfunction debounce(func, wait, options) {\n  var lastArgs,\n      lastThis,\n      maxWait,\n      result,\n      timerId,\n      lastCallTime,\n      lastInvokeTime = 0,\n      leading = false,\n      maxing = false,\n      trailing = true;\n\n  if (typeof func != 'function') {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n  wait = toNumber(wait) || 0;\n  if (isObject(options)) {\n    leading = !!options.leading;\n    maxing = 'maxWait' in options;\n    maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;\n    trailing = 'trailing' in options ? !!options.trailing : trailing;\n  }\n\n  function invokeFunc(time) {\n    var args = lastArgs,\n        thisArg = lastThis;\n\n    lastArgs = lastThis = undefined;\n    lastInvokeTime = time;\n    result = func.apply(thisArg, args);\n    return result;\n  }\n\n  function leadingEdge(time) {\n    // Reset any `maxWait` timer.\n    lastInvokeTime = time;\n    // Start the timer for the trailing edge.\n    timerId = setTimeout(timerExpired, wait);\n    // Invoke the leading edge.\n    return leading ? invokeFunc(time) : result;\n  }\n\n  function remainingWait(time) {\n    var timeSinceLastCall = time - lastCallTime,\n        timeSinceLastInvoke = time - lastInvokeTime,\n        timeWaiting = wait - timeSinceLastCall;\n\n    return maxing\n      ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke)\n      : timeWaiting;\n  }\n\n  function shouldInvoke(time) {\n    var timeSinceLastCall = time - lastCallTime,\n        timeSinceLastInvoke = time - lastInvokeTime;\n\n    // Either this is the first call, activity has stopped and we're at the\n    // trailing edge, the system time has gone backwards and we're treating\n    // it as the trailing edge, or we've hit the `maxWait` limit.\n    return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||\n      (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));\n  }\n\n  function timerExpired() {\n    var time = now();\n    if (shouldInvoke(time)) {\n      return trailingEdge(time);\n    }\n    // Restart the timer.\n    timerId = setTimeout(timerExpired, remainingWait(time));\n  }\n\n  function trailingEdge(time) {\n    timerId = undefined;\n\n    // Only invoke if we have `lastArgs` which means `func` has been\n    // debounced at least once.\n    if (trailing && lastArgs) {\n      return invokeFunc(time);\n    }\n    lastArgs = lastThis = undefined;\n    return result;\n  }\n\n  function cancel() {\n    if (timerId !== undefined) {\n      clearTimeout(timerId);\n    }\n    lastInvokeTime = 0;\n    lastArgs = lastCallTime = lastThis = timerId = undefined;\n  }\n\n  function flush() {\n    return timerId === undefined ? result : trailingEdge(now());\n  }\n\n  function debounced() {\n    var time = now(),\n        isInvoking = shouldInvoke(time);\n\n    lastArgs = arguments;\n    lastThis = this;\n    lastCallTime = time;\n\n    if (isInvoking) {\n      if (timerId === undefined) {\n        return leadingEdge(lastCallTime);\n      }\n      if (maxing) {\n        // Handle invocations in a tight loop.\n        clearTimeout(timerId);\n        timerId = setTimeout(timerExpired, wait);\n        return invokeFunc(lastCallTime);\n      }\n    }\n    if (timerId === undefined) {\n      timerId = setTimeout(timerExpired, wait);\n    }\n    return result;\n  }\n  debounced.cancel = cancel;\n  debounced.flush = flush;\n  return debounced;\n}\n\nmodule.exports = debounce;\n","/**\n * This method returns the first argument it receives.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Util\n * @param {*} value Any value.\n * @returns {*} Returns `value`.\n * @example\n *\n * var object = { 'a': 1 };\n *\n * console.log(_.identity(object) === object);\n * // => true\n */\nfunction identity(value) {\n  return value;\n}\n\nmodule.exports = identity;\n","var root = require('./_root');\n\n/**\n * Gets the timestamp of the number of milliseconds that have elapsed since\n * the Unix epoch (1 January 1970 00:00:00 UTC).\n *\n * @static\n * @memberOf _\n * @since 2.4.0\n * @category Date\n * @returns {number} Returns the timestamp.\n * @example\n *\n * _.defer(function(stamp) {\n *   console.log(_.now() - stamp);\n * }, _.now());\n * // => Logs the number of milliseconds it took for the deferred invocation.\n */\nvar now = function() {\n  return root.Date.now();\n};\n\nmodule.exports = now;\n","export const extractFilenameFromContentDispositionHeaderValue = (disposition: string) => {\n    let filename = '';\n    if (disposition && disposition.indexOf('attachment') !== -1) {\n        const filenameRegex = /filename[^;=\\n]*=((['\"]).*?\\2|[^;\\n]*)/;\n        const matches = filenameRegex.exec(disposition);\n        if (matches != null && matches[1]) {\n            filename = matches[1].replace(/['\"]/g, '');\n        }\n    }\n\n    return filename;\n};\n\nexport const getFilenameWithoutExtensions = (filename: string) => {\n    return filename.replace(/(\\.[^/.]+)+$/, \"\");\n};\n","exports = module.exports = require(\"../../../../node_modules/css-loader/dist/runtime/api.js\")(false);\n// Module\nexports.push([module.id, \".vertical-align-middle {\\n  vertical-align: middle !important; }\\n\\n.table-vertical-align-middle.pf-c-table tr > *:first-child {\\n  vertical-align: middle !important;\\n  padding-bottom: 20px !important; }\\n\", \"\"]);\n\n"],"sourceRoot":""}