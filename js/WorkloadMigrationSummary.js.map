{"version":3,"sources":["webpack:///./src/SmartComponents/Reports/WorkloadsDetectedTable/WorkloadsDetectedTable.scss?e6cc","webpack:///./src/SmartComponents/Reports/FlagsTable/FlagsTable.scss?ad77","webpack:///./src/PresentationalComponents/Reports/SummaryTable/index.tsx","webpack:///./src/PresentationalComponents/Reports/SummaryTable/SummaryTable.tsx","webpack:///./src/PresentationalComponents/Reports/ScansRunTable/index.tsx","webpack:///./src/PresentationalComponents/Reports/ScansRunTable/ScansRunTable.tsx","webpack:///./src/PresentationalComponents/FetchErrorEmptyState/FetchErrorEmptyState.tsx","webpack:///./src/SmartComponents/Reports/WorkloadsDetectedTable/WorkloadsDetectedTable.tsx","webpack:///./src/SmartComponents/Reports/WorkloadsDetectedTable/index.tsx","webpack:///./src/SmartComponents/Reports/FlagsTable/FlagsTable.tsx","webpack:///./src/SmartComponents/Reports/FlagsTable/index.tsx","webpack:///./src/PresentationalComponents/SolidCard/SolidCard.tsx","webpack:///./src/PresentationalComponents/EmptyCard/EmptyCard.tsx","webpack:///./src/PresentationalComponents/WorkladSummary/JavaRuntimesCard/JavaRuntimesCard.tsx","webpack:///./src/PresentationalComponents/WorkladSummary/ApplicationPlatformsCard/ApplicationPlatformsCard.tsx","webpack:///./src/PresentationalComponents/WorkladSummary/OSInformation/OSInformation.tsx","webpack:///./src/pages/ReportView/WorkloadSummary/WorkloadSummary.tsx","webpack:///./src/pages/ReportView/WorkloadSummary/index.tsx","webpack:///./src/PresentationalComponents/Reports/SummaryTable/SummaryTable.scss","webpack:///./src/SmartComponents/Reports/WorkloadsDetectedTable/WorkloadsDetectedTable.scss","webpack:///./src/SmartComponents/Reports/FlagsTable/FlagsTable.scss","webpack:///./src/PresentationalComponents/Reports/SummaryTable/SummaryTable.scss?a016"],"names":["content","module","i","options","transform","undefined","update","locals","exports","hot","accept","newContent","a","b","key","idx","Error","dispose","props","state","columns","render","summary","totalHosts","totalSockets","totalClusters","totalVms","rows","map","element","hosts","sockets","clusters","vms","provider","product","version","Fragment","Table","cells","variant","compact","borders","className","colSpan","scanRuns","target","smartStateEnabled","Date","date","FetchErrorEmptyState","onRetry","Bullseye","EmptyState","large","EmptyStateIcon","icon","Title","headingLevel","h5","size","EmptyStateBody","Button","onClick","changePage","refreshData","page","perPage","direction","index","this","reportId","fetchReportWorkloadsDetected","column","filtersInRowsAndCells","items","reportWorkloadsDetected","Object","values","length","row","workload","osName","setState","onSort","event","orderDirection","sortBy","onPageChange","_event","shouldDebounce","onSetPage","onPageInput","onPerPageSelect","total","Math","floor","renderPagination","Pagination","itemCount","renderResultsTable","renderNoResults","full","renderTable","renderTableSkeleton","colSize","rowSize","renderFetchError","title","transforms","cellWidth","sortable","componentDidMount","reportWorkloadsDetectedFetchStatus","error","isFetchComplete","status","Component","mapDispatchToProps","fetchReportFlags","allFlags","reportFlags","flagAssessmentModel","find","flag","flagLabel","assessment","fetchAllFlagAssessments","componentDidUpdate","prevProps","reportFlagsFetchStatus","flagAssessment","allFlagsFetchStatus","description","width","Card","style","CardBody","EmptyCard","cardTitle","message","minHeight","cardHeader","modifiers","xl","height","small","JavaRuntimesCard","reportWorkloadSummary","javaRuntimes","orderedJavaRuntimes","sort","vendor","Number","localeCompare","pieValues","reduce","percentages","val","chartProps","subTitle","chartData","label","value","extraData","ReportCard","skipBullseye","Grid","gutter","GridItem","FancyChartDonut","data","tickFormat","tooltipFormat","datum","x","y","recommendedTargetsIMSModel","openjdk","ApplicationPlatformsCard","applicationPlatforms","orderedApplicationPlatforms","name","jbosseap","OSInformation","osInformation","orderedOsInformation","osFamily","priority","padding","bottom","left","right","top","rhel","sumReducer","fetchReportWorkloadSummary","then","isCurrentFetchReportWorkloadSummaryCompletedSuccessfully","catch","renderErrorCard","renderSummary","summaryModels","renderMigrationComplexity","complexity","complexityModel","easy","medium","hard","unknown","unsupported","Tooltip","position","renderTargetRecommendation","recommendedTargetsIMS","rhv","osp","ocp","renderWorkloadsDetectedTable","renderOSInformation","renderJavaRuntimes","renderApplicationPlatforms","renderFlagsTable","renderScansRun","scanRunModels","renderReports","Stack","StackItem","isFilled","renderReportSkeleton","reportWorkloadSummaryFetchStatus","push"],"mappings":"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","file":"js/WorkloadMigrationSummary.js","sourcesContent":["\nvar content = require(\"!!../../../../node_modules/css-loader/dist/cjs.js!../../../../node_modules/sass-loader/lib/loader.js!./WorkloadsDetectedTable.scss\");\n\nif(typeof content === 'string') content = [[module.id, content, '']];\n\nvar transform;\nvar insertInto;\n\n\n\nvar options = {\"hmr\":true}\n\noptions.transform = transform\noptions.insertInto = undefined;\n\nvar update = require(\"!../../../../node_modules/style-loader/lib/addStyles.js\")(content, options);\n\nif(content.locals) module.exports = content.locals;\n\nif(module.hot) {\n\tmodule.hot.accept(\"!!../../../../node_modules/css-loader/dist/cjs.js!../../../../node_modules/sass-loader/lib/loader.js!./WorkloadsDetectedTable.scss\", function() {\n\t\tvar newContent = require(\"!!../../../../node_modules/css-loader/dist/cjs.js!../../../../node_modules/sass-loader/lib/loader.js!./WorkloadsDetectedTable.scss\");\n\n\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\n\t\tvar locals = (function(a, b) {\n\t\t\tvar key, idx = 0;\n\n\t\t\tfor(key in a) {\n\t\t\t\tif(!b || a[key] !== b[key]) return false;\n\t\t\t\tidx++;\n\t\t\t}\n\n\t\t\tfor(key in b) idx--;\n\n\t\t\treturn idx === 0;\n\t\t}(content.locals, newContent.locals));\n\n\t\tif(!locals) throw new Error('Aborting CSS HMR due to changed css-modules locals.');\n\n\t\tupdate(newContent);\n\t});\n\n\tmodule.hot.dispose(function() { update(); });\n}","\nvar content = require(\"!!../../../../node_modules/css-loader/dist/cjs.js!../../../../node_modules/sass-loader/lib/loader.js!./FlagsTable.scss\");\n\nif(typeof content === 'string') content = [[module.id, content, '']];\n\nvar transform;\nvar insertInto;\n\n\n\nvar options = {\"hmr\":true}\n\noptions.transform = transform\noptions.insertInto = undefined;\n\nvar update = require(\"!../../../../node_modules/style-loader/lib/addStyles.js\")(content, options);\n\nif(content.locals) module.exports = content.locals;\n\nif(module.hot) {\n\tmodule.hot.accept(\"!!../../../../node_modules/css-loader/dist/cjs.js!../../../../node_modules/sass-loader/lib/loader.js!./FlagsTable.scss\", function() {\n\t\tvar newContent = require(\"!!../../../../node_modules/css-loader/dist/cjs.js!../../../../node_modules/sass-loader/lib/loader.js!./FlagsTable.scss\");\n\n\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\n\t\tvar locals = (function(a, b) {\n\t\t\tvar key, idx = 0;\n\n\t\t\tfor(key in a) {\n\t\t\t\tif(!b || a[key] !== b[key]) return false;\n\t\t\t\tidx++;\n\t\t\t}\n\n\t\t\tfor(key in b) idx--;\n\n\t\t\treturn idx === 0;\n\t\t}(content.locals, newContent.locals));\n\n\t\tif(!locals) throw new Error('Aborting CSS HMR due to changed css-modules locals.');\n\n\t\tupdate(newContent);\n\t});\n\n\tmodule.hot.dispose(function() { update(); });\n}","import SummaryTable from './SummaryTable';\n\nexport default SummaryTable;\n","import React, { Component } from 'react';\nimport {\n    Table,\n    TableBody,\n    TableVariant,\n    ICell,\n    TableHeader\n} from '@patternfly/react-table';\nimport { formatNumber } from '../../../Utilities/formatValue';\nimport { Summary } from '../../../models';\nimport './SummaryTable.scss';\nimport { isNullOrUndefined } from '../../../Utilities/formUtils';\n\ninterface Props {\n    summary: Summary[];\n}\n\ninterface State {\n    columns: Array<ICell | string>;\n}\n\nclass SummaryTable extends Component<Props, State> {\n\n    constructor(props: Props) {\n        super(props);\n        this.state = {\n            columns: [\n                'Provider',\n                'Product',\n                'Version',\n                'Hosts',\n                'Sockets',\n                'Clusters',\n                'VMs'\n            ]\n        };\n    }\n\n    public render() {\n        const { columns } = this.state;\n        const { summary } = this.props;\n\n        let totalHosts = 0;\n        let totalSockets = 0;\n        let totalClusters = 0;\n        let totalVms = 0;\n\n        const rows = summary.map((element) => {\n            totalHosts += (element.hosts || 0);\n            totalSockets += (element.sockets || 0);\n            totalClusters += (element.clusters || 0);\n            totalVms += (element.vms || 0);\n\n            return [\n                !isNullOrUndefined(element.provider) ? element.provider : '',\n                !isNullOrUndefined(element.product) ? element.product : '',\n                !isNullOrUndefined(element.version) ? element.version : '',\n                !isNullOrUndefined(element.hosts) ? formatNumber(element.hosts, 0) : '',\n                !isNullOrUndefined(element.sockets) ? formatNumber(element.sockets, 0) : '',\n                !isNullOrUndefined(element.clusters) ? formatNumber(element.clusters, 0) : '',\n                !isNullOrUndefined(element.vms) ? formatNumber(element.vms, 0) : '',\n            ];\n        });\n\n        return (\n            <React.Fragment>\n                <Table\n                    aria-label='Summary table'\n                    cells={ columns }\n                    rows={ rows }\n                    variant={ TableVariant.compact }\n                    borders={ false }\n                >\n                    <TableHeader />\n                    <TableBody />\n                    <tfoot>\n                        <tr className=\"summary-table-footer\">\n                            <td colSpan={ 3 }>\n                                <strong>Total</strong>\n                            </td>\n                            <td>\n                                <strong>{ formatNumber(totalHosts, 0) }</strong>\n                            </td>\n                            <td>\n                                <strong>{ formatNumber(totalSockets, 0) }</strong>\n                            </td>\n                            <td>\n                                <strong>{ formatNumber(totalClusters, 0) }</strong>\n                            </td>\n                            <td>\n                                <strong>{ formatNumber(totalVms, 0) }</strong>\n                            </td>\n                        </tr>\n                    </tfoot>\n                </Table>\n            </React.Fragment>\n        );\n    }\n}\n\nexport default SummaryTable;\n","import ScansRunTable from './ScansRunTable';\n\nexport default ScansRunTable;\n","import React, { Component } from 'react';\nimport {\n    Table,\n    TableBody,\n    TableVariant,\n    ICell,\n    TableHeader\n} from '@patternfly/react-table';\nimport { formatDate } from '../../../Utilities/formatValue';\nimport { ScanRunModel } from '../../../models';\n\nexport interface Props {\n    scanRuns: ScanRunModel[];\n}\n\ninterface State {\n    columns: Array<ICell | string>;\n}\n\nclass ScansRunTable extends Component<Props, State> {\n\n    constructor(props: Props) {\n        super(props);\n        this.state = {\n            columns: [\n                'Target',\n                'Type',\n                'Date'\n            ]\n        };\n    }\n\n    public render() {\n        const { columns } = this.state;\n        const { scanRuns } = this.props;\n\n        const rows = scanRuns.map((element) => {\n            return [\n                element.target,\n                element.smartStateEnabled ? 'Virt Platform + SmartState' : 'Virt Platform',\n                formatDate(new Date(element.date), false)\n            ];\n        });\n\n        return (\n            <React.Fragment>\n                <Table\n                    aria-label='Scans run table'\n                    cells={ columns }\n                    rows={ rows }\n                    variant={ TableVariant.compact }\n                    borders={ false }\n                >\n                    <TableHeader />\n                    <TableBody />                    \n                </Table>\n            </React.Fragment>\n        );\n    }\n}\n\nexport default ScansRunTable;\n","import React from 'react';\nimport {\n    Bullseye,\n    EmptyState,\n    EmptyStateIcon,\n    Title,\n    EmptyStateBody,\n    Button,\n    EmptyStateVariant,\n    TitleLevel\n} from '@patternfly/react-core';\nimport { ErrorCircleOIcon } from '@patternfly/react-icons';\n\nexport interface FetchErrorEmptyStateProps {\n    onRetry: () => void;\n}\n\nexport const FetchErrorEmptyState: React.FC<FetchErrorEmptyStateProps> = ({ onRetry }) => {\n    return (\n        <Bullseye>\n            <EmptyState variant={EmptyStateVariant.large}>\n                <EmptyStateIcon icon={ErrorCircleOIcon} />\n                <Title headingLevel={TitleLevel.h5} size=\"lg\">\n                    Error\n                </Title>\n                <EmptyStateBody>Something unexpected happend, please try again!</EmptyStateBody>\n                <Button variant=\"primary\" onClick={onRetry}>\n                    Retry\n                </Button>\n            </EmptyState>\n        </Bullseye>\n    );\n};\n","import React from 'react';\nimport {\n    TableToolbar,\n    SkeletonTable\n} from '@redhat-cloud-services/frontend-components';\nimport {\n    Table,\n    TableHeader,\n    TableBody,\n    ICell,\n    IRow,\n    sortable,\n    ISortBy,\n    cellWidth,\n    TableVariant\n} from '@patternfly/react-table';\nimport {\n    Pagination,\n    Bullseye,\n    EmptyState,\n    EmptyStateIcon,\n    EmptyStateVariant,\n    Title,\n    EmptyStateBody} from '@patternfly/react-core';\nimport { SearchIcon } from '@patternfly/react-icons';\nimport { WorkloadModel } from '../../../models';\nimport { ObjectFetchStatus } from '../../../models/state';\nimport debounce from 'lodash/debounce';\nimport { formatNumber } from '../../../Utilities/formatValue';\nimport './WorkloadsDetectedTable.scss';\nimport { isNullOrUndefined } from '../../../Utilities/formUtils';\nimport { FetchErrorEmptyState } from '../../../PresentationalComponents/FetchErrorEmptyState';\n\ninterface StateToProps {\n    reportWorkloadsDetected: {\n        total: number;\n        items: WorkloadModel[]\n    };\n    reportWorkloadsDetectedFetchStatus: ObjectFetchStatus;\n}\n\ninterface DispatchToProps {\n    fetchReportWorkloadsDetected: (\n        reportId: number,\n        page: number,\n        perPage: number,\n        orderBy: string | undefined,\n        orderDirection: 'asc' | 'desc' | undefined\n    ) => any;\n}\n\nexport interface WorkloadsDetectedTableProps extends StateToProps, DispatchToProps {\n    reportId: number;\n};\n\ninterface Column extends ICell {\n    key: string;\n    cellFormatters?: any;\n    transforms?: any;\n}\n\ninterface State {\n    page: number;\n    perPage: number;\n    columns: Column[];\n    rows: IRow[];\n    sortBy: ISortBy;\n};\n\nexport class WorkloadsDetectedTable extends React.Component<WorkloadsDetectedTableProps, State> {\n\n    public changePage = debounce(() => {\n        this.refreshData();\n    }, 800);\n\n    constructor(props: WorkloadsDetectedTableProps) {\n        super(props);\n        this.state = {\n            page: 1,\n            perPage: 10,\n            columns: [\n                {\n                    title: 'Workloads',\n                    key: 'workload',\n                    props: { },\n                    transforms: [ cellWidth('25'), sortable ]\n                },\n                {\n                    title: 'OS',\n                    key: 'osName',\n                    props: { },\n                    transforms: [ cellWidth('25'), sortable ]\n                },\n                {\n                    title: 'In Clusters',\n                    key: 'clusters',\n                    props: { },\n                    transforms: [ cellWidth('25') ]\n                },\n                {\n                    title: 'VMs',\n                    key: 'vms',\n                    props: { },\n                    transforms: [ cellWidth('25'), sortable ]\n                }\n            ],\n            rows: [],\n            sortBy: { }\n        };\n    }\n\n    public componentDidMount() {\n        this.refreshData();\n    }\n\n    public refreshData = async (\n        page: number = this.state.page,\n        perPage: number = this.state.perPage,\n        { direction, index } = this.state.sortBy\n    ) => {\n        const { reportId, fetchReportWorkloadsDetected } = this.props;\n\n        const column = index ? this.state.columns[index].key : undefined;\n        const orderDirection = direction ? direction : undefined;\n        \n        await fetchReportWorkloadsDetected(reportId, page, perPage, column, orderDirection);\n        this.filtersInRowsAndCells();\n    }\n\n    public filtersInRowsAndCells = () => {\n        const items: WorkloadModel[] = this.props.reportWorkloadsDetected.items\n            ? Object.values(this.props.reportWorkloadsDetected.items) : [];\n\n        let rows: IRow[] = [];\n        if (items.length > 0) {\n            rows = items.map((row: WorkloadModel) => {\n                return {\n                    cells: [\n                        row.workload ? row.workload : '',\n                        row.osName ? row.osName : '',\n                        !isNullOrUndefined(row.clusters) ? formatNumber(row.clusters, 0) : '',\n                        !isNullOrUndefined(row.vms) ? formatNumber(row.vms, 0) : ''\n                    ]\n                };\n            });\n        }\n\n        this.setState({ rows });\n    }\n\n    /**\n     * Allways will reset the page to 1\n     */\n    public onSort = async (event: any, index: number, direction: any) => {\n        const page = 1;\n        const { reportId } = this.props;\n        const { perPage } = this.state;\n\n        const column = index ? this.state.columns[index].key : undefined;\n        const orderDirection = direction ? direction : undefined;\n        \n        await this.props.fetchReportWorkloadsDetected(reportId, page, perPage, column, orderDirection);\n        this.setState({\n            page,\n            sortBy: { index, direction }\n        }, () => {\n            this.filtersInRowsAndCells();\n        });\n    }\n\n    public onPageChange = (_event: any, page: number, shouldDebounce: boolean) => {\n        this.setState({ page });\n        if (shouldDebounce) {\n            this.changePage();\n        } else {\n            this.refreshData(page);\n        }\n    };\n\n    public onSetPage = (event: any, page: number) => {\n        return event.target.className === 'pf-c-form-control' || this.onPageChange(event, page, false);\n    };\n\n    public onPageInput = (event: any, page: number) => {\n        return this.onPageChange(event, page, true);\n    };\n\n    public onPerPageSelect = (_event: any, perPage: number) => {\n        let page = this.state.page;\n        const total = this.props.reportWorkloadsDetected.total;\n\n        // If current page and perPage would request data beyond total, show last available page\n        if (page * perPage > total) {\n            page = Math.floor(total / perPage) + 1;\n        }\n\n        this.setState({ page, perPage });\n        this.refreshData(page, perPage);\n    };\n\n    public renderPagination = () => {\n        const { page, perPage } = this.state;\n        const { total } = this.props.reportWorkloadsDetected;\n\n        return (\n            <Pagination\n                itemCount={ total }\n                perPage={ perPage }\n                page={ page }\n                onSetPage={ this.onSetPage }\n                onPageInput={ this.onPageInput }\n                onPerPageSelect={ this.onPerPageSelect }\n            />\n        );\n    };\n\n    public renderResultsTable = () => {\n        const { rows, columns, sortBy } = this.state;\n\n        return (\n            <Table\n                aria-label='Workloads detected'\n                cells={ columns }\n                rows={ rows }\n                sortBy={ sortBy }\n                onSort={ this.onSort }\n                variant={ TableVariant.compact }\n                borders={ false }\n            >\n                <TableHeader />\n                <TableBody />\n                <tfoot>\n                    <tr className=\"workloads-detected-table-footer\">\n                        <td colSpan={ 10 }>\n                            { this.renderPagination() }\n                        </td>\n                    </tr>\n                </tfoot>\n            </Table>\n        );\n    };\n\n    public renderNoResults = () => {\n        return (\n            <React.Fragment>\n                <Bullseye>\n                    <EmptyState variant={ EmptyStateVariant.full }>\n                        <EmptyStateIcon icon={ SearchIcon } />\n                        <Title headingLevel=\"h5\" size=\"lg\">No results found</Title>\n                        <EmptyStateBody>\n                            No results match the search criteria\n                        </EmptyStateBody>\n                    </EmptyState>\n                </Bullseye>\n            </React.Fragment>\n        );\n    };\n\n    public renderTable = () => {\n        const { reportWorkloadsDetected } = this.props;\n\n        return (\n            <React.Fragment>\n                { (reportWorkloadsDetected.total > 0 ? this.renderResultsTable() : this.renderNoResults()) }\n            </React.Fragment>\n        );\n    };\n\n    public renderTableSkeleton = () => {\n        return (\n            <SkeletonTable colSize={ 4 } rowSize={ 5 }/>\n        );\n    };\n\n    public renderFetchError = () => {\n        return (\n            <FetchErrorEmptyState onRetry={this.refreshData} />\n        );\n    };\n\n    public render() {\n        const { reportWorkloadsDetectedFetchStatus } = this.props;\n\n        if (reportWorkloadsDetectedFetchStatus.error) {\n            return this.renderFetchError();\n        }\n\n        const isFetchComplete: boolean = reportWorkloadsDetectedFetchStatus.status === 'complete';\n\n        return (\n            <React.Fragment>\n                { isFetchComplete ? this.renderTable() : this.renderTableSkeleton() }\n            </React.Fragment>\n        );\n    }\n\n}\n","import { connect } from 'react-redux';\nimport { WorkloadsDetectedTable } from './WorkloadsDetectedTable';\nimport { GlobalState } from '../../../models/state';\nimport * as reportActions from '../../../actions/ReportActions';\n\nconst mapStateToProps = (state: GlobalState) => {\n    const {\n        reportWorkloadsDetected,\n        reportWorkloadsDetectedFetchStatus,\n    } = state.reportState;\n    return {\n        reportWorkloadsDetected,\n        reportWorkloadsDetectedFetchStatus,\n    };\n};\n\nconst mapDispatchToProps = {\n    fetchReportWorkloadsDetected: reportActions.fetchReportWorkloadsDetected\n};\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps,\n)(WorkloadsDetectedTable);\n","import React from 'react';\nimport {\n    TableToolbar,\n    SkeletonTable\n} from '@redhat-cloud-services/frontend-components';\nimport {\n    Table,\n    TableHeader,\n    TableBody,\n    ICell,\n    IRow,\n    sortable,\n    ISortBy,\n    cellWidth,\n    TableVariant\n} from '@patternfly/react-table';\nimport {\n    Pagination,\n    Bullseye,\n    EmptyState,\n    EmptyStateIcon,\n    EmptyStateVariant,\n    Title,\n    EmptyStateBody} from '@patternfly/react-core';\nimport { SearchIcon } from '@patternfly/react-icons';\nimport { FlagModel, FlagAssessmentModel } from '../../../models';\nimport { ObjectFetchStatus } from '../../../models/state';\nimport debounce from 'lodash/debounce';\nimport { formatNumber } from '../../../Utilities/formatValue';\nimport './FlagsTable.scss';\nimport { isNullOrUndefined } from '../../../Utilities/formUtils';\nimport { FetchErrorEmptyState } from '../../../PresentationalComponents/FetchErrorEmptyState';\n\ninterface StateToProps {\n    reportFlags: {\n        total: number;\n        items: FlagModel[]\n    };\n    reportFlagsFetchStatus: ObjectFetchStatus;\n    allFlags: FlagAssessmentModel[],\n    allFlagsFetchStatus: ObjectFetchStatus;\n}\n\ninterface DispatchToProps {\n    fetchReportFlags: (\n        reportId: number,\n        page: number,\n        perPage: number,\n        orderBy: string | undefined,\n        orderDirection: 'asc' | 'desc' | undefined\n    ) => any;\n    fetchAllFlagAssessments: () => any;\n}\n\nexport interface FlagsTableProps extends StateToProps, DispatchToProps {\n    reportId: number;\n};\n\ninterface Column extends ICell {\n    key: string;\n    cellFormatters?: any;\n    transforms?: any;\n}\n\ninterface State {\n    page: number;\n    perPage: number;\n    columns: Column[];\n    rows: IRow[];\n    sortBy: ISortBy;\n};\n\nexport class FlagsTable extends React.Component<FlagsTableProps, State> {\n\n    public changePage = debounce(() => {\n        this.refreshData();\n    }, 800);\n\n    constructor(props: FlagsTableProps) {\n        super(props);\n        this.state = {\n            page: 1,\n            perPage: 10,\n            columns: [\n                {\n                    title: 'Flags',\n                    key: 'flag',\n                    props: { },\n                    transforms: [ sortable ]\n                },\n                {\n                    title: 'Assessment',\n                    key: 'assessment',\n                    props: { },\n                    transforms: [ ]\n                },\n                {\n                    title: 'OS',\n                    key: 'osName',\n                    props: { },\n                    transforms: [ cellWidth('10'), sortable ]\n                },\n                {\n                    title: 'In Clusters',\n                    key: 'clusters',\n                    props: { },\n                    transforms: []\n                },\n                {\n                    title: 'In VMs',\n                    key: 'vms',\n                    props: { },\n                    transforms: [ sortable ]\n                }\n            ],\n            rows: [],\n            sortBy: { }\n        };\n    }\n\n    public componentDidMount() {\n        const { allFlags, fetchAllFlagAssessments } = this.props;\n        \n        // Fetch Flag-Assessment column\n        // Fetch all Flags just once and the reuse the value from redux\n        if (!allFlags || allFlags.length === 0) {\n            fetchAllFlagAssessments();\n        }\n\n        this.refreshData();\n    }\n\n    public componentDidUpdate(prevProps: FlagsTableProps) {\n        if (prevProps.allFlags !== this.props.allFlags) {\n            this.filtersInRowsAndCells();\n        }\n    }\n\n    public refreshData = async (\n        page: number = this.state.page,\n        perPage: number = this.state.perPage,\n        { direction, index } = this.state.sortBy\n    ) => {\n        const { reportId, fetchReportFlags } = this.props;\n\n        const column = index ? this.state.columns[index].key : undefined;\n        const orderDirection = direction ? direction : undefined;\n\n        await fetchReportFlags(reportId, page, perPage, column, orderDirection);\n        fetchReportFlags(reportId, page, perPage, column, orderDirection);\n        this.filtersInRowsAndCells();\n    }\n\n    public filtersInRowsAndCells = () => {\n        const { allFlags, reportFlags } = this.props;\n        const items: FlagModel[] = reportFlags.items ? Object.values(reportFlags.items) : [];\n\n        let rows: IRow[] = [];\n        if (items.length > 0) {\n            rows = items.map((row: FlagModel) => {\n                let flagAssessmentModel = allFlags.find((element: FlagAssessmentModel) => {\n                    return (element.flag === row.flag && element.osName === row.osName)\n                });\n                \n                if (!flagAssessmentModel) {\n                    flagAssessmentModel = allFlags.find((element: FlagAssessmentModel) => {\n                        return (element.flag === row.flag && element.osName === '')\n                    }); \n                }\n\n                return {\n                    cells: [\n                        flagAssessmentModel ? flagAssessmentModel.flagLabel : row.flag,\n                        flagAssessmentModel ? flagAssessmentModel.assessment : '',\n                        row.osName ? row.osName : '',\n                        !isNullOrUndefined(row.clusters) ? formatNumber(row.clusters, 0) : '',\n                        !isNullOrUndefined(row.vms) ? formatNumber(row.vms, 0) : ''\n                    ]\n                };\n            });\n        }\n\n        this.setState({ rows });\n    }\n\n    /**\n     * Allways will reset the page to 1\n     */\n    public onSort = async (event: any, index: number, direction: any) => {\n        const page = 1;\n        const { reportId } = this.props;\n        const { perPage } = this.state;\n\n        const column = index ? this.state.columns[index].key : undefined;\n        const orderDirection = direction ? direction : undefined;\n        \n        await this.props.fetchReportFlags(reportId, page, perPage, column, orderDirection);\n        this.setState({\n            page,\n            sortBy: { index, direction }\n        }, () => {\n            this.filtersInRowsAndCells();\n        });\n    }\n\n    public onPageChange = (_event: any, page: number, shouldDebounce: boolean) => {\n        this.setState({ page });\n        if (shouldDebounce) {\n            this.changePage();\n        } else {\n            this.refreshData(page);\n        }\n    };\n\n    public onSetPage = (event: any, page: number) => {\n        return event.target.className === 'pf-c-form-control' || this.onPageChange(event, page, false);\n    };\n\n    public onPageInput = (event: any, page: number) => {\n        return this.onPageChange(event, page, true);\n    };\n\n    public onPerPageSelect = (_event: any, perPage: number) => {\n        let page = this.state.page;\n        const total = this.props.reportFlags.total;\n\n        // If current page and perPage would request data beyond total, show last available page\n        if (page * perPage > total) {\n            page = Math.floor(total / perPage) + 1;\n        }\n\n        this.setState({ page, perPage });\n        this.refreshData(page, perPage);\n    };\n\n    public renderPagination = () => {\n        const { page, perPage } = this.state;\n        const { total } = this.props.reportFlags;\n\n        return (\n            <Pagination\n                itemCount={ total }\n                perPage={ perPage }\n                page={ page }\n                onSetPage={ this.onSetPage }\n                onPageInput={ this.onPageInput }\n                onPerPageSelect={ this.onPerPageSelect }\n            />\n        );\n    };\n\n    public renderResultsTable = () => {\n        const { rows, columns, sortBy } = this.state;\n\n        return (\n            <Table\n                aria-label='Workloads detected'\n                cells={ columns }\n                rows={ rows }\n                sortBy={ sortBy }\n                onSort={ this.onSort }\n                variant={ TableVariant.compact }\n                borders={ false }\n            >\n                <TableHeader />\n                <TableBody />\n                <tfoot>\n                    <tr className=\"flags-table-footer\">\n                        <td colSpan={ 10 }>\n                            { this.renderPagination() }\n                        </td>\n                    </tr>\n                </tfoot>\n            </Table>\n        );\n    };\n\n    public renderNoResults = () => {\n        return (\n            <React.Fragment>\n                <Bullseye>\n                    <EmptyState variant={ EmptyStateVariant.full }>\n                        <EmptyStateIcon icon={ SearchIcon } />\n                        <Title headingLevel=\"h5\" size=\"lg\">No results found</Title>\n                        <EmptyStateBody>\n                            No results match the search criteria\n                        </EmptyStateBody>\n                    </EmptyState>\n                </Bullseye>\n            </React.Fragment>\n        );\n    };\n\n    public renderTable = () => {\n        const { reportFlags } = this.props;\n\n        return (\n            <React.Fragment>\n                { (reportFlags.total > 0 ? this.renderResultsTable() : this.renderNoResults()) }\n            </React.Fragment>\n        );\n    };\n\n    public renderTableSkeleton = () => {\n        return (\n            <SkeletonTable colSize={ 5 } rowSize={ 5 }/>\n        );\n    };\n\n    public renderFetchError = () => {\n        return (\n            <FetchErrorEmptyState onRetry={this.refreshData} />\n        );\n    };\n\n    public render() {\n        const { reportFlagsFetchStatus } = this.props;\n\n        if (reportFlagsFetchStatus.error) {\n            return this.renderFetchError();\n        }\n\n        const isFetchComplete: boolean = reportFlagsFetchStatus.status === 'complete';\n\n        return (\n            <React.Fragment>\n                { isFetchComplete ? this.renderTable() : this.renderTableSkeleton() }\n            </React.Fragment>\n        );\n    }\n\n}\n","import { connect } from 'react-redux';\nimport { FlagsTable } from './FlagsTable';\nimport { GlobalState } from '../../../models/state';\nimport * as reportActions from '../../../actions/ReportActions';\nimport * as mappingActions from '../../../actions/MappingsActions';\n\nconst mapStateToProps = (state: GlobalState) => {\n    const {\n        reportFlags,\n        reportFlagsFetchStatus\n    } = state.reportState;\n    const {\n        flagAssessment: {\n            allFlags,\n            allFlagsFetchStatus\n        }\n    } = state.mappingsState;\n    return {\n        reportFlags,\n        reportFlagsFetchStatus,\n        allFlags,\n        allFlagsFetchStatus\n    };\n};\n\nconst mapDispatchToProps = {\n    fetchReportFlags: reportActions.fetchReportFlags,\n    fetchAllFlagAssessments: mappingActions.fetchAllFlagAssessments\n};\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(FlagsTable);\n","import React from 'react';\nimport { Card, CardBody } from '@patternfly/react-core';\n\ninterface Props {\n    title: string;\n    description: string;\n    width?: number;\n}\n\ninterface State {}\n\nexport class SolidCard extends React.Component<Props, State> {\n    constructor(props: Props) {\n        super(props);\n    }\n\n    public render() {\n        const { title, description, width } = this.props;\n\n        return (\n            <Card className=\"xa-c-card-solid\" style={width ? { width } : undefined}>\n                <CardBody>\n                    <h2 className=\"pf-c-title pf-m-3xl\">{title}</h2>\n                    <p>{description}</p>\n                </CardBody>\n            </Card>\n        );\n    }\n}\n","import React from 'react';\nimport {\n    Card,\n    CardBody,\n    Bullseye,\n    EmptyState,\n    EmptyStateVariant,\n    EmptyStateIcon,\n    Title,\n    EmptyStateBody\n} from '@patternfly/react-core';\nimport { SearchIcon } from '@patternfly/react-icons';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/Card/card';\nimport titleStyles from '@patternfly/react-styles/css/components/Title/title';\n\ninterface Props {\n    cardTitle: string | React.ReactElement;\n    message: string;\n    description?: string;\n    minHeight?: number;\n}\n\nexport const EmptyCard: React.FC<Props> = ({ cardTitle, message, description, minHeight }) => {\n    return (\n        <Card>\n            <div className={css(styles.cardHeader, titleStyles.title, titleStyles.modifiers.xl)}>{cardTitle}</div>\n            <CardBody style={minHeight ? { height: minHeight } : undefined}>\n                <Bullseye>\n                    <EmptyState variant={EmptyStateVariant.small}>\n                        <EmptyStateIcon icon={SearchIcon} />\n                        <Title headingLevel=\"h6\" size=\"lg\">\n                            {message}\n                        </Title>\n                        {description && <EmptyStateBody>{description}</EmptyStateBody>}\n                    </EmptyState>\n                </Bullseye>\n            </CardBody>\n        </Card>\n    );\n};\n","import React from 'react';\nimport { Bullseye, GridItem, Grid } from '@patternfly/react-core';\nimport ReportCard from '../../ReportCard';\nimport { ReportWorkloadSummary, JavaRuntimeModel } from '../../../models';\nimport FancyChartDonut from '../../FancyChartDonut';\nimport { FancyChartDonutData } from '../../FancyChartDonut/FancyChartDonut';\nimport { formatNumber, formatPercentage } from '../../../Utilities/formatValue';\nimport { EmptyCard } from '../../EmptyCard';\nimport { SolidCard } from '../../../PresentationalComponents/SolidCard';\n\ninterface Props {\n    reportWorkloadSummary: ReportWorkloadSummary | null;\n}\n\nexport const JavaRuntimesCard: React.FC<Props> = ({ reportWorkloadSummary }) => {\n    const title = 'Oracle Java runtimes information';\n\n    if (\n        !reportWorkloadSummary ||\n        !reportWorkloadSummary.javaRuntimes ||\n        reportWorkloadSummary.javaRuntimes.length === 0\n    ) {\n        return (\n            <EmptyCard\n                cardTitle={title}\n                message=\"No instances found\"\n                description=\"No instances of Oracle JDKs have been discovered.\"\n            />\n        );\n    }\n\n    const javaRuntimes = reportWorkloadSummary.javaRuntimes;\n\n    const orderedJavaRuntimes = javaRuntimes.sort((a: JavaRuntimeModel, b: JavaRuntimeModel) => {\n        if (a.vendor === b.vendor) {\n            return Number(a.version) - Number(b.version);\n        }\n        return a.vendor.localeCompare(b.vendor);\n    });\n\n    //\n    const pieValues = orderedJavaRuntimes.map(element => element.total);\n\n    const total = pieValues.reduce((a: number, b: number) => a + b, 0);\n    const percentages = pieValues.map((val: number) => val / total);\n\n    const chartProps = {\n        title: formatNumber(total, 0),\n        subTitle: 'Total'\n    };\n\n    const chartData: FancyChartDonutData[] = orderedJavaRuntimes.map((element, index: number) => ({\n        label: `${element.vendor} JDK ${element.version}`,\n        value: percentages[index],\n        extraData: pieValues[index]\n    }));\n\n    const tickFormat = (label: string, value: number, data: any) => {\n        return `${label}: ${data}`;\n    };\n    const tooltipFormat = ({ datum }) =>\n        `${datum.x}: ${formatPercentage(datum.y, 2)} \\n Total: ${formatNumber(datum.extraData, 0)}`;\n\n    return (\n        <ReportCard title={title} skipBullseye={true}>\n            <Grid gutter=\"sm\" xl={6}>\n                <GridItem>\n                    <Bullseye>\n                        <FancyChartDonut\n                            data={chartData}\n                            chartProps={chartProps}\n                            tickFormat={tickFormat}\n                            tooltipFormat={tooltipFormat}\n                        />\n                    </Bullseye>\n                </GridItem>\n                <GridItem>\n                    <Bullseye>\n                        <SolidCard\n                            title={`${reportWorkloadSummary.recommendedTargetsIMSModel.openjdk || 0} OpenJDK`}\n                            description=\"Oracle JDKs that can be replaced with OpenJDK\"\n                            width={510}\n                        />\n                    </Bullseye>                    \n                </GridItem>\n            </Grid>\n        </ReportCard>\n    );\n};\n","import React from 'react';\nimport { Bullseye, Grid, GridItem } from '@patternfly/react-core';\nimport ReportCard from '../../ReportCard';\nimport { ReportWorkloadSummary, ApplicationPlatformModel } from '../../../models';\nimport FancyChartDonut from '../../FancyChartDonut';\nimport { FancyChartDonutData } from '../../FancyChartDonut/FancyChartDonut';\nimport { formatNumber, formatPercentage } from '../../../Utilities/formatValue';\nimport { EmptyCard } from '../../EmptyCard';\nimport { SolidCard } from '../../../PresentationalComponents/SolidCard';\n\ninterface Props {\n    reportWorkloadSummary: ReportWorkloadSummary | null;\n}\n\nexport const ApplicationPlatformsCard: React.FC<Props> = ({ reportWorkloadSummary }) => {\n    const title = 'Application platforms information';\n\n    if (\n        !reportWorkloadSummary ||\n        !reportWorkloadSummary.applicationPlatforms ||\n        reportWorkloadSummary.applicationPlatforms.length === 0\n    ) {\n        return (\n            <EmptyCard\n                cardTitle={title}\n                message=\"No app platforms found\"\n                description=\"No application platforms have been discovered.\"\n            />\n        );\n    }\n\n    const applicationPlatforms = reportWorkloadSummary.applicationPlatforms;\n\n    const orderedApplicationPlatforms = applicationPlatforms.sort(\n        (a: ApplicationPlatformModel, b: ApplicationPlatformModel) => {\n            return a.name.localeCompare(b.name);\n        }\n    );\n\n    //\n    const pieValues = orderedApplicationPlatforms.map(element => element.total);\n\n    const total = pieValues.reduce((a: number, b: number) => a + b, 0);\n    const percentages = pieValues.map((val: number) => val / total);\n\n    const chartProps = {\n        title: formatNumber(total, 0),\n        subTitle: 'Total'\n    };\n\n    const chartData: FancyChartDonutData[] = orderedApplicationPlatforms.map((element, index: number) => ({\n        label: `${element.name}`,\n        value: percentages[index],\n        extraData: pieValues[index]\n    }));\n\n    const tickFormat = (label: string, value: number, data: any) => {\n        return `${label}: ${data}`;\n    };\n    const tooltipFormat = ({ datum }) =>\n        `${datum.x}: ${formatPercentage(datum.y, 2)} \\n Total: ${formatNumber(datum.extraData, 0)}`;\n\n    return (\n        <ReportCard title={title} skipBullseye={true}>\n            <Grid gutter=\"sm\" xl={6}>\n                <GridItem>\n                    <Bullseye>\n                        <FancyChartDonut\n                            data={chartData}\n                            chartProps={chartProps}\n                            tickFormat={tickFormat}\n                            tooltipFormat={tooltipFormat}\n                        />\n                    </Bullseye>\n                </GridItem>\n                <GridItem>\n                    <Bullseye>\n                        <SolidCard\n                            title={`${reportWorkloadSummary.recommendedTargetsIMSModel.jbosseap || 0} JBoss EAP`}\n                            description=\"App platforms that can be replatformed with JBoss EAP\"\n                            width={510}\n                        />\n                    </Bullseye>\n                </GridItem>\n            </Grid>\n        </ReportCard>\n    );\n};\n","import React from 'react';\nimport { Bullseye, Grid, GridItem } from '@patternfly/react-core';\nimport ReportCard from '../../ReportCard';\nimport { ReportWorkloadSummary, OSInformationModel } from '../../../models';\nimport FancyChartDonut from '../../FancyChartDonut';\nimport { FancyChartDonutData } from '../../FancyChartDonut/FancyChartDonut';\nimport { formatNumber, formatPercentage } from '../../../Utilities/formatValue';\nimport { EmptyCard } from '../../EmptyCard';\nimport { SolidCard } from '../../SolidCard';\n\ninterface Props {\n    reportWorkloadSummary: ReportWorkloadSummary | null;\n}\n\nexport const OSInformation: React.FC<Props> = ({ reportWorkloadSummary }) => {\n    const title = 'OS Information';\n\n    if (\n        !reportWorkloadSummary ||\n        !reportWorkloadSummary.osInformation ||\n        reportWorkloadSummary.osInformation.length === 0\n    ) {\n        return (\n            <EmptyCard cardTitle={title} message=\"Not enough data\" description=\"Could not extract OS Information.\" />\n        );\n    }\n\n    const osInformation = reportWorkloadSummary.osInformation;\n\n    const orderedOsInformation = osInformation.sort((a: OSInformationModel, b: OSInformationModel) => {\n        if (a.osFamily === b.osFamily) {\n            return (Number(b.version) || 0) - (Number(a.version) || 0);\n        } else if (a.priority || b.priority) {\n            return (b.priority || 0) - (a.priority || 0);\n        }\n        return b.osFamily.localeCompare(a.osFamily);\n    });\n\n    //\n    const pieValues = orderedOsInformation.map(element => element.total);\n\n    const total = pieValues.reduce((a: number, b: number) => a + b, 0);\n    const percentages = pieValues.map((val: number) => val / total);\n\n    const chartProps = {\n        title: formatNumber(total, 0),\n        subTitle: 'Total',\n        padding: {\n            bottom: 20,\n            left: 20,\n            right: 165, // Adjusted to accommodate legend\n            top: 20\n        }\n    };\n\n    const chartData: FancyChartDonutData[] = orderedOsInformation.map((element, index: number) => ({\n        label: `${element.osFamily}`,\n        value: percentages[index],\n        extraData: pieValues[index]\n    }));\n\n    const tickFormat = (label: string, value: number, data: any) => {\n        return `${label}: ${data}`;\n    };\n    const tooltipFormat = ({ datum }) =>\n        `${datum.x}: ${formatPercentage(datum.y, 2)} \\n Total: ${formatNumber(datum.extraData, 0)}`;\n\n    return (\n        <ReportCard title={title} skipBullseye={true}>\n            <Grid gutter=\"sm\" xl={6}>\n                <GridItem>\n                    <Bullseye>\n                        <FancyChartDonut\n                            data={chartData}\n                            chartProps={chartProps}\n                            tickFormat={tickFormat}\n                            tooltipFormat={tooltipFormat}\n                        />\n                    </Bullseye>\n                </GridItem>\n                <GridItem>\n                    <Bullseye>\n                        <SolidCard\n                            title={`${reportWorkloadSummary.recommendedTargetsIMSModel.rhel || 0} RHEL`}\n                            description=\"OS instances that can be converted to Red Hat Enterprise Linux\"\n                            width={510}\n                        />\n                    </Bullseye>\n                </GridItem>\n            </Grid>\n        </ReportCard>\n    );\n};\n","import React from 'react';\nimport {\n    Skeleton,\n    SkeletonTable\n} from '@redhat-cloud-services/frontend-components';\nimport {\n    Bullseye,\n    EmptyState,\n    EmptyStateIcon,\n    EmptyStateVariant,\n    Title,\n    EmptyStateBody,\n    Button,\n    TitleLevel,\n    Stack,\n    StackItem,\n    Tooltip\n} from '@patternfly/react-core';\nimport { ErrorCircleOIcon, HelpIcon } from '@patternfly/react-icons';\nimport ReportCard from '../../../PresentationalComponents/ReportCard';\nimport SummaryTable from '../../../PresentationalComponents/Reports/SummaryTable';\nimport FancyChartDonut from '../../../PresentationalComponents/FancyChartDonut';\nimport { FancyChartDonutData } from '../../../PresentationalComponents/FancyChartDonut/FancyChartDonut';\nimport { formatPercentage, formatNumber } from '../../../Utilities/formatValue';\nimport ScansRunTable from '../../../PresentationalComponents/Reports/ScansRunTable';\nimport WorkloadsDetectedTable from '../../../SmartComponents/Reports/WorkloadsDetectedTable';\nimport FlagsTable from '../../../SmartComponents/Reports/FlagsTable';\nimport { SolidCard } from '../../../PresentationalComponents/SolidCard';\nimport { ObjectFetchStatus } from '../../../models/state';\nimport { ReportWorkloadSummary } from '../../../models';\nimport { JavaRuntimesCard } from '../../../PresentationalComponents/WorkladSummary/JavaRuntimesCard';\nimport { EmptyCard } from '../../../PresentationalComponents/EmptyCard';\nimport { ApplicationPlatformsCard } from '../../../PresentationalComponents/WorkladSummary/ApplicationPlatformsCard';\nimport { OSInformation } from '../../../PresentationalComponents/WorkladSummary/OSInformation';\n\ninterface StateToProps {\n    reportWorkloadSummary: ReportWorkloadSummary | null;\n    reportWorkloadSummaryFetchStatus: ObjectFetchStatus;\n}\n\ninterface DispatchToProps {\n    fetchReportWorkloadSummary: (reportId: number) => any;\n}\n\nexport interface WorkloadMigrationSummaryProps extends StateToProps, DispatchToProps {\n    reportId: number;\n};\n\ninterface State {\n    isCurrentFetchReportWorkloadSummaryCompletedSuccessfully: boolean;\n};\n\nconst sumReducer = (a: number, b: number) => a + b;\n\nexport class WorkloadMigrationSummary extends React.Component<WorkloadMigrationSummaryProps, State> {\n\n    constructor(props: WorkloadMigrationSummaryProps) {\n        super(props);\n        this.state = {\n            isCurrentFetchReportWorkloadSummaryCompletedSuccessfully: false\n        };\n    }\n\n    public componentDidMount() {\n        this.refreshData();\n    }\n\n    public refreshData = () => {\n        const { reportId, fetchReportWorkloadSummary } = this.props;\n        fetchReportWorkloadSummary(reportId).then(() => {\n            this.setState({ isCurrentFetchReportWorkloadSummaryCompletedSuccessfully: true });\n        }).catch(() => {\n            this.setState({ isCurrentFetchReportWorkloadSummaryCompletedSuccessfully: false });\n        });\n    };\n\n    public renderErrorCard = (cardTitle: string | React.ReactElement) => {\n        return <EmptyCard cardTitle={cardTitle} message=\"Not enought data to show this card\"/>;\n    };\n\n    public renderSummary = () => {\n        const { reportWorkloadSummary } = this.props;\n        const title=\"Summary\";\n\n        if (!reportWorkloadSummary) {\n            return this.renderErrorCard(title);\n        }\n\n        // TODO this validation was created when Models were not complete in the backend\n        // It should be safe to remove this\n        const summary = reportWorkloadSummary.summaryModels;\n        if (!summary) {\n            return this.renderErrorCard(title);\n        }\n\n        return (\n            <ReportCard title={title}>\n                <SummaryTable summary={ summary } />\n            </ReportCard>\n        );\n    };\n\n    public renderMigrationComplexity = () => {\n        const { reportWorkloadSummary } = this.props;\n        const title=\"VM migration assessment\";\n\n        if (!reportWorkloadSummary) {\n            return this.renderErrorCard(title);\n        }\n\n        // TODO this validation was created when Models were not complete in the backend\n        // It should be safe to remove this\n        const complexity = reportWorkloadSummary.complexityModel;\n        if (!complexity) {\n            return this.renderErrorCard(title);\n        }\n\n        //\n        const pieValues = [\n            complexity.easy || 0,\n            complexity.medium  || 0,\n            complexity.hard  || 0,\n            complexity.unknown  || 0,\n            complexity.unsupported  || 0\n        ];\n\n        const total = pieValues.reduce(sumReducer, 0);\n        const percentages = pieValues.map((val: number) => val / total);\n\n        const chartProps = {\n            title: formatNumber(total, 0),\n            subTitle: 'Total VMs'\n        };\n\n        const chartData: FancyChartDonutData[] = [\n            { label: 'Easy', value: percentages[0], extraData: pieValues[0] },\n            { label: 'Medium', value: percentages[1], extraData: pieValues[1] },\n            { label: 'Hard', value: percentages[2], extraData: pieValues[2] },\n            { label: 'Unknown', value: percentages[3], extraData: pieValues[3] },\n            { label: 'Unsupported', value: percentages[4], extraData: pieValues[4] }\n        ];\n\n        const tickFormat = (label: string, value: number, data: any) => `${label}: ${formatPercentage(value, 2)}`;\n        const tooltipFormat = ({datum}) => `${datum.x}: ${formatPercentage(datum.y, 2)} \\n VMs: ${formatNumber(datum.extraData, 0)}`;\n\n        return (\n            <ReportCard\n                title={\n                    <span>\n                        <span>{title}</span>&nbsp;\n                        <span>\n                            <Tooltip\n                                position=\"top\"\n                                content={\n                                    <div>Data based on the number of flags found per VM</div>\n                                }\n                            >\n                                <HelpIcon />\n                            </Tooltip>\n                        </span>\n                    </span>\n                }\n            >\n                <FancyChartDonut\n                    data={ chartData }\n                    chartProps={ chartProps }\n                    tickFormat={ tickFormat }\n                    tooltipFormat={ tooltipFormat }\n                />\n            </ReportCard>\n        );\n    };\n\n    public renderTargetRecommendation = () => {\n        const { reportWorkloadSummary } = this.props;\n        const title=\"Target recommendation\";\n\n        if (!reportWorkloadSummary) {\n            return this.renderErrorCard(title);\n        }\n\n        // TODO this validation was created when Models were not complete in the backend\n        // It should be safe to remove this\n        const recommendedTargetsIMS = reportWorkloadSummary.recommendedTargetsIMSModel;\n        if (!recommendedTargetsIMS) {\n            return this.renderErrorCard(title);\n        }\n\n        const values = [\n            recommendedTargetsIMS.rhv || 0,\n            recommendedTargetsIMS.osp || 0,\n            recommendedTargetsIMS.rhel || 0,\n            recommendedTargetsIMS.ocp || 0\n        ];\n        const total = recommendedTargetsIMS.total;\n        const percentages = values.map((val: number) => val / total);\n\n        return (\n            <ReportCard title={title} skipBullseye={true}>\n                <div className=\"pf-l-grid pf-m-all-6-col-on-md pf-m-all-4-col-on-lg pf-m-gutter\">\n                    <SolidCard\n                        title={`${formatPercentage(percentages[0], 0)} RHV`}\n                        description=\"Workloads suitable for Red Hat Virtualization\"\n                    />\n                    <SolidCard\n                        title={`${formatPercentage(percentages[1], 0)} OSP`}\n                        description=\"Workloads could be running on Red Hat OpenStack Platform\"\n                    />\n                    {/* <SolidCard\n                        title={`${formatPercentage(percentages[2], 0)} RHEL`}\n                        description=\"Workloads possible to migrate to Red Hat Enterprise Linux\"\n                    /> */}\n                    <SolidCard\n                        title={`${formatPercentage(percentages[3], 0)} OCP`}\n                        description=\"Workloads targeted for OpenShift virtualization\"\n                    />\n                </div>\n            </ReportCard>\n        );\n    };\n\n    public renderWorkloadsDetectedTable = () => {\n        const { reportId } = this.props;\n\n        return (\n            <ReportCard\n                title='Workloads detected'\n                skipBullseye={ true }\n            >\n                <WorkloadsDetectedTable reportId={ reportId } />\n            </ReportCard>\n        );\n    };\n\n    public renderOSInformation = () => {\n        const { reportWorkloadSummary } = this.props;\n        return <OSInformation reportWorkloadSummary={reportWorkloadSummary} />;\n    }\n\n    public renderJavaRuntimes = () => {\n        const { reportWorkloadSummary } = this.props;\n        return <JavaRuntimesCard reportWorkloadSummary={reportWorkloadSummary} />;\n    }\n\n    public renderApplicationPlatforms = () => {\n        const { reportWorkloadSummary } = this.props;\n        return <ApplicationPlatformsCard reportWorkloadSummary={reportWorkloadSummary} />;\n    }\n    \n    public renderFlagsTable = () => {\n        const { reportId } = this.props;\n\n        return (\n            <ReportCard\n                title='Flags (factors that could increase migration complexity)'\n                skipBullseye={ true }\n            >\n                <FlagsTable reportId={ reportId }/>\n            </ReportCard>\n        );\n    };\n\n    public renderScansRun = () => {\n        const { reportWorkloadSummary } = this.props;\n        const title=\"Scans run\";\n\n        if (!reportWorkloadSummary) {\n            return this.renderErrorCard(title);\n        }\n\n        // TODO this validation was created when Models were not complete in the backend\n        // It should be safe to remove this\n        const scanRuns = reportWorkloadSummary.scanRunModels;\n        if (!scanRuns) {\n            return this.renderErrorCard(title);\n        }\n\n        return (\n            <ReportCard title={title}>\n                <ScansRunTable\n                    scanRuns={ scanRuns }\n                />\n            </ReportCard>\n        );\n    };\n\n    public renderReports = () => {\n        return (\n            <React.Fragment>\n                <Stack gutter='md'>\n                    <StackItem isFilled={ false }>\n                        { this.renderSummary() }\n                    </StackItem>\n                    <StackItem isFilled={ false }>\n                        { this.renderTargetRecommendation() }\n                    </StackItem>\n                    <StackItem isFilled={ false }>\n                        { this.renderMigrationComplexity() }\n                    </StackItem>\n                    <StackItem isFilled={ false }>\n                        { this.renderFlagsTable() }\n                    </StackItem>\n                    <StackItem isFilled={ false }>\n                        { this.renderOSInformation() }\n                    </StackItem>\n                    <StackItem isFilled={ false }>\n                        { this.renderJavaRuntimes() }\n                    </StackItem>\n                    <StackItem>\n                        { this.renderApplicationPlatforms() }\n                    </StackItem>\n                    <StackItem isFilled={ false }>\n                        { this.renderWorkloadsDetectedTable() }\n                    </StackItem>\n                    <StackItem isFilled={ false }>\n                        { this.renderScansRun() }\n                    </StackItem>\n                </Stack>\n            </React.Fragment>\n        );\n    };\n\n    public renderReportSkeleton = () => {\n        return (\n            <React.Fragment>\n                <Stack gutter='md'>\n                    <StackItem isFilled={ false }>\n                        <ReportCard\n                            title={ <Skeleton size=\"sm\" /> }\n                        >\n                            <SkeletonTable colSize={ 7 } rowSize={ 3 }/>\n                        </ReportCard>\n                    </StackItem>\n                    <StackItem isFilled={ false }>\n                        <ReportCard\n                            title={ <Skeleton size=\"sm\" /> }\n                        >\n                            <Skeleton size=\"sm\" style={ { height: '300px' } }/>\n                        </ReportCard>\n                    </StackItem>\n                    <StackItem isFilled={ false }>\n                        <ReportCard\n                            title={ <Skeleton size=\"sm\" /> }\n                        >\n                            <SkeletonTable colSize={ 3 } rowSize={ 1  }/>\n                        </ReportCard>\n                    </StackItem>\n                </Stack>\n            </React.Fragment>\n        );\n    };\n\n    public renderFetchError = () => {\n        return (\n            <Bullseye>\n                <EmptyState variant={ EmptyStateVariant.large }>\n                    <EmptyStateIcon icon={ ErrorCircleOIcon } />\n                    <Title headingLevel={ TitleLevel.h5 } size=\"lg\">\n                        Error\n                    </Title>\n                    <EmptyStateBody>\n                        Something unexpected happend, please try again!\n                    </EmptyStateBody>\n                    <Button variant=\"primary\" onClick={ this.refreshData }>Retry</Button>\n                </EmptyState>\n            </Bullseye>\n        );\n    };\n\n    public render() {\n        const { isCurrentFetchReportWorkloadSummaryCompletedSuccessfully } = this.state;\n        const { reportWorkloadSummary, reportWorkloadSummaryFetchStatus } = this.props;\n\n        const isFetchComplete: boolean = reportWorkloadSummaryFetchStatus.status === 'complete';\n\n        if (reportWorkloadSummaryFetchStatus.error || (isFetchComplete && !reportWorkloadSummary)) {\n            return this.renderFetchError();\n        }\n\n        return (\n            <React.Fragment>\n                { isFetchComplete && isCurrentFetchReportWorkloadSummaryCompletedSuccessfully ? this.renderReports() : this.renderReportSkeleton() }\n            </React.Fragment>\n        );\n    }\n}\n","import { connect } from 'react-redux';\nimport { WorkloadMigrationSummary } from './WorkloadSummary';\nimport { GlobalState } from '../../../models/state';\nimport * as reportActions from '../../../actions/ReportActions';\n\nconst mapStateToProps = (state: GlobalState)  => {\n    const {\n        reportWorkloadSummary,\n        reportWorkloadSummaryFetchStatus\n    } = state.reportState;\n    return {\n        reportWorkloadSummary,\n        reportWorkloadSummaryFetchStatus\n    };\n};\n\nconst mapDispatchToProps = {\n    fetchReportWorkloadSummary: reportActions.fetchReportWorkloadSummary\n};\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(WorkloadMigrationSummary);\n","exports = module.exports = require(\"../../../../node_modules/css-loader/dist/runtime/api.js\")(false);\n// Module\nexports.push([module.id, \".summary-table-footer {\\n  border-bottom: 0 !important; }\\n\", \"\"]);\n\n","exports = module.exports = require(\"../../../../node_modules/css-loader/dist/runtime/api.js\")(false);\n// Module\nexports.push([module.id, \".workloads-detected-table-footer {\\n  height: 1px;\\n  border-top: var(--pf-c-table--BorderWidth) solid var(--pf-c-table--BorderColor);\\n  border-bottom: 0 !important; }\\n\", \"\"]);\n\n","exports = module.exports = require(\"../../../../node_modules/css-loader/dist/runtime/api.js\")(false);\n// Module\nexports.push([module.id, \".flags-table-footer {\\n  height: 1px;\\n  border-top: var(--pf-c-table--BorderWidth) solid var(--pf-c-table--BorderColor);\\n  border-bottom: 0 !important; }\\n\", \"\"]);\n\n","\nvar content = require(\"!!../../../../node_modules/css-loader/dist/cjs.js!../../../../node_modules/sass-loader/lib/loader.js!./SummaryTable.scss\");\n\nif(typeof content === 'string') content = [[module.id, content, '']];\n\nvar transform;\nvar insertInto;\n\n\n\nvar options = {\"hmr\":true}\n\noptions.transform = transform\noptions.insertInto = undefined;\n\nvar update = require(\"!../../../../node_modules/style-loader/lib/addStyles.js\")(content, options);\n\nif(content.locals) module.exports = content.locals;\n\nif(module.hot) {\n\tmodule.hot.accept(\"!!../../../../node_modules/css-loader/dist/cjs.js!../../../../node_modules/sass-loader/lib/loader.js!./SummaryTable.scss\", function() {\n\t\tvar newContent = require(\"!!../../../../node_modules/css-loader/dist/cjs.js!../../../../node_modules/sass-loader/lib/loader.js!./SummaryTable.scss\");\n\n\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\n\t\tvar locals = (function(a, b) {\n\t\t\tvar key, idx = 0;\n\n\t\t\tfor(key in a) {\n\t\t\t\tif(!b || a[key] !== b[key]) return false;\n\t\t\t\tidx++;\n\t\t\t}\n\n\t\t\tfor(key in b) idx--;\n\n\t\t\treturn idx === 0;\n\t\t}(content.locals, newContent.locals));\n\n\t\tif(!locals) throw new Error('Aborting CSS HMR due to changed css-modules locals.');\n\n\t\tupdate(newContent);\n\t});\n\n\tmodule.hot.dispose(function() { update(); });\n}"],"sourceRoot":""}