{"version":3,"sources":["webpack:///./src/SmartComponents/Reports/WorkloadsDetectedTable/WorkloadsDetectedTable.scss?e6cc","webpack:///./src/SmartComponents/Reports/FlagsTable/FlagsTable.scss?ad77","webpack:///./src/PresentationalComponents/Reports/SummaryTable/index.tsx","webpack:///./src/PresentationalComponents/Reports/SummaryTable/SummaryTable.tsx","webpack:///./src/PresentationalComponents/Reports/ScansRunTable/index.tsx","webpack:///./src/PresentationalComponents/Reports/ScansRunTable/ScansRunTable.tsx","webpack:///./src/SmartComponents/Reports/WorkloadsDetectedTable/WorkloadsDetectedTable.tsx","webpack:///./src/SmartComponents/Reports/WorkloadsDetectedTable/index.tsx","webpack:///./src/SmartComponents/Reports/FlagsTable/FlagsTable.tsx","webpack:///./src/SmartComponents/Reports/FlagsTable/index.tsx","webpack:///./src/PresentationalComponents/SolidCard/SolidCard.tsx","webpack:///./src/pages/ReportView/WorkloadSummary/WorkloadSummary.tsx","webpack:///./src/pages/ReportView/WorkloadSummary/index.tsx","webpack:///./src/PresentationalComponents/Reports/SummaryTable/SummaryTable.scss","webpack:///./src/SmartComponents/Reports/WorkloadsDetectedTable/WorkloadsDetectedTable.scss","webpack:///./src/SmartComponents/Reports/FlagsTable/FlagsTable.scss","webpack:///./src/PresentationalComponents/Reports/SummaryTable/SummaryTable.scss?a016"],"names":["content","module","i","options","transform","undefined","update","locals","exports","hot","accept","newContent","a","b","key","idx","Error","dispose","props","state","columns","render","summary","totalHosts","totalSockets","totalClusters","totalVms","rows","map","element","hosts","sockets","clusters","vms","provider","product","version","Fragment","Table","cells","variant","compact","borders","className","colSpan","scanRuns","target","smartStateEnabled","Date","date","changePage","refreshData","page","perPage","direction","index","reportId","fetchReportWorkloadsDetected","then","filtersInRowsAndCells","items","reportWorkloadsDetected","Object","values","length","row","workload","osName","setState","onSort","event","column","orderDirection","sortBy","onPageChange","_event","shouldDebounce","onSetPage","onPageInput","onPerPageSelect","total","Math","floor","renderPagination","Pagination","itemCount","renderResultsTable","renderNoResults","Bullseye","EmptyState","full","EmptyStateIcon","icon","Title","headingLevel","size","EmptyStateBody","renderTable","renderTableSkeleton","colSize","rowSize","renderFetchError","large","h5","Button","onClick","title","transforms","cellWidth","sortable","componentDidMount","this","reportWorkloadsDetectedFetchStatus","error","isFetchComplete","status","ToolbarGroup","ToolbarItem","Component","mapDispatchToProps","fetchReportFlags","allFlags","reportFlags","flagAssessmentModel","find","flag","flagLabel","assessment","fetchAllFlagAssessments","componentDidUpdate","prevProps","reportFlagsFetchStatus","flagAssessment","allFlagsFetchStatus","description","Card","CardBody","sumReducer","fetchReportWorkloadSummary","isCurrentFetchReportWorkloadSummaryCompletedSuccessfully","catch","renderErrorCard","ReportCard","renderSummary","reportWorkloadSummary","summaryModels","renderMigrationComplexity","complexity","complexityModel","pieValues","easy","medium","hard","unknown","unsupported","reduce","percentages","val","chartProps","subTitle","height","width","chartData","label","value","extraData","FancyChartDonut","data","chartLegendProps","responsive","y","tickFormat","tooltipFormat","datum","x","renderTargetRecommendation","recommendedTargetsIMS","recommendedTargetsIMSModel","rhv","osp","rhel","ocp","skipBullseye","renderWorkloadsDetectedTable","renderWorkloadsDetected","workloadsDetectedOSTypeModels","renderFlagsTable","renderScansRun","scanRunModels","renderReports","Stack","gutter","StackItem","isFilled","renderReportSkeleton","style","reportWorkloadSummaryFetchStatus","push"],"mappings":"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","file":"js/WorkloadMigrationSummary.js","sourcesContent":["\nvar content = require(\"!!../../../../node_modules/css-loader/dist/cjs.js!../../../../node_modules/sass-loader/lib/loader.js!./WorkloadsDetectedTable.scss\");\n\nif(typeof content === 'string') content = [[module.id, content, '']];\n\nvar transform;\nvar insertInto;\n\n\n\nvar options = {\"hmr\":true}\n\noptions.transform = transform\noptions.insertInto = undefined;\n\nvar update = require(\"!../../../../node_modules/style-loader/lib/addStyles.js\")(content, options);\n\nif(content.locals) module.exports = content.locals;\n\nif(module.hot) {\n\tmodule.hot.accept(\"!!../../../../node_modules/css-loader/dist/cjs.js!../../../../node_modules/sass-loader/lib/loader.js!./WorkloadsDetectedTable.scss\", function() {\n\t\tvar newContent = require(\"!!../../../../node_modules/css-loader/dist/cjs.js!../../../../node_modules/sass-loader/lib/loader.js!./WorkloadsDetectedTable.scss\");\n\n\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\n\t\tvar locals = (function(a, b) {\n\t\t\tvar key, idx = 0;\n\n\t\t\tfor(key in a) {\n\t\t\t\tif(!b || a[key] !== b[key]) return false;\n\t\t\t\tidx++;\n\t\t\t}\n\n\t\t\tfor(key in b) idx--;\n\n\t\t\treturn idx === 0;\n\t\t}(content.locals, newContent.locals));\n\n\t\tif(!locals) throw new Error('Aborting CSS HMR due to changed css-modules locals.');\n\n\t\tupdate(newContent);\n\t});\n\n\tmodule.hot.dispose(function() { update(); });\n}","\nvar content = require(\"!!../../../../node_modules/css-loader/dist/cjs.js!../../../../node_modules/sass-loader/lib/loader.js!./FlagsTable.scss\");\n\nif(typeof content === 'string') content = [[module.id, content, '']];\n\nvar transform;\nvar insertInto;\n\n\n\nvar options = {\"hmr\":true}\n\noptions.transform = transform\noptions.insertInto = undefined;\n\nvar update = require(\"!../../../../node_modules/style-loader/lib/addStyles.js\")(content, options);\n\nif(content.locals) module.exports = content.locals;\n\nif(module.hot) {\n\tmodule.hot.accept(\"!!../../../../node_modules/css-loader/dist/cjs.js!../../../../node_modules/sass-loader/lib/loader.js!./FlagsTable.scss\", function() {\n\t\tvar newContent = require(\"!!../../../../node_modules/css-loader/dist/cjs.js!../../../../node_modules/sass-loader/lib/loader.js!./FlagsTable.scss\");\n\n\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\n\t\tvar locals = (function(a, b) {\n\t\t\tvar key, idx = 0;\n\n\t\t\tfor(key in a) {\n\t\t\t\tif(!b || a[key] !== b[key]) return false;\n\t\t\t\tidx++;\n\t\t\t}\n\n\t\t\tfor(key in b) idx--;\n\n\t\t\treturn idx === 0;\n\t\t}(content.locals, newContent.locals));\n\n\t\tif(!locals) throw new Error('Aborting CSS HMR due to changed css-modules locals.');\n\n\t\tupdate(newContent);\n\t});\n\n\tmodule.hot.dispose(function() { update(); });\n}","import SummaryTable from './SummaryTable';\n\nexport default SummaryTable;\n","import React, { Component } from 'react';\nimport {\n    Table,\n    TableBody,\n    TableVariant,\n    ICell,\n    TableHeader\n} from '@patternfly/react-table';\nimport { formatNumber } from '../../../Utilities/formatValue';\nimport { Summary } from '../../../models';\nimport './SummaryTable.scss';\nimport { isNullOrUndefined } from '../../../Utilities/formUtils';\n\ninterface Props {\n    summary: Summary[];\n}\n\ninterface State {\n    columns: Array<ICell | string>;\n}\n\nclass SummaryTable extends Component<Props, State> {\n\n    constructor(props: Props) {\n        super(props);\n        this.state = {\n            columns: [\n                'Provider',\n                'Product',\n                'Version',\n                'Hosts',\n                'Sockets',\n                'Clusters',\n                'VMs'\n            ]\n        };\n    }\n\n    public render() {\n        const { columns } = this.state;\n        const { summary } = this.props;\n\n        let totalHosts = 0;\n        let totalSockets = 0;\n        let totalClusters = 0;\n        let totalVms = 0;\n\n        const rows = summary.map((element) => {\n            totalHosts += (element.hosts || 0);\n            totalSockets += (element.sockets || 0);\n            totalClusters += (element.clusters || 0);\n            totalVms += (element.vms || 0);\n\n            return [\n                !isNullOrUndefined(element.provider) ? element.provider : '',\n                !isNullOrUndefined(element.product) ? element.product : '',\n                !isNullOrUndefined(element.version) ? element.version : '',\n                !isNullOrUndefined(element.hosts) ? formatNumber(element.hosts, 0) : '',\n                !isNullOrUndefined(element.sockets) ? formatNumber(element.sockets, 0) : '',\n                !isNullOrUndefined(element.clusters) ? formatNumber(element.clusters, 0) : '',\n                !isNullOrUndefined(element.vms) ? formatNumber(element.vms, 0) : '',\n            ];\n        });\n\n        return (\n            <React.Fragment>\n                <Table\n                    aria-label='Summary table'\n                    cells={ columns }\n                    rows={ rows }\n                    variant={ TableVariant.compact }\n                    borders={ false }\n                >\n                    <TableHeader />\n                    <TableBody />\n                    <tfoot>\n                        <tr className=\"summary-table-footer\">\n                            <td colSpan={ 3 }>\n                                <strong>Total</strong>\n                            </td>\n                            <td>\n                                <strong>{ formatNumber(totalHosts, 0) }</strong>\n                            </td>\n                            <td>\n                                <strong>{ formatNumber(totalSockets, 0) }</strong>\n                            </td>\n                            <td>\n                                <strong>{ formatNumber(totalClusters, 0) }</strong>\n                            </td>\n                            <td>\n                                <strong>{ formatNumber(totalVms, 0) }</strong>\n                            </td>\n                        </tr>\n                    </tfoot>\n                </Table>\n            </React.Fragment>\n        );\n    }\n}\n\nexport default SummaryTable;\n","import ScansRunTable from './ScansRunTable';\n\nexport default ScansRunTable;\n","import React, { Component } from 'react';\nimport {\n    Table,\n    TableBody,\n    TableVariant,\n    ICell,\n    TableHeader\n} from '@patternfly/react-table';\nimport { formatDate } from '../../../Utilities/formatValue';\nimport { ScanRunModel } from '../../../models';\n\nexport interface Props {\n    scanRuns: ScanRunModel[];\n}\n\ninterface State {\n    columns: Array<ICell | string>;\n}\n\nclass ScansRunTable extends Component<Props, State> {\n\n    constructor(props: Props) {\n        super(props);\n        this.state = {\n            columns: [\n                'Target',\n                'Type',\n                'Date'\n            ]\n        };\n    }\n\n    public render() {\n        const { columns } = this.state;\n        const { scanRuns } = this.props;\n\n        const rows = scanRuns.map((element) => {\n            return [\n                element.target,\n                element.smartStateEnabled ? 'Virt Platform + SmartState' : 'Virt Platform',\n                formatDate(new Date(element.date), false)\n            ];\n        });\n\n        return (\n            <React.Fragment>\n                <Table\n                    aria-label='Scans run table'\n                    cells={ columns }\n                    rows={ rows }\n                    variant={ TableVariant.compact }\n                    borders={ false }\n                >\n                    <TableHeader />\n                    <TableBody />                    \n                </Table>\n            </React.Fragment>\n        );\n    }\n}\n\nexport default ScansRunTable;\n","import React from 'react';\nimport {\n    TableToolbar,\n    SkeletonTable\n} from '@redhat-cloud-services/frontend-components';\nimport {\n    Table,\n    TableHeader,\n    TableBody,\n    ICell,\n    IRow,\n    sortable,\n    ISortBy,\n    cellWidth,\n    TableVariant\n} from '@patternfly/react-table';\nimport {\n    ToolbarGroup,\n    ToolbarItem,\n    Pagination,\n    Button,\n    Bullseye,\n    EmptyState,\n    EmptyStateIcon,\n    EmptyStateVariant,\n    Title,\n    TitleLevel,\n    EmptyStateBody} from '@patternfly/react-core';\nimport { ErrorCircleOIcon, SearchIcon } from '@patternfly/react-icons';\nimport { WorkloadModel } from '../../../models';\nimport { ObjectFetchStatus } from '../../../models/state';\nimport debounce from 'lodash/debounce';\nimport { formatNumber } from '../../../Utilities/formatValue';\nimport './WorkloadsDetectedTable.scss';\nimport { isNullOrUndefined } from '../../../Utilities/formUtils';\n\ninterface StateToProps {\n    reportWorkloadsDetected: {\n        total: number;\n        items: WorkloadModel[]\n    };\n    reportWorkloadsDetectedFetchStatus: ObjectFetchStatus;\n}\n\ninterface DispatchToProps {\n    fetchReportWorkloadsDetected: (\n        reportId: number,\n        page: number,\n        perPage: number,\n        orderBy: string | undefined,\n        orderDirection: 'asc' | 'desc' | undefined\n    ) => any;\n}\n\ninterface Props extends StateToProps, DispatchToProps {\n    reportId: number;\n};\n\ninterface Column extends ICell {\n    key: string;\n    cellFormatters?: any;\n    transforms?: any;\n}\n\ninterface State {\n    page: number;\n    perPage: number;\n    columns: Column[];\n    rows: IRow[];\n    sortBy: ISortBy;\n};\n\nclass WorkloadsDetectedTable extends React.Component<Props, State> {\n\n    public changePage = debounce(() => {\n        this.refreshData();\n    }, 800);\n\n    constructor(props: Props) {\n        super(props);\n        this.state = {\n            page: 1,\n            perPage: 10,\n            columns: [\n                {\n                    title: 'Workloads',\n                    key: 'workload',\n                    props: { },\n                    transforms: [ cellWidth('25'), sortable ]\n                },\n                {\n                    title: 'OS',\n                    key: 'osName',\n                    props: { },\n                    transforms: [ cellWidth('25'), sortable ]\n                },\n                {\n                    title: 'In Clusters',\n                    key: 'clusters',\n                    props: { },\n                    transforms: [ cellWidth('25') ]\n                },\n                {\n                    title: 'VMs',\n                    key: 'vms',\n                    props: { },\n                    transforms: [ cellWidth('25'), sortable ]\n                }\n            ],\n            rows: [],\n            sortBy: { }\n        };\n    }\n\n    public componentDidMount() {\n        this.refreshData();\n    }\n\n    public refreshData = (\n        page: number = this.state.page,\n        perPage: number = this.state.perPage,\n        { direction, index } = this.state.sortBy\n    ) => {\n        const { reportId, fetchReportWorkloadsDetected } = this.props;\n\n        const column = index ? this.state.columns[index].key : undefined;\n        const orderDirection = direction ? direction : undefined;\n        fetchReportWorkloadsDetected(reportId, page, perPage, column, orderDirection).then(() => {\n            this.filtersInRowsAndCells();\n        });\n    }\n\n    public filtersInRowsAndCells = () => {\n        const items: WorkloadModel[] = this.props.reportWorkloadsDetected.items\n            ? Object.values(this.props.reportWorkloadsDetected.items) : [];\n\n        let rows: any[][] = [];\n        if (items.length > 0) {\n            rows = items.map((row: WorkloadModel) => {\n                return [\n                    row.workload ? row.workload : '',\n                    row.osName ? row.osName : '',\n                    !isNullOrUndefined(row.clusters) ? formatNumber(row.clusters, 0) : '',\n                    !isNullOrUndefined(row.vms) ? formatNumber(row.vms, 0) : ''\n                ];\n            });\n        }\n\n        this.setState({ rows });\n    }\n\n    /**\n     * Allways will reset the page to 1\n     */\n    public onSort = (event: any, index: number, direction: any) => {\n        const page = 1;\n        const { reportId } = this.props;\n        const { perPage } = this.state;\n\n        const column = index ? this.state.columns[index].key : undefined;\n        const orderDirection = direction ? direction : undefined;\n        this.props.fetchReportWorkloadsDetected(reportId, page, perPage, column, orderDirection).then(() => {\n            this.setState({\n                page,\n                sortBy: { index, direction }\n            });\n            this.filtersInRowsAndCells();\n        });\n    }\n\n    public onPageChange = (_event: any, page: number, shouldDebounce: boolean) => {\n        this.setState({ page });\n        if (shouldDebounce) {\n            this.changePage();\n        } else {\n            this.refreshData(page);\n        }\n    };\n\n    public onSetPage = (event: any, page: number) => {\n        return event.target.className === 'pf-c-form-control' || this.onPageChange(event, page, false);\n    };\n\n    public onPageInput = (event: any, page: number) => {\n        return this.onPageChange(event, page, true);\n    };\n\n    public onPerPageSelect = (_event: any, perPage: number) => {\n        let page = this.state.page;\n        const total = this.props.reportWorkloadsDetected.total;\n\n        // If current page and perPage would request data beyond total, show last available page\n        if (page * perPage > total) {\n            page = Math.floor(total / perPage) + 1;\n        }\n\n        this.setState({ page, perPage });\n        this.refreshData(page, perPage);\n    };\n\n    public renderPagination = () => {\n        const { page, perPage } = this.state;\n        const { total } = this.props.reportWorkloadsDetected;\n\n        return (\n            <Pagination\n                itemCount={ total }\n                perPage={ perPage }\n                page={ page }\n                onSetPage={ this.onSetPage }\n                onPageInput={ this.onPageInput }\n                onPerPageSelect={ this.onPerPageSelect }\n            />\n        );\n    };\n\n    public renderResultsTable = () => {\n        const { rows, columns, sortBy } = this.state;\n\n        return (\n            <Table\n                aria-label='Workloads detected'\n                cells={ columns }\n                rows={ rows }\n                sortBy={ sortBy }\n                onSort={ this.onSort }\n                variant={ TableVariant.compact }\n                borders={ false }\n            >\n                <TableHeader />\n                <TableBody />\n                <tfoot>\n                    <tr className=\"workloads-detected-table-footer\">\n                        <td colSpan={ 10 }>\n                            { this.renderPagination() }\n                        </td>\n                    </tr>\n                </tfoot>\n            </Table>\n        );\n    };\n\n    public renderNoResults = () => {\n        return (\n            <React.Fragment>\n                <Bullseye>\n                    <EmptyState variant={ EmptyStateVariant.full }>\n                        <EmptyStateIcon icon={ SearchIcon } />\n                        <Title headingLevel=\"h5\" size=\"lg\">No results found</Title>\n                        <EmptyStateBody>\n                            No results match the search criteria\n                        </EmptyStateBody>\n                    </EmptyState>\n                </Bullseye>\n            </React.Fragment>\n        );\n    };\n\n    public renderTable = () => {\n        const { reportWorkloadsDetected } = this.props;\n\n        return (\n            <React.Fragment>\n                { (reportWorkloadsDetected.total > 0 ? this.renderResultsTable() : this.renderNoResults()) }\n            </React.Fragment>\n        );\n    };\n\n    public renderTableSkeleton = () => {\n        return (\n            <React.Fragment>\n                <SkeletonTable colSize={ 4 } rowSize={ 5 }/>\n            </React.Fragment>\n        );\n    };\n\n    public renderFetchError = () => {\n        const onRetryClick = () => {\n            this.refreshData();\n        };\n\n        return (\n            <Bullseye>\n                <EmptyState variant={ EmptyStateVariant.large }>\n                    <EmptyStateIcon icon={ ErrorCircleOIcon } />\n                    <Title headingLevel={ TitleLevel.h5 } size=\"lg\">\n                        Error\n                    </Title>\n                    <EmptyStateBody>\n                        Something unexpected happend, please try again!\n                    </EmptyStateBody>\n                    <Button variant=\"primary\" onClick={ onRetryClick }>Retry</Button>\n                </EmptyState>\n            </Bullseye>\n        );\n    };\n\n    public render() {\n        const { reportWorkloadsDetectedFetchStatus } = this.props;\n\n        if (reportWorkloadsDetectedFetchStatus.error) {\n            return this.renderFetchError();\n        }\n\n        const isFetchComplete: boolean = reportWorkloadsDetectedFetchStatus.status === 'complete';\n\n        return (\n            <React.Fragment>\n                <TableToolbar className=\"pf-u-justify-content-space-between\">\n                    <ToolbarGroup>\n                        <ToolbarItem className=\"pf-u-mr-xl\"/>\n                    </ToolbarGroup>\n                    <ToolbarGroup>\n                        <ToolbarItem>\n                            { this.renderPagination() }\n                        </ToolbarItem>\n                    </ToolbarGroup>\n                </TableToolbar>\n                { isFetchComplete ? this.renderTable() : this.renderTableSkeleton() }\n            </React.Fragment>\n        );\n    }\n\n}\n\nexport default WorkloadsDetectedTable;\n","import { connect } from 'react-redux';\nimport WorkloadsDetectedTable from './WorkloadsDetectedTable';\nimport { GlobalState } from '../../../models/state';\nimport * as reportActions from '../../../actions/ReportActions';\n\nconst mapStateToProps = (state: GlobalState) => {\n    const {\n        reportWorkloadsDetected,\n        reportWorkloadsDetectedFetchStatus,\n    } = state.reportState;\n    return {\n        reportWorkloadsDetected,\n        reportWorkloadsDetectedFetchStatus,\n    };\n};\n\nconst mapDispatchToProps = {\n    fetchReportWorkloadsDetected: reportActions.fetchReportWorkloadsDetected\n};\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps,\n)(WorkloadsDetectedTable);\n","import React from 'react';\nimport {\n    TableToolbar,\n    SkeletonTable\n} from '@redhat-cloud-services/frontend-components';\nimport {\n    Table,\n    TableHeader,\n    TableBody,\n    ICell,\n    IRow,\n    sortable,\n    ISortBy,\n    cellWidth,\n    TableVariant\n} from '@patternfly/react-table';\nimport {\n    ToolbarGroup,\n    ToolbarItem,\n    Pagination,\n    Button,\n    Bullseye,\n    EmptyState,\n    EmptyStateIcon,\n    EmptyStateVariant,\n    Title,\n    TitleLevel,\n    EmptyStateBody} from '@patternfly/react-core';\nimport { ErrorCircleOIcon, SearchIcon } from '@patternfly/react-icons';\nimport { FlagModel, FlagAssessmentModel } from '../../../models';\nimport { ObjectFetchStatus } from '../../../models/state';\nimport debounce from 'lodash/debounce';\nimport { formatNumber } from '../../../Utilities/formatValue';\nimport './FlagsTable.scss';\nimport { isNullOrUndefined } from '../../../Utilities/formUtils';\n\ninterface StateToProps {\n    reportFlags: {\n        total: number;\n        items: FlagModel[]\n    };\n    reportFlagsFetchStatus: ObjectFetchStatus;\n    allFlags: FlagAssessmentModel[],\n    allFlagsFetchStatus: ObjectFetchStatus;\n}\n\ninterface DispatchToProps {\n    fetchReportFlags: (\n        reportId: number,\n        page: number,\n        perPage: number,\n        orderBy: string | undefined,\n        orderDirection: 'asc' | 'desc' | undefined\n    ) => any;\n    fetchAllFlagAssessments: () => any;\n}\n\ninterface Props extends StateToProps, DispatchToProps {\n    reportId: number;\n};\n\ninterface Column extends ICell {\n    key: string;\n    cellFormatters?: any;\n    transforms?: any;\n}\n\ninterface State {\n    page: number;\n    perPage: number;\n    columns: Column[];\n    rows: IRow[];\n    sortBy: ISortBy;\n};\n\nclass FlagsTable extends React.Component<Props, State> {\n\n    public changePage = debounce(() => {\n        this.refreshData();\n    }, 800);\n\n    constructor(props: Props) {\n        super(props);\n        this.state = {\n            page: 1,\n            perPage: 10,\n            columns: [\n                {\n                    title: 'Flags',\n                    key: 'flag',\n                    props: { },\n                    transforms: [ sortable ]\n                },\n                {\n                    title: 'Assessment',\n                    key: 'assessment',\n                    props: { },\n                    transforms: [ ]\n                },\n                {\n                    title: 'OS',\n                    key: 'osName',\n                    props: { },\n                    transforms: [ cellWidth('10'), sortable ]\n                },\n                {\n                    title: 'In Clusters',\n                    key: 'clusters',\n                    props: { },\n                    transforms: []\n                },\n                {\n                    title: 'In VMs',\n                    key: 'vms',\n                    props: { },\n                    transforms: [ sortable ]\n                }\n            ],\n            rows: [],\n            sortBy: { }\n        };\n    }\n\n    public componentDidMount() {\n        // Fetch Flag-Assessment column\n        const { allFlags, fetchAllFlagAssessments } = this.props;\n        if (allFlags && allFlags.length === 0) {\n            fetchAllFlagAssessments();\n        }\n\n        this.refreshData();\n    }\n\n    public componentDidUpdate(prevProps: Props) {\n        if (prevProps.allFlags !== this.props.allFlags) {\n            this.filtersInRowsAndCells();\n        }\n    }\n\n    public refreshData = (\n        page: number = this.state.page,\n        perPage: number = this.state.perPage,\n        { direction, index } = this.state.sortBy\n    ) => {\n        const { reportId, fetchReportFlags } = this.props;\n\n        const column = index ? this.state.columns[index].key : undefined;\n        const orderDirection = direction ? direction : undefined;\n        fetchReportFlags(reportId, page, perPage, column, orderDirection).then(() => {\n            this.filtersInRowsAndCells();\n        });\n    }\n\n    public filtersInRowsAndCells = () => {\n        const { allFlags, reportFlags } = this.props;\n        const items: FlagModel[] = reportFlags.items ? Object.values(reportFlags.items) : [];\n\n        let rows: any[][] = [];\n        if (items.length > 0) {\n            rows = items.map((row: FlagModel) => {\n                let flagAssessmentModel = allFlags.find((element: FlagAssessmentModel) => {\n                    return (element.flag === row.flag && element.osName === row.osName)\n                });\n                \n                if (!flagAssessmentModel) {\n                    flagAssessmentModel = allFlags.find((element: FlagAssessmentModel) => {\n                        return (element.flag === row.flag && element.osName === '')\n                    }); \n                }\n                \n                return [\n                    flagAssessmentModel ? flagAssessmentModel.flagLabel : row.flag,\n                    flagAssessmentModel ? flagAssessmentModel.assessment : '',\n                    row.osName ? row.osName : '',\n                    !isNullOrUndefined(row.clusters) ? formatNumber(row.clusters, 0) : '',\n                    !isNullOrUndefined(row.vms) ? formatNumber(row.vms, 0) : ''\n                ];\n            });\n        }\n\n        this.setState({ rows });\n    }\n\n    /**\n     * Allways will reset the page to 1\n     */\n    public onSort = (event: any, index: number, direction: any) => {\n        const page = 1;\n        const { reportId } = this.props;\n        const { perPage } = this.state;\n\n        const column = index ? this.state.columns[index].key : undefined;\n        const orderDirection = direction ? direction : undefined;\n        this.props.fetchReportFlags(reportId, page, perPage, column, orderDirection).then(() => {\n            this.setState({\n                page,\n                sortBy: { index, direction }\n            });\n            this.filtersInRowsAndCells();\n        });\n    }\n\n    public onPageChange = (_event: any, page: number, shouldDebounce: boolean) => {\n        this.setState({ page });\n        if (shouldDebounce) {\n            this.changePage();\n        } else {\n            this.refreshData(page);\n        }\n    };\n\n    public onSetPage = (event: any, page: number) => {\n        return event.target.className === 'pf-c-form-control' || this.onPageChange(event, page, false);\n    };\n\n    public onPageInput = (event: any, page: number) => {\n        return this.onPageChange(event, page, true);\n    };\n\n    public onPerPageSelect = (_event: any, perPage: number) => {\n        let page = this.state.page;\n        const total = this.props.reportFlags.total;\n\n        // If current page and perPage would request data beyond total, show last available page\n        if (page * perPage > total) {\n            page = Math.floor(total / perPage) + 1;\n        }\n\n        this.setState({ page, perPage });\n        this.refreshData(page, perPage);\n    };\n\n    public renderPagination = () => {\n        const { page, perPage } = this.state;\n        const { total } = this.props.reportFlags;\n\n        return (\n            <Pagination\n                itemCount={ total }\n                perPage={ perPage }\n                page={ page }\n                onSetPage={ this.onSetPage }\n                onPageInput={ this.onPageInput }\n                onPerPageSelect={ this.onPerPageSelect }\n            />\n        );\n    };\n\n    public renderResultsTable = () => {\n        const { rows, columns, sortBy } = this.state;\n\n        return (\n            <Table\n                aria-label='Workloads detected'\n                cells={ columns }\n                rows={ rows }\n                sortBy={ sortBy }\n                onSort={ this.onSort }\n                variant={ TableVariant.compact }\n                borders={ false }\n            >\n                <TableHeader />\n                <TableBody />\n                <tfoot>\n                    <tr className=\"flags-table-footer\">\n                        <td colSpan={ 10 }>\n                            { this.renderPagination() }\n                        </td>\n                    </tr>\n                </tfoot>\n            </Table>\n        );\n    };\n\n    public renderNoResults = () => {\n        return (\n            <React.Fragment>\n                <Bullseye>\n                    <EmptyState variant={ EmptyStateVariant.full }>\n                        <EmptyStateIcon icon={ SearchIcon } />\n                        <Title headingLevel=\"h5\" size=\"lg\">No results found</Title>\n                        <EmptyStateBody>\n                            No results match the search criteria\n                        </EmptyStateBody>\n                    </EmptyState>\n                </Bullseye>\n            </React.Fragment>\n        );\n    };\n\n    public renderTable = () => {\n        const { reportFlags } = this.props;\n\n        return (\n            <React.Fragment>\n                { (reportFlags.total > 0 ? this.renderResultsTable() : this.renderNoResults()) }\n            </React.Fragment>\n        );\n    };\n\n    public renderTableSkeleton = () => {\n        return (\n            <React.Fragment>\n                <SkeletonTable colSize={ 5 } rowSize={ 5 }/>\n            </React.Fragment>\n        );\n    };\n\n    public renderFetchError = () => {\n        const onRetryClick = () => {\n            this.refreshData();\n        };\n\n        return (\n            <Bullseye>\n                <EmptyState variant={ EmptyStateVariant.large }>\n                    <EmptyStateIcon icon={ ErrorCircleOIcon } />\n                    <Title headingLevel={ TitleLevel.h5 } size=\"lg\">\n                        Error\n                    </Title>\n                    <EmptyStateBody>\n                        Something unexpected happend, please try again!\n                    </EmptyStateBody>\n                    <Button variant=\"primary\" onClick={ onRetryClick }>Retry</Button>\n                </EmptyState>\n            </Bullseye>\n        );\n    };\n\n    public render() {\n        const { reportFlagsFetchStatus } = this.props;\n\n        if (reportFlagsFetchStatus.error) {\n            return this.renderFetchError();\n        }\n\n        const isFetchComplete: boolean = reportFlagsFetchStatus.status === 'complete';\n\n        return (\n            <React.Fragment>\n                <TableToolbar className=\"pf-u-justify-content-space-between\">\n                    <ToolbarGroup>\n                        <ToolbarItem className=\"pf-u-mr-xl\"/>\n                    </ToolbarGroup>\n                    <ToolbarGroup>\n                        <ToolbarItem>\n                            { this.renderPagination() }\n                        </ToolbarItem>\n                    </ToolbarGroup>\n                </TableToolbar>\n                { isFetchComplete ? this.renderTable() : this.renderTableSkeleton() }\n            </React.Fragment>\n        );\n    }\n\n}\n\nexport default FlagsTable;\n","import { connect } from 'react-redux';\nimport FlagsTable from './FlagsTable';\nimport { GlobalState } from '../../../models/state';\nimport * as reportActions from '../../../actions/ReportActions';\nimport * as mappingActions from '../../../actions/MappingsActions';\n\nconst mapStateToProps = (state: GlobalState) => {\n    const {\n        reportFlags,\n        reportFlagsFetchStatus\n    } = state.reportState;\n    const {\n        flagAssessment: {\n            allFlags,\n            allFlagsFetchStatus\n        }\n    } = state.mappingsState;\n    return {\n        reportFlags,\n        reportFlagsFetchStatus,\n        allFlags,\n        allFlagsFetchStatus\n    };\n};\n\nconst mapDispatchToProps = {\n    fetchReportFlags: reportActions.fetchReportFlags,\n    fetchAllFlagAssessments: mappingActions.fetchAllFlagAssessments\n};\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(FlagsTable);\n","import React from 'react';\nimport { Card, CardBody } from '@patternfly/react-core';\n\ninterface Props {\n    title: string;\n    description: string;\n}\n\ninterface State {}\n\nexport class SolidCard extends React.Component<Props, State> {\n    constructor(props: Props) {\n        super(props);\n    }\n\n    public render() {\n        const { title, description } = this.props;\n\n        return (\n            <Card className=\"xa-c-card-solid\">\n                <CardBody>\n                    <h2 className=\"pf-c-title pf-m-3xl\">{title}</h2>\n                    <h3 className=\"pf-c-title pf-m-1xl\">{description}</h3>\n                </CardBody>\n            </Card>\n        );\n    }\n}\n","import React from 'react';\nimport {\n    Skeleton,\n    SkeletonTable\n} from '@redhat-cloud-services/frontend-components';\nimport { ObjectFetchStatus } from '../../../models/state';\nimport { ReportWorkloadSummary } from '../../../models';\nimport {\n    Bullseye,\n    EmptyState,\n    EmptyStateIcon,\n    EmptyStateVariant,\n    Title,\n    EmptyStateBody,\n    Button,\n    TitleLevel,\n    Stack,\n    StackItem\n} from '@patternfly/react-core';\nimport { ErrorCircleOIcon } from '@patternfly/react-icons';\nimport ReportCard from '../../../PresentationalComponents/ReportCard';\nimport SummaryTable from '../../../PresentationalComponents/Reports/SummaryTable';\nimport FancyChartDonut from '../../../PresentationalComponents/FancyChartDonut';\nimport { FancyChartDonutData } from '../../../PresentationalComponents/FancyChartDonut/FancyChartDonut';\nimport { formatPercentage, formatNumber } from '../../../Utilities/formatValue';\nimport ScansRunTable from '../../../PresentationalComponents/Reports/ScansRunTable';\nimport WorkloadsDetectedTable from '../../../SmartComponents/Reports/WorkloadsDetectedTable';\nimport FlagsTable from '../../../SmartComponents/Reports/FlagsTable';\nimport { SolidCard } from '../../../PresentationalComponents/SolidCard';\n\ninterface StateToProps {\n    reportWorkloadSummary: ReportWorkloadSummary | null;\n    reportWorkloadSummaryFetchStatus: ObjectFetchStatus;\n}\n\ninterface DispatchToProps {\n    fetchReportWorkloadSummary: (reportId: number) => any;\n}\n\nexport interface WorkloadMigrationSummaryProps extends StateToProps, DispatchToProps {\n    reportId: number;\n};\n\ninterface State {\n    isCurrentFetchReportWorkloadSummaryCompletedSuccessfully: boolean;\n};\n\nconst sumReducer = (a: number, b: number) => a + b;\n\nexport class WorkloadMigrationSummary extends React.Component<WorkloadMigrationSummaryProps, State> {\n\n    constructor(props: WorkloadMigrationSummaryProps) {\n        super(props);\n        this.state = {\n            isCurrentFetchReportWorkloadSummaryCompletedSuccessfully: false\n        };\n    }\n\n    public componentDidMount() {\n        this.refreshData();\n    }\n\n    public refreshData = () => {\n        const { reportId, fetchReportWorkloadSummary } = this.props;\n        fetchReportWorkloadSummary(reportId).then(() => {\n            this.setState({ isCurrentFetchReportWorkloadSummaryCompletedSuccessfully: true });\n        }).catch(() => {\n            this.setState({ isCurrentFetchReportWorkloadSummaryCompletedSuccessfully: false });\n        });\n    };\n\n    public renderErrorCard = (title: string) => {\n        return (\n            <ReportCard title={title}>\n                There is no enough data to render this card.\n            </ReportCard>\n        );\n    };\n\n    public renderSummary = () => {\n        const { reportWorkloadSummary } = this.props;\n        const title=\"Summary\";\n\n        if (!reportWorkloadSummary) {\n            return this.renderErrorCard(title);\n        }\n\n        // TODO this validation was created when Models were not complete in the backend\n        // It should be safe to remove this\n        const summary = reportWorkloadSummary.summaryModels;\n        if (!summary) {\n            return this.renderErrorCard(title);\n        }\n\n        return (\n            <ReportCard title={title}>\n                <SummaryTable summary={ summary } />\n            </ReportCard>\n        );\n    };\n\n    public renderMigrationComplexity = () => {\n        const { reportWorkloadSummary } = this.props;\n        const title=\"Migration complexity\";\n\n        if (!reportWorkloadSummary) {\n            return this.renderErrorCard(title);\n        }\n\n        // TODO this validation was created when Models were not complete in the backend\n        // It should be safe to remove this\n        const complexity = reportWorkloadSummary.complexityModel;\n        if (!complexity) {\n            return this.renderErrorCard(title);\n        }\n\n        //\n        const pieValues = [\n            complexity.easy || 0,\n            complexity.medium  || 0,\n            complexity.hard  || 0,\n            complexity.unknown  || 0,\n            complexity.unsupported  || 0\n        ];\n\n        const total = pieValues.reduce(sumReducer, 0);\n        const percentages = pieValues.map((val: number) => val / total);\n\n        const chartProps = {\n            title: formatNumber(total, 0),\n            subTitle: 'Total VMs',\n            height: 250,\n            width: 250\n        };\n        const chartLegendProps = {\n            height: 300,\n            width: 210,\n            responsive: false,\n            y: 60\n        };\n\n        const chartData: FancyChartDonutData[] = [\n            { label: 'Easy', value: percentages[0], extraData: pieValues[0] },\n            { label: 'Medium', value: percentages[1], extraData: pieValues[1] },\n            { label: 'Hard', value: percentages[2], extraData: pieValues[2] },\n            { label: 'Unknown', value: percentages[3], extraData: pieValues[3] },\n            { label: 'Unsupported', value: percentages[4], extraData: pieValues[4] }\n        ];\n\n        const tickFormat = (label: string, value: number, data: any) => `${label}: ${formatPercentage(value, 2)}`;\n        const tooltipFormat = ({datum}) => `${datum.x}: ${formatPercentage(datum.y, 2)} \\n VMs: ${formatNumber(datum.extraData, 0)}`;\n\n        return (\n            <ReportCard\n                title='Migration complexity'\n            >\n                <FancyChartDonut\n                    data={ chartData }\n                    chartProps={ chartProps }\n                    chartLegendProps={ chartLegendProps }\n                    tickFormat={ tickFormat }\n                    tooltipFormat={ tooltipFormat }\n                />\n            </ReportCard>\n        );\n    };\n\n    public renderTargetRecommendation = () => {\n        const { reportWorkloadSummary } = this.props;\n        const title=\"Target recommendation\";\n\n        if (!reportWorkloadSummary) {\n            return this.renderErrorCard(title);\n        }\n\n        // TODO this validation was created when Models were not complete in the backend\n        // It should be safe to remove this\n        const recommendedTargetsIMS = reportWorkloadSummary.recommendedTargetsIMSModel;\n        if (!recommendedTargetsIMS) {\n            return this.renderErrorCard(title);\n        }\n\n        const values = [\n            recommendedTargetsIMS.rhv || 0,\n            recommendedTargetsIMS.osp || 0,\n            recommendedTargetsIMS.rhel || 0,\n            recommendedTargetsIMS.ocp || 0\n        ];\n        const total = recommendedTargetsIMS.total;\n        const percentages = values.map((val: number) => val / total);\n\n        return (\n            <ReportCard title={title} skipBullseye={true}>\n                <div className=\"pf-l-grid pf-m-all-6-col-on-md pf-m-all-3-col-on-lg pf-m-gutter\">\n                    <SolidCard\n                        title={`${formatPercentage(percentages[0], 0)} RHV`}\n                        description=\"Workloads suitable for Red Hat Virtualization\"\n                    />\n                    <SolidCard\n                        title={`${formatPercentage(percentages[1], 0)} OSP`}\n                        description=\"Workloads could be running on Red Hat OpenStack Platform\"\n                    />\n                    <SolidCard\n                        title={`${formatPercentage(percentages[2], 0)} RHEL`}\n                        description=\"Workloads possible to migrate to Red Hat Enterprise Linux\"\n                    />\n                    <SolidCard\n                        title={`${formatPercentage(percentages[3], 0)} OCP`}\n                        description=\"Workloads targeted for OpenShift virtualization\"\n                    />\n                </div>\n            </ReportCard>\n        );\n    };\n\n    public renderWorkloadsDetectedTable = () => {\n        const { reportId } = this.props;\n\n        return (\n            <ReportCard\n                title='Workloads detected'\n                skipBullseye={ true }\n            >\n                <WorkloadsDetectedTable reportId={ reportId } />\n            </ReportCard>\n        );\n    };\n\n    public renderWorkloadsDetected = () => {\n        const { reportWorkloadSummary } = this.props;\n        const title=\"Workloads detected (OS Types)\";\n\n        if (!reportWorkloadSummary) {\n            return this.renderErrorCard(title);\n        }\n\n        // TODO this validation was created when Models were not complete in the backend\n        // It should be safe to remove this\n        const workloadsDetectedOSTypeModels = reportWorkloadSummary.workloadsDetectedOSTypeModels;\n        if (!workloadsDetectedOSTypeModels) {\n            return this.renderErrorCard(title);\n        }\n\n        //\n        const pieValues = workloadsDetectedOSTypeModels.map(element => element.total);\n\n        const total = pieValues.reduce(sumReducer, 0);\n        const percentages = pieValues.map((val: number) => val / total);\n\n        const chartProps = {\n            title: formatNumber(total, 0),\n            subTitle: 'Total workloads',\n            height: 300,\n            width: 300\n        };\n        const chartLegendProps = {\n            height: 300,\n            width: 210,\n            responsive: false,\n            y: 60\n        };\n\n        const chartData: FancyChartDonutData[] = workloadsDetectedOSTypeModels.map((element, index: number) => ({\n            label: element.osName,\n            value: percentages[index],\n            extraData: pieValues[index]\n        }));\n\n        const tickFormat = (label: string, value: number) => `${label}: ${formatPercentage(value, 2)}`;\n        const tooltipFormat = ({datum}) => `${datum.x}: ${formatPercentage(datum.y, 2)} \\n Workloads: ${formatNumber(datum.extraData, 0)}`;\n\n        return (\n            <ReportCard\n                title={title}\n            >\n                <FancyChartDonut\n                    data={ chartData }\n                    chartProps={ chartProps }\n                    chartLegendProps={ chartLegendProps }\n                    tickFormat={ tickFormat }\n                    tooltipFormat={ tooltipFormat }\n                />\n            </ReportCard>\n        );\n    };\n\n    public renderFlagsTable = () => {\n        const { reportId } = this.props;\n\n        return (\n            <ReportCard\n                title='Flags (Considerations to be migrated)'\n                skipBullseye={ true }\n            >\n                <FlagsTable reportId={ reportId }/>\n            </ReportCard>\n        );\n    };\n\n    public renderScansRun = () => {\n        const { reportWorkloadSummary } = this.props;\n        const title=\"Scans run\";\n\n        if (!reportWorkloadSummary) {\n            return this.renderErrorCard(title);\n        }\n\n        // TODO this validation was created when Models were not complete in the backend\n        // It should be safe to remove this\n        const scanRuns = reportWorkloadSummary.scanRunModels;\n        if (!scanRuns) {\n            return this.renderErrorCard(title);\n        }\n\n        return (\n            <ReportCard title={title}>\n                <ScansRunTable\n                    scanRuns={ scanRuns }\n                />\n            </ReportCard>\n        );\n    };\n\n    public renderReports = () => {\n        return (\n            <React.Fragment>\n                <Stack gutter='md'>\n                    <StackItem isFilled={ false }>\n                        { this.renderSummary() }\n                    </StackItem>\n                    <StackItem isFilled={ false }>\n                        { this.renderMigrationComplexity() }\n                    </StackItem>\n                    <StackItem isFilled={ false }>\n                        { this.renderTargetRecommendation() }\n                    </StackItem>\n                    <StackItem isFilled={ false }>\n                        { this.renderWorkloadsDetectedTable() }\n                    </StackItem>\n                    <StackItem isFilled={ false }>\n                        { this.renderWorkloadsDetected() }\n                    </StackItem>\n                    <StackItem isFilled={ false }>\n                        { this.renderFlagsTable() }\n                    </StackItem>\n                    <StackItem isFilled={ false }>\n                        { this.renderScansRun() }\n                    </StackItem>\n                </Stack>\n            </React.Fragment>\n        );\n    };\n\n    public renderReportSkeleton = () => {\n        return (\n            <React.Fragment>\n                <Stack gutter='md'>\n                    <StackItem isFilled={ false }>\n                        <ReportCard\n                            title={ <Skeleton size=\"sm\" /> }\n                        >\n                            <SkeletonTable colSize={ 7 } rowSize={ 3 }/>\n                        </ReportCard>\n                    </StackItem>\n                    <StackItem isFilled={ false }>\n                        <ReportCard\n                            title={ <Skeleton size=\"sm\" /> }\n                        >\n                            <Skeleton size=\"sm\" style={ { height: '300px' } }/>\n                        </ReportCard>\n                    </StackItem>\n                    <StackItem isFilled={ false }>\n                        <ReportCard\n                            title={ <Skeleton size=\"sm\" /> }\n                        >\n                            <SkeletonTable colSize={ 3 } rowSize={ 1  }/>\n                        </ReportCard>\n                    </StackItem>\n                </Stack>\n            </React.Fragment>\n        );\n    };\n\n    public renderFetchError = () => {\n        return (\n            <Bullseye>\n                <EmptyState variant={ EmptyStateVariant.large }>\n                    <EmptyStateIcon icon={ ErrorCircleOIcon } />\n                    <Title headingLevel={ TitleLevel.h5 } size=\"lg\">\n                        Error\n                    </Title>\n                    <EmptyStateBody>\n                        Something unexpected happend, please try again!\n                    </EmptyStateBody>\n                    <Button variant=\"primary\" onClick={ this.refreshData }>Retry</Button>\n                </EmptyState>\n            </Bullseye>\n        );\n    };\n\n    public render() {\n        const { isCurrentFetchReportWorkloadSummaryCompletedSuccessfully } = this.state;\n        const { reportWorkloadSummary, reportWorkloadSummaryFetchStatus } = this.props;\n\n        const isFetchComplete: boolean = reportWorkloadSummaryFetchStatus.status === 'complete';\n\n        if (reportWorkloadSummaryFetchStatus.error || (isFetchComplete && !reportWorkloadSummary)) {\n            return this.renderFetchError();\n        }\n\n        return (\n            <React.Fragment>\n                { isFetchComplete && isCurrentFetchReportWorkloadSummaryCompletedSuccessfully ? this.renderReports() : this.renderReportSkeleton() }\n            </React.Fragment>\n        );\n    }\n}\n","import { connect } from 'react-redux';\nimport { WorkloadMigrationSummary } from './WorkloadSummary';\nimport { GlobalState } from '../../../models/state';\nimport * as reportActions from '../../../actions/ReportActions';\n\nconst mapStateToProps = (state: GlobalState)  => {\n    const {\n        reportWorkloadSummary,\n        reportWorkloadSummaryFetchStatus\n    } = state.reportState;\n    return {\n        reportWorkloadSummary,\n        reportWorkloadSummaryFetchStatus\n    };\n};\n\nconst mapDispatchToProps = {\n    fetchReportWorkloadSummary: reportActions.fetchReportWorkloadSummary\n};\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(WorkloadMigrationSummary);\n","exports = module.exports = require(\"../../../../node_modules/css-loader/dist/runtime/api.js\")(false);\n// Module\nexports.push([module.id, \".summary-table-footer {\\n  border-bottom: 0 !important; }\\n\", \"\"]);\n\n","exports = module.exports = require(\"../../../../node_modules/css-loader/dist/runtime/api.js\")(false);\n// Module\nexports.push([module.id, \".workloads-detected-table-footer {\\n  height: 1px;\\n  border-top: var(--pf-c-table--BorderWidth) solid var(--pf-c-table--BorderColor);\\n  border-bottom: 0 !important; }\\n\", \"\"]);\n\n","exports = module.exports = require(\"../../../../node_modules/css-loader/dist/runtime/api.js\")(false);\n// Module\nexports.push([module.id, \".flags-table-footer {\\n  height: 1px;\\n  border-top: var(--pf-c-table--BorderWidth) solid var(--pf-c-table--BorderColor);\\n  border-bottom: 0 !important; }\\n\", \"\"]);\n\n","\nvar content = require(\"!!../../../../node_modules/css-loader/dist/cjs.js!../../../../node_modules/sass-loader/lib/loader.js!./SummaryTable.scss\");\n\nif(typeof content === 'string') content = [[module.id, content, '']];\n\nvar transform;\nvar insertInto;\n\n\n\nvar options = {\"hmr\":true}\n\noptions.transform = transform\noptions.insertInto = undefined;\n\nvar update = require(\"!../../../../node_modules/style-loader/lib/addStyles.js\")(content, options);\n\nif(content.locals) module.exports = content.locals;\n\nif(module.hot) {\n\tmodule.hot.accept(\"!!../../../../node_modules/css-loader/dist/cjs.js!../../../../node_modules/sass-loader/lib/loader.js!./SummaryTable.scss\", function() {\n\t\tvar newContent = require(\"!!../../../../node_modules/css-loader/dist/cjs.js!../../../../node_modules/sass-loader/lib/loader.js!./SummaryTable.scss\");\n\n\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\n\t\tvar locals = (function(a, b) {\n\t\t\tvar key, idx = 0;\n\n\t\t\tfor(key in a) {\n\t\t\t\tif(!b || a[key] !== b[key]) return false;\n\t\t\t\tidx++;\n\t\t\t}\n\n\t\t\tfor(key in b) idx--;\n\n\t\t\treturn idx === 0;\n\t\t}(content.locals, newContent.locals));\n\n\t\tif(!locals) throw new Error('Aborting CSS HMR due to changed css-modules locals.');\n\n\t\tupdate(newContent);\n\t});\n\n\tmodule.hot.dispose(function() { update(); });\n}"],"sourceRoot":""}