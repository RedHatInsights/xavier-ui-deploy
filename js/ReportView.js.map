{"version":3,"sources":["webpack:///./src/pages/ReportView/ReportViewConstants.tsx","webpack:///./src/PresentationalComponents/ReportViewPage/ReportViewPage.tsx","webpack:///./src/PresentationalComponents/ReportViewPage/index.tsx","webpack:///./src/pages/ReportView/ReportView.js","webpack:///./src/pages/ReportView/index.js","webpack:///./src/Utilities/formatValue.js"],"names":["WorkloadMigrationSummary","asyncComponent","InitialSavingsEstimation","WorkloadInventory","DEFAULT_VIEW_PATH_INDEX","INITIAL_SAVINGS_ESTIMATION_KEY","REPORT_VIEW_PATHS","key","title","path","component","props","handleTabClick","_event","tabIndex","setState","activeTabKey","history","match","push","url","renderTabs","report","currentBreadcrumb","reportName","Fragment","Breadcrumb","style","marginBottom","BreadcrumbItem","Link","to","isActive","className","reportDescription","Date","lastUpdate","Tabs","isFilled","onSelect","activeKey","map","elem","index","Tab","eventKey","renderTabsSkeleton","size","forEach","val","location","pathname","endsWith","state","render","reportFetchStatus","children","error","Redirect","isFetchComplete","status","this","mainStyle","withRouter","ReportView","reportId","params","fetchReport","Switch","Component","Route","from","React","propTypes","PropTypes","any","object","func","mapDispatchToProps","connect","reportState","unitLookupKey","unit","toLowerCase","formatCurrency","value","fractionDigits","fValue","toLocaleString","currency","minimumFractionDigits","maximumFractionDigits","unknownTypeFormatter","_unit","toFixed","formatUsageGb","formatUsageHrs","formatValue","options","lookup","formatDate","includeTime","timeZone","Intl","DateTimeFormat","resolvedOptions","dateOptions","timeZoneName","year","month","day","timeOptions","hour","minute","Object","assign","toLocaleDateString","formatNumber","formatPercentage","formatBytes","bytes","decimals","k","dm","sizes","i","Math","floor","log","s","parseFloat","pow"],"mappings":"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","file":"js/ReportView.js","sourcesContent":["import asyncComponent from '../../Utilities/asyncComponent';\n\nconst WorkloadMigrationSummary = asyncComponent(() =>\n    import(/* webpackChunkName: \"WorkloadMigrationSummary\" */ './WorkloadSummary'));\nconst InitialSavingsEstimation = asyncComponent(() =>\n    import(/* webpackChunkName: \"InitialSavingsEstimation\" */ './InitialSavingsEstimation'));\nconst WorkloadInventory = asyncComponent(() =>\n    import(/* webpackChunkName: \"WorkloadInventory\" */ './WorkloadInventory'));\n\nexport const DEFAULT_VIEW_PATH_INDEX = 0;\n\nexport const INITIAL_SAVINGS_ESTIMATION_KEY = 'INITIAL_SAVINGS_ESTIMATION_KEY';\nexport const WORKLOAD_MIGRATION_SUMMARY_KEY = 'WORKLOAD_MIGRATION_SUMMARY_KEY';\nexport const WORKLOAD_INVENTORY_KEY = 'WORKLOAD_INVENTORY_KEY';\n\n// The order of this array will determine the order of the tabs\nexport const REPORT_VIEW_PATHS = [\n    {\n        key: INITIAL_SAVINGS_ESTIMATION_KEY,\n        title: 'Initial savings estimation',\n        path: 'initialSavingsEstimation',\n        component: InitialSavingsEstimation\n    },\n    {\n        key: WORKLOAD_MIGRATION_SUMMARY_KEY,\n        title: 'Workload migration summary',\n        path: 'workloadMigrationSummary',\n        component: WorkloadMigrationSummary\n    },\n    {\n        key: WORKLOAD_INVENTORY_KEY,\n        title: 'Workload migration inventory',\n        path: 'workloadInventory',\n        component: WorkloadInventory\n    }\n];\n","import React, { Fragment, Component } from 'react';\nimport { Redirect } from 'react-router-dom';\nimport {\n    Main,\n    PageHeader,\n    PageHeaderTitle,\n    Skeleton\n} from '@redhat-cloud-services/frontend-components';\nimport {\n    Tabs,\n    Tab,\n    Breadcrumb,\n    BreadcrumbItem\n} from '@patternfly/react-core';\nimport { Report } from '../../models';\nimport { Link } from 'react-router-dom';\nimport { RouterGlobalProps } from '../../models/router';\nimport { REPORT_VIEW_PATHS, DEFAULT_VIEW_PATH_INDEX, INITIAL_SAVINGS_ESTIMATION_KEY } from '../../pages/ReportView/ReportViewConstants';\nimport { ObjectFetchStatus } from '../../models/state';\nimport { formatDate } from '../../Utilities/formatValue';\n\nexport interface Props extends RouterGlobalProps {\n    mainStyle?: any;\n    report: Report | null;\n    reportFetchStatus: ObjectFetchStatus;\n};\n\ninterface State {\n    activeTabKey: number | string;\n}\n\nclass ReportViewPage extends Component<Props, State> {\n\n    constructor(props: Props) {\n        super(props);\n\n        let activeTabKey = DEFAULT_VIEW_PATH_INDEX;\n\n        REPORT_VIEW_PATHS.forEach((val, index) => {\n            if (props.location.pathname.endsWith(val.path)) {\n                activeTabKey = index;\n            }\n        });\n\n        this.state = {\n            activeTabKey\n        };\n    }\n\n    public handleTabClick = (_event: React.MouseEvent<HTMLElement, MouseEvent>, tabIndex: number | string) => {\n        this.setState({\n            activeTabKey: tabIndex\n        });\n\n        const { history, match } = this.props;\n\n        history.push(`${match.url}/${REPORT_VIEW_PATHS[tabIndex].path}`);\n    };\n\n    public renderTabs = () => {\n        const { report } = this.props;\n        const { activeTabKey } = this.state;\n        const currentBreadcrumb = report ? report.reportName : '';\n\n        return (\n            <React.Fragment>\n                <Breadcrumb style={ { marginBottom: '25px' } }>\n                    <BreadcrumbItem>\n                        <Link to=\"/reports\">Reports</Link>\n                    </BreadcrumbItem>\n                    <BreadcrumbItem isActive={true}>{ currentBreadcrumb }</BreadcrumbItem>\n                </Breadcrumb>\n                <div className=\"pf-c-content\" style={{marginBottom: 'var(--pf-c-content--MarginBottom)'}}>\n                    <p>\n                        <span className=\"pf-c-title pf-m-3xl\">{ `${REPORT_VIEW_PATHS[activeTabKey].title} (${ currentBreadcrumb })` }</span>\n                    </p>\n                    <p>\n                        { (report && report.reportDescription) && <React.Fragment><span>{report.reportDescription}</span><br/></React.Fragment> }\n                        { (REPORT_VIEW_PATHS[activeTabKey].key === INITIAL_SAVINGS_ESTIMATION_KEY) && <React.Fragment>\n                                <span>Source:</span>&nbsp;<span>VSphere Enterprise Plus</span><br/>\n                                <span>Target:</span>&nbsp;<span>Red Hat Virtualization</span><br/>\n                            </React.Fragment>\n                        }\n                        <span>Date:</span>&nbsp;<span>{ report ? formatDate(new Date(report.lastUpdate)) : 'Unknown' }</span>\n                    </p>\n                </div>\n                <Tabs\n                    isFilled={true}\n                    onSelect={ this.handleTabClick }\n                    activeKey={ activeTabKey }\n                >\n                    { REPORT_VIEW_PATHS.map((elem, index) => {\n                        return (\n                            <Tab key={ index } eventKey={ index } title={ elem.title } />\n                        );\n                    })}\n                </Tabs>\n            </React.Fragment>\n        );\n    };\n\n    public renderTabsSkeleton = () => {\n        return (\n            <React.Fragment>\n                <div className=\"pf-l-stack pf-m-gutter\">\n                    <div className=\"pf-l-stack__item\">\n                        <Skeleton size=\"sm\" />\n                    </div>\n                    <div className=\"pf-l-stack__item\">\n                        <Skeleton size=\"sm\" />\n                    </div>\n                    <div className=\"pf-l-stack__item\">\n                        <Skeleton size=\"sm\" />\n                    </div>\n                    <div className=\"pf-l-stack__item\">\n                        <div className=\"pf-l-grid\">\n                            <div className=\"pf-l-grid__item pf-m-4-col\">\n                                <Skeleton size=\"md\" />\n                            </div>\n                            <div className=\"pf-l-grid__item pf-m-4-col\">\n                                <Skeleton size=\"md\" />\n                            </div>\n                            <div className=\"pf-l-grid__item pf-m-4-col\">\n                                <Skeleton size=\"md\" />\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </React.Fragment>\n        );\n    };\n\n    public render() {\n        const { reportFetchStatus, children } = this.props;\n\n        if (reportFetchStatus.error) {\n            return <Redirect to={ `/reports` } />;\n        }\n\n        const isFetchComplete: boolean = reportFetchStatus.status === 'complete';\n\n        return (\n            <Fragment>\n                <PageHeader>\n                    <PageHeaderTitle title={ isFetchComplete ? this.renderTabs() : this.renderTabsSkeleton() } />\n                </PageHeader>\n                <Main style={ this.props.mainStyle }>\n                    { isFetchComplete ? children : '' }\n                </Main>\n            </Fragment>\n        );\n    }\n}\n\nexport default ReportViewPage;\n","import ReportViewPage from './ReportViewPage';\nimport { withRouter } from 'react-router';\n\nexport default withRouter(ReportViewPage);\n","import React from 'react';\nimport { Redirect, Switch, Route } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport ReportViewPage from '../../PresentationalComponents/ReportViewPage';\nimport { REPORT_VIEW_PATHS, DEFAULT_VIEW_PATH_INDEX } from './ReportViewConstants';\n\nclass ReportView extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            reportId: props.match.params.reportId\n        };\n    }\n\n    componentDidMount() {\n        const { reportId } = this.state;\n        this.props.fetchReport(reportId);\n    }\n\n    render() {\n        const { report, reportFetchStatus } = this.props;\n        const { reportId } = this.state;\n\n        if (!reportId || reportFetchStatus.error) {\n            return <Redirect to=\"/report\" />;\n        }\n\n        return (\n            <ReportViewPage\n                report={ report }\n                reportFetchStatus={ reportFetchStatus }\n            >\n                <Switch>\n                    { REPORT_VIEW_PATHS.map((elem, index) => {\n                        const Component = elem.component;\n                        return (\n                            <Route\n                                key={ index }\n                                path={ `${this.props.match.url}/${elem.path}` }\n                                render={ () => <Component reportId={reportId} /> }\n                            />\n                        );\n                    })}\n\n                    <Redirect\n                        from={ `${this.props.match.url}` }\n                        to={ `${this.props.match.url}/${REPORT_VIEW_PATHS[DEFAULT_VIEW_PATH_INDEX].path}` }\n                    />\n                </Switch>\n            </ReportViewPage>\n        );\n    }\n}\n\nReportView.propTypes = {\n    report: PropTypes.any,\n    reportFetchStatus: PropTypes.object,\n    fetchReport: PropTypes.func,\n    history: PropTypes.object,\n    location: PropTypes.object,\n    match: PropTypes.object\n};\n\nexport default ReportView;\n","import { withRouter } from 'react-router';\nimport ReportView from './ReportView';\nimport { fetchReport } from '../../actions/ReportActions';\nimport { connect } from 'react-redux';\n\nconst mapStateToProps = (state)  => {\n    const {\n        report,\n        reportFetchStatus\n    } = state.reportState;\n    return {\n        report,\n        reportFetchStatus\n    };\n};\n\nconst mapDispatchToProps = {\n    fetchReport\n};\n\nexport default withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(ReportView)\n);\n","export const unitLookupKey = unit => {\n    const lookup = unit ? unit.toLowerCase() : '';\n    return lookup;\n};\n\nexport const formatCurrency = (value, unit, { fractionDigits = 2 } = {}) => {\n    let fValue = value;\n    if (!value) {\n        fValue = 0;\n    }\n\n    return fValue.toLocaleString('en', {\n        style: 'currency',\n        currency: unit || 'USD',\n        minimumFractionDigits: fractionDigits,\n        maximumFractionDigits: fractionDigits\n    });\n};\n\nconst unknownTypeFormatter = (value, _unit, { fractionDigits } = {}) => {\n    return value.toFixed(fractionDigits);\n};\n\nexport const formatUsageGb = (value, _unit, { fractionDigits = 2 } = {}) => {\n    return value.toFixed(fractionDigits);\n};\n\nexport const formatUsageHrs = (value, _unit, { fractionDigits } = {}) => {\n    return value.toFixed(fractionDigits);\n};\n\nexport const formatValue = (value, unit, options = {}) => {\n    const lookup = unitLookupKey(unit);\n    const fValue = value || 0;\n\n    switch (lookup) {\n        case 'usd':\n            return formatCurrency(fValue, lookup, options);\n        case 'gb':\n        case 'gb-hours':\n        case 'gb-mo':\n            return formatUsageGb(fValue, lookup, options);\n        case 'core-hours':\n        case 'hrs':\n            return formatUsageHrs(fValue, lookup, options);\n        default:\n            return unknownTypeFormatter(fValue, lookup, options);\n    }\n};\n\nexport const formatDate = (value, includeTime = true) => {\n    /*eslint new-cap: 0*/\n    const timeZone = Intl.DateTimeFormat().resolvedOptions().timeZone;\n    const dateOptions = { timeZone, timeZoneName: 'short', year: 'numeric', month: 'long', day: 'numeric' };\n    const timeOptions = { timeZone, timeZoneName: 'short', hour: '2-digit', minute: '2-digit' };\n\n    let options = dateOptions;\n    if (includeTime) {\n        options = Object.assign({}, dateOptions, timeOptions);\n    }\n\n    return value.toLocaleDateString('en', options);\n};\n\nexport const formatNumber = (value, fractionDigits = 2) => {\n    return value.toLocaleString('en', {\n        style: 'decimal',\n        minimumFractionDigits: fractionDigits,\n        maximumFractionDigits: fractionDigits\n    });\n};\n\nexport const formatPercentage = (value, fractionDigits = 2) => {\n    return value.toLocaleString('en', {\n        style: 'percent',\n        minimumFractionDigits: fractionDigits,\n        maximumFractionDigits: fractionDigits\n    });\n};\n\nexport const formatBytes = (bytes, decimals = 2) => {\n    if (bytes === 0) {\n        return '0 Bytes';\n    }\n\n    const k = 1024;\n    const dm = decimals < 0 ? 0 : decimals;\n    const sizes = [ 'Bytes', 'KB', 'MB', 'GiB', 'TB', 'PB', 'EB', 'ZB', 'YB' ];\n\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n\n    const s = parseFloat((bytes / Math.pow(k, i)).toFixed(dm));\n    return formatNumber(s, decimals) + ' ' + sizes[i];\n};\n"],"sourceRoot":""}